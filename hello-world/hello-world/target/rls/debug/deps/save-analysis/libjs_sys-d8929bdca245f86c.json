{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51],"program":"/Users/ragingwind/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","js_sys","/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=d8929bdca245f86c","-C","extra-filename=-d8929bdca245f86c","--out-dir","/Users/ragingwind/Workspace/wasm-bindgen-summary/hello-world/hello-world/target/rls/debug/deps","-L","dependency=/Users/ragingwind/Workspace/wasm-bindgen-summary/hello-world/hello-world/target/rls/debug/deps","--extern","wasm_bindgen=/Users/ragingwind/Workspace/wasm-bindgen-summary/hello-world/hello-world/target/rls/debug/deps/libwasm_bindgen-d5a36b38ae3cafc2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/ragingwind/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,87,111,114,107,115,112,97,99,101,47,119,97,115,109,45,98,105,110,100,103,101,110,45,115,117,109,109,97,114,121,47,104,101,108,108,111,45,119,111,114,108,100,47,104,101,108,108,111,45,119,111,114,108,100,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,106,115,95,115,121,115,45,100,56,57,50,57,98,100,99,97,50,52,53,102,56,54,99,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"js_sys","disambiguator":[3538905135615186012,9249879852972893259]},"crate_root":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src","external_crates":[{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15203638810868597712,17300442013722141670]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11146009991168716943,2172830830702649436]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15762031658991204948,3568202897914550072]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17333171034018679256,2583489994995213704]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7572029546031900894,6058451623646108603]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10116742577119454640,15647942667803333541]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[16133654549234031812,9292969963890267565]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1220330951077624249,617936659968857689]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[6425346779123324081,2910869620102085754]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[17757408737819865343,12366128222706934414]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":11,"id":{"name":"wasm_bindgen","disambiguator":[13951524792049663117,3277205063782392398]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","num":12,"id":{"name":"wasm_bindgen_macro","disambiguator":[15363008597602341715,16125581971855981513]}}],"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":228918,"line_start":1,"line_end":4631,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":228918,"line_start":1,"line_end":4631,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":556},{"krate":0,"index":572},{"krate":0,"index":568},{"krate":0,"index":562},{"krate":0,"index":558},{"krate":0,"index":218},{"krate":0,"index":322},{"krate":0,"index":328},{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":346},{"krate":0,"index":352},{"krate":0,"index":358},{"krate":0,"index":364},{"krate":0,"index":370},{"krate":0,"index":376},{"krate":0,"index":382},{"krate":0,"index":388},{"krate":0,"index":394},{"krate":0,"index":400},{"krate":0,"index":406},{"krate":0,"index":412},{"krate":0,"index":418},{"krate":0,"index":424},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":442},{"krate":0,"index":448},{"krate":0,"index":454},{"krate":0,"index":460},{"krate":0,"index":466},{"krate":0,"index":472},{"krate":0,"index":478},{"krate":0,"index":484},{"krate":0,"index":490},{"krate":0,"index":496},{"krate":0,"index":502},{"krate":0,"index":508},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":538},{"krate":0,"index":544},{"krate":0,"index":550},{"krate":0,"index":720},{"krate":0,"index":736},{"krate":0,"index":732},{"krate":0,"index":726},{"krate":0,"index":722},{"krate":0,"index":576},{"krate":0,"index":678},{"krate":0,"index":684},{"krate":0,"index":690},{"krate":0,"index":696},{"krate":0,"index":702},{"krate":0,"index":708},{"krate":0,"index":714},{"krate":0,"index":878},{"krate":0,"index":884},{"krate":0,"index":880},{"krate":0,"index":740},{"krate":0,"index":842},{"krate":0,"index":848},{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":872},{"krate":0,"index":888},{"krate":0,"index":894},{"krate":0,"index":900},{"krate":0,"index":14},{"krate":0,"index":1086},{"krate":0,"index":1098},{"krate":0,"index":1092},{"krate":0,"index":1088},{"krate":0,"index":958},{"krate":0,"index":1062},{"krate":0,"index":1068},{"krate":0,"index":1074},{"krate":0,"index":1080},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":1408},{"krate":0,"index":1424},{"krate":0,"index":1420},{"krate":0,"index":1414},{"krate":0,"index":1410},{"krate":0,"index":1102},{"krate":0,"index":1204},{"krate":0,"index":1210},{"krate":0,"index":1216},{"krate":0,"index":1222},{"krate":0,"index":1228},{"krate":0,"index":1234},{"krate":0,"index":1240},{"krate":0,"index":1246},{"krate":0,"index":1252},{"krate":0,"index":1258},{"krate":0,"index":1264},{"krate":0,"index":1270},{"krate":0,"index":1276},{"krate":0,"index":1282},{"krate":0,"index":1288},{"krate":0,"index":1294},{"krate":0,"index":1300},{"krate":0,"index":1306},{"krate":0,"index":1312},{"krate":0,"index":1318},{"krate":0,"index":1324},{"krate":0,"index":1330},{"krate":0,"index":1336},{"krate":0,"index":1342},{"krate":0,"index":1348},{"krate":0,"index":1354},{"krate":0,"index":1360},{"krate":0,"index":1366},{"krate":0,"index":1372},{"krate":0,"index":1378},{"krate":0,"index":1384},{"krate":0,"index":1390},{"krate":0,"index":1396},{"krate":0,"index":1402},{"krate":0,"index":1578},{"krate":0,"index":1594},{"krate":0,"index":1590},{"krate":0,"index":1584},{"krate":0,"index":1580},{"krate":0,"index":1428},{"krate":0,"index":1530},{"krate":0,"index":1536},{"krate":0,"index":1542},{"krate":0,"index":1548},{"krate":0,"index":1554},{"krate":0,"index":1560},{"krate":0,"index":1566},{"krate":0,"index":1572},{"krate":0,"index":1730},{"krate":0,"index":1746},{"krate":0,"index":1742},{"krate":0,"index":1736},{"krate":0,"index":1732},{"krate":0,"index":1598},{"krate":0,"index":1700},{"krate":0,"index":1706},{"krate":0,"index":1712},{"krate":0,"index":1718},{"krate":0,"index":1724},{"krate":0,"index":1932},{"krate":0,"index":1948},{"krate":0,"index":1944},{"krate":0,"index":1938},{"krate":0,"index":1934},{"krate":0,"index":1750},{"krate":0,"index":1854},{"krate":0,"index":1860},{"krate":0,"index":1866},{"krate":0,"index":1872},{"krate":0,"index":1878},{"krate":0,"index":1884},{"krate":0,"index":1890},{"krate":0,"index":1896},{"krate":0,"index":1902},{"krate":0,"index":1908},{"krate":0,"index":1914},{"krate":0,"index":1920},{"krate":0,"index":1926},{"krate":0,"index":34},{"krate":0,"index":2084},{"krate":0,"index":2100},{"krate":0,"index":2096},{"krate":0,"index":2090},{"krate":0,"index":2086},{"krate":0,"index":1952},{"krate":0,"index":2054},{"krate":0,"index":2060},{"krate":0,"index":2066},{"krate":0,"index":2072},{"krate":0,"index":2078},{"krate":0,"index":2266},{"krate":0,"index":2282},{"krate":0,"index":2278},{"krate":0,"index":2272},{"krate":0,"index":2268},{"krate":0,"index":2104},{"krate":0,"index":2206},{"krate":0,"index":2212},{"krate":0,"index":2218},{"krate":0,"index":2224},{"krate":0,"index":2230},{"krate":0,"index":2236},{"krate":0,"index":2242},{"krate":0,"index":2248},{"krate":0,"index":2254},{"krate":0,"index":2260},{"krate":0,"index":2286},{"krate":0,"index":2292},{"krate":0,"index":2298},{"krate":0,"index":2414},{"krate":0,"index":2420},{"krate":0,"index":2416},{"krate":0,"index":2304},{"krate":0,"index":2408},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":56},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":2660},{"krate":0,"index":2676},{"krate":0,"index":2672},{"krate":0,"index":2666},{"krate":0,"index":2662},{"krate":0,"index":2534},{"krate":0,"index":2636},{"krate":0,"index":2642},{"krate":0,"index":2648},{"krate":0,"index":2654},{"krate":0,"index":84},{"krate":0,"index":3014},{"krate":0,"index":3016},{"krate":0,"index":2820},{"krate":0,"index":2924},{"krate":0,"index":2930},{"krate":0,"index":2936},{"krate":0,"index":2942},{"krate":0,"index":2948},{"krate":0,"index":2954},{"krate":0,"index":2960},{"krate":0,"index":2966},{"krate":0,"index":2972},{"krate":0,"index":2978},{"krate":0,"index":2984},{"krate":0,"index":2990},{"krate":0,"index":2996},{"krate":0,"index":3002},{"krate":0,"index":3008},{"krate":0,"index":88},{"krate":0,"index":3020},{"krate":0,"index":3024},{"krate":0,"index":3028},{"krate":0,"index":3032},{"krate":0,"index":3036},{"krate":0,"index":3040},{"krate":0,"index":3044},{"krate":0,"index":3048},{"krate":0,"index":3052},{"krate":0,"index":3056},{"krate":0,"index":3060},{"krate":0,"index":3064},{"krate":0,"index":3068},{"krate":0,"index":3072},{"krate":0,"index":3076},{"krate":0,"index":3080},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":3486},{"krate":0,"index":3502},{"krate":0,"index":3498},{"krate":0,"index":3492},{"krate":0,"index":3488},{"krate":0,"index":3084},{"krate":0,"index":3186},{"krate":0,"index":3192},{"krate":0,"index":3198},{"krate":0,"index":3204},{"krate":0,"index":3210},{"krate":0,"index":3216},{"krate":0,"index":3222},{"krate":0,"index":3228},{"krate":0,"index":3234},{"krate":0,"index":3240},{"krate":0,"index":3246},{"krate":0,"index":3252},{"krate":0,"index":3258},{"krate":0,"index":3264},{"krate":0,"index":3270},{"krate":0,"index":3276},{"krate":0,"index":3282},{"krate":0,"index":3288},{"krate":0,"index":3294},{"krate":0,"index":3300},{"krate":0,"index":3306},{"krate":0,"index":3312},{"krate":0,"index":3318},{"krate":0,"index":3324},{"krate":0,"index":3330},{"krate":0,"index":3336},{"krate":0,"index":3342},{"krate":0,"index":3348},{"krate":0,"index":3354},{"krate":0,"index":3360},{"krate":0,"index":3366},{"krate":0,"index":3372},{"krate":0,"index":3378},{"krate":0,"index":3384},{"krate":0,"index":3390},{"krate":0,"index":3396},{"krate":0,"index":3402},{"krate":0,"index":3408},{"krate":0,"index":3414},{"krate":0,"index":3420},{"krate":0,"index":3426},{"krate":0,"index":3432},{"krate":0,"index":3438},{"krate":0,"index":3444},{"krate":0,"index":3450},{"krate":0,"index":3456},{"krate":0,"index":3462},{"krate":0,"index":3468},{"krate":0,"index":3474},{"krate":0,"index":3480},{"krate":0,"index":3794},{"krate":0,"index":3800},{"krate":0,"index":3796},{"krate":0,"index":3506},{"krate":0,"index":3608},{"krate":0,"index":3614},{"krate":0,"index":3620},{"krate":0,"index":3626},{"krate":0,"index":3632},{"krate":0,"index":3638},{"krate":0,"index":3644},{"krate":0,"index":3650},{"krate":0,"index":3656},{"krate":0,"index":3662},{"krate":0,"index":3668},{"krate":0,"index":3674},{"krate":0,"index":3680},{"krate":0,"index":3686},{"krate":0,"index":3692},{"krate":0,"index":3698},{"krate":0,"index":3704},{"krate":0,"index":3710},{"krate":0,"index":3716},{"krate":0,"index":3722},{"krate":0,"index":3728},{"krate":0,"index":3734},{"krate":0,"index":3740},{"krate":0,"index":3746},{"krate":0,"index":3752},{"krate":0,"index":3758},{"krate":0,"index":3764},{"krate":0,"index":3770},{"krate":0,"index":3776},{"krate":0,"index":3782},{"krate":0,"index":3788},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":3918},{"krate":0,"index":3924},{"krate":0,"index":3920},{"krate":0,"index":3804},{"krate":0,"index":3906},{"krate":0,"index":3912},{"krate":0,"index":4060},{"krate":0,"index":4076},{"krate":0,"index":4072},{"krate":0,"index":4066},{"krate":0,"index":4062},{"krate":0,"index":3928},{"krate":0,"index":4030},{"krate":0,"index":4036},{"krate":0,"index":4042},{"krate":0,"index":4048},{"krate":0,"index":4054},{"krate":0,"index":4212},{"krate":0,"index":4228},{"krate":0,"index":4224},{"krate":0,"index":4218},{"krate":0,"index":4214},{"krate":0,"index":4080},{"krate":0,"index":4182},{"krate":0,"index":4188},{"krate":0,"index":4194},{"krate":0,"index":4200},{"krate":0,"index":4206},{"krate":0,"index":108},{"krate":0,"index":4590},{"krate":0,"index":4606},{"krate":0,"index":4602},{"krate":0,"index":4596},{"krate":0,"index":4592},{"krate":0,"index":4308},{"krate":0,"index":4410},{"krate":0,"index":4416},{"krate":0,"index":4422},{"krate":0,"index":4428},{"krate":0,"index":4434},{"krate":0,"index":4440},{"krate":0,"index":4446},{"krate":0,"index":4452},{"krate":0,"index":4458},{"krate":0,"index":4464},{"krate":0,"index":4470},{"krate":0,"index":4476},{"krate":0,"index":4482},{"krate":0,"index":4488},{"krate":0,"index":4494},{"krate":0,"index":4500},{"krate":0,"index":4506},{"krate":0,"index":4512},{"krate":0,"index":4518},{"krate":0,"index":4524},{"krate":0,"index":4530},{"krate":0,"index":4536},{"krate":0,"index":4542},{"krate":0,"index":4548},{"krate":0,"index":4554},{"krate":0,"index":4560},{"krate":0,"index":4566},{"krate":0,"index":4572},{"krate":0,"index":4578},{"krate":0,"index":4584},{"krate":0,"index":4766},{"krate":0,"index":4782},{"krate":0,"index":4778},{"krate":0,"index":4772},{"krate":0,"index":4768},{"krate":0,"index":4610},{"krate":0,"index":4712},{"krate":0,"index":4718},{"krate":0,"index":4724},{"krate":0,"index":4730},{"krate":0,"index":4736},{"krate":0,"index":4742},{"krate":0,"index":4748},{"krate":0,"index":4754},{"krate":0,"index":4760},{"krate":0,"index":4786},{"krate":0,"index":4792},{"krate":0,"index":4798},{"krate":0,"index":4936},{"krate":0,"index":4952},{"krate":0,"index":4948},{"krate":0,"index":4942},{"krate":0,"index":4938},{"krate":0,"index":4804},{"krate":0,"index":4906},{"krate":0,"index":4912},{"krate":0,"index":4918},{"krate":0,"index":4924},{"krate":0,"index":4930},{"krate":0,"index":5088},{"krate":0,"index":5104},{"krate":0,"index":5100},{"krate":0,"index":5094},{"krate":0,"index":5090},{"krate":0,"index":4956},{"krate":0,"index":5058},{"krate":0,"index":5064},{"krate":0,"index":5070},{"krate":0,"index":5076},{"krate":0,"index":5082},{"krate":0,"index":5240},{"krate":0,"index":5256},{"krate":0,"index":5252},{"krate":0,"index":5246},{"krate":0,"index":5242},{"krate":0,"index":5108},{"krate":0,"index":5210},{"krate":0,"index":5216},{"krate":0,"index":5222},{"krate":0,"index":5228},{"krate":0,"index":5234},{"krate":0,"index":5404},{"krate":0,"index":5420},{"krate":0,"index":5416},{"krate":0,"index":5410},{"krate":0,"index":5406},{"krate":0,"index":5260},{"krate":0,"index":5362},{"krate":0,"index":5368},{"krate":0,"index":5374},{"krate":0,"index":5380},{"krate":0,"index":5386},{"krate":0,"index":5392},{"krate":0,"index":5398},{"krate":0,"index":5562},{"krate":0,"index":5578},{"krate":0,"index":5574},{"krate":0,"index":5568},{"krate":0,"index":5564},{"krate":0,"index":5424},{"krate":0,"index":5526},{"krate":0,"index":5532},{"krate":0,"index":5538},{"krate":0,"index":5544},{"krate":0,"index":5550},{"krate":0,"index":5556},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":7134},{"krate":0,"index":7146},{"krate":0,"index":7140},{"krate":0,"index":7136},{"krate":0,"index":6658},{"krate":0,"index":6762},{"krate":0,"index":6768},{"krate":0,"index":6774},{"krate":0,"index":6780},{"krate":0,"index":6786},{"krate":0,"index":6792},{"krate":0,"index":6798},{"krate":0,"index":6804},{"krate":0,"index":6810},{"krate":0,"index":6816},{"krate":0,"index":6822},{"krate":0,"index":6828},{"krate":0,"index":6834},{"krate":0,"index":6840},{"krate":0,"index":6846},{"krate":0,"index":6852},{"krate":0,"index":6858},{"krate":0,"index":6864},{"krate":0,"index":6870},{"krate":0,"index":6876},{"krate":0,"index":6882},{"krate":0,"index":6888},{"krate":0,"index":6894},{"krate":0,"index":6900},{"krate":0,"index":6906},{"krate":0,"index":6912},{"krate":0,"index":6918},{"krate":0,"index":6924},{"krate":0,"index":6930},{"krate":0,"index":6936},{"krate":0,"index":6942},{"krate":0,"index":6948},{"krate":0,"index":6954},{"krate":0,"index":6960},{"krate":0,"index":6966},{"krate":0,"index":6972},{"krate":0,"index":6978},{"krate":0,"index":6984},{"krate":0,"index":6990},{"krate":0,"index":6996},{"krate":0,"index":7002},{"krate":0,"index":7008},{"krate":0,"index":7014},{"krate":0,"index":7020},{"krate":0,"index":7026},{"krate":0,"index":7032},{"krate":0,"index":7038},{"krate":0,"index":7044},{"krate":0,"index":7050},{"krate":0,"index":7056},{"krate":0,"index":7062},{"krate":0,"index":7068},{"krate":0,"index":7074},{"krate":0,"index":7080},{"krate":0,"index":7086},{"krate":0,"index":7092},{"krate":0,"index":7098},{"krate":0,"index":7104},{"krate":0,"index":7110},{"krate":0,"index":7116},{"krate":0,"index":7122},{"krate":0,"index":7128},{"krate":0,"index":120},{"krate":0,"index":130},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":146},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":7344},{"krate":0,"index":7350},{"krate":0,"index":7346},{"krate":0,"index":7150},{"krate":0,"index":7254},{"krate":0,"index":7260},{"krate":0,"index":7266},{"krate":0,"index":7272},{"krate":0,"index":7278},{"krate":0,"index":7284},{"krate":0,"index":7290},{"krate":0,"index":7296},{"krate":0,"index":7302},{"krate":0,"index":7308},{"krate":0,"index":7314},{"krate":0,"index":7320},{"krate":0,"index":7326},{"krate":0,"index":7332},{"krate":0,"index":7338},{"krate":0,"index":170},{"krate":0,"index":8130},{"krate":0,"index":8136},{"krate":0,"index":8132},{"krate":0,"index":7962},{"krate":0,"index":8064},{"krate":0,"index":8070},{"krate":0,"index":8076},{"krate":0,"index":8082},{"krate":0,"index":8088},{"krate":0,"index":8094},{"krate":0,"index":8100},{"krate":0,"index":8106},{"krate":0,"index":8112},{"krate":0,"index":8118},{"krate":0,"index":8124},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":8394},{"krate":0,"index":8400},{"krate":0,"index":8396},{"krate":0,"index":8202},{"krate":0,"index":8304},{"krate":0,"index":8310},{"krate":0,"index":8316},{"krate":0,"index":8322},{"krate":0,"index":8328},{"krate":0,"index":8334},{"krate":0,"index":8340},{"krate":0,"index":8346},{"krate":0,"index":8352},{"krate":0,"index":8358},{"krate":0,"index":8364},{"krate":0,"index":8370},{"krate":0,"index":8376},{"krate":0,"index":8382},{"krate":0,"index":8388},{"krate":0,"index":8148},{"krate":0,"index":8596},{"krate":0,"index":8602},{"krate":0,"index":8598},{"krate":0,"index":8404},{"krate":0,"index":8506},{"krate":0,"index":8512},{"krate":0,"index":8518},{"krate":0,"index":8524},{"krate":0,"index":8530},{"krate":0,"index":8536},{"krate":0,"index":8542},{"krate":0,"index":8548},{"krate":0,"index":8554},{"krate":0,"index":8560},{"krate":0,"index":8566},{"krate":0,"index":8572},{"krate":0,"index":8578},{"krate":0,"index":8584},{"krate":0,"index":8590},{"krate":0,"index":8154},{"krate":0,"index":8798},{"krate":0,"index":8804},{"krate":0,"index":8800},{"krate":0,"index":8606},{"krate":0,"index":8708},{"krate":0,"index":8714},{"krate":0,"index":8720},{"krate":0,"index":8726},{"krate":0,"index":8732},{"krate":0,"index":8738},{"krate":0,"index":8744},{"krate":0,"index":8750},{"krate":0,"index":8756},{"krate":0,"index":8762},{"krate":0,"index":8768},{"krate":0,"index":8774},{"krate":0,"index":8780},{"krate":0,"index":8786},{"krate":0,"index":8792},{"krate":0,"index":8160},{"krate":0,"index":9000},{"krate":0,"index":9006},{"krate":0,"index":9002},{"krate":0,"index":8808},{"krate":0,"index":8910},{"krate":0,"index":8916},{"krate":0,"index":8922},{"krate":0,"index":8928},{"krate":0,"index":8934},{"krate":0,"index":8940},{"krate":0,"index":8946},{"krate":0,"index":8952},{"krate":0,"index":8958},{"krate":0,"index":8964},{"krate":0,"index":8970},{"krate":0,"index":8976},{"krate":0,"index":8982},{"krate":0,"index":8988},{"krate":0,"index":8994},{"krate":0,"index":8166},{"krate":0,"index":9202},{"krate":0,"index":9208},{"krate":0,"index":9204},{"krate":0,"index":9010},{"krate":0,"index":9112},{"krate":0,"index":9118},{"krate":0,"index":9124},{"krate":0,"index":9130},{"krate":0,"index":9136},{"krate":0,"index":9142},{"krate":0,"index":9148},{"krate":0,"index":9154},{"krate":0,"index":9160},{"krate":0,"index":9166},{"krate":0,"index":9172},{"krate":0,"index":9178},{"krate":0,"index":9184},{"krate":0,"index":9190},{"krate":0,"index":9196},{"krate":0,"index":8172},{"krate":0,"index":9404},{"krate":0,"index":9410},{"krate":0,"index":9406},{"krate":0,"index":9212},{"krate":0,"index":9314},{"krate":0,"index":9320},{"krate":0,"index":9326},{"krate":0,"index":9332},{"krate":0,"index":9338},{"krate":0,"index":9344},{"krate":0,"index":9350},{"krate":0,"index":9356},{"krate":0,"index":9362},{"krate":0,"index":9368},{"krate":0,"index":9374},{"krate":0,"index":9380},{"krate":0,"index":9386},{"krate":0,"index":9392},{"krate":0,"index":9398},{"krate":0,"index":8178},{"krate":0,"index":9606},{"krate":0,"index":9612},{"krate":0,"index":9608},{"krate":0,"index":9414},{"krate":0,"index":9516},{"krate":0,"index":9522},{"krate":0,"index":9528},{"krate":0,"index":9534},{"krate":0,"index":9540},{"krate":0,"index":9546},{"krate":0,"index":9552},{"krate":0,"index":9558},{"krate":0,"index":9564},{"krate":0,"index":9570},{"krate":0,"index":9576},{"krate":0,"index":9582},{"krate":0,"index":9588},{"krate":0,"index":9594},{"krate":0,"index":9600},{"krate":0,"index":8184},{"krate":0,"index":9808},{"krate":0,"index":9814},{"krate":0,"index":9810},{"krate":0,"index":9616},{"krate":0,"index":9718},{"krate":0,"index":9724},{"krate":0,"index":9730},{"krate":0,"index":9736},{"krate":0,"index":9742},{"krate":0,"index":9748},{"krate":0,"index":9754},{"krate":0,"index":9760},{"krate":0,"index":9766},{"krate":0,"index":9772},{"krate":0,"index":9778},{"krate":0,"index":9784},{"krate":0,"index":9790},{"krate":0,"index":9796},{"krate":0,"index":9802},{"krate":0,"index":8190},{"krate":0,"index":10010},{"krate":0,"index":10016},{"krate":0,"index":10012},{"krate":0,"index":9818},{"krate":0,"index":9920},{"krate":0,"index":9926},{"krate":0,"index":9932},{"krate":0,"index":9938},{"krate":0,"index":9944},{"krate":0,"index":9950},{"krate":0,"index":9956},{"krate":0,"index":9962},{"krate":0,"index":9968},{"krate":0,"index":9974},{"krate":0,"index":9980},{"krate":0,"index":9986},{"krate":0,"index":9992},{"krate":0,"index":9998},{"krate":0,"index":10004},{"krate":0,"index":8196}],"decl_id":null,"docs":" Bindings to JavaScript's standard, built-in objects, including their methods\n and properties.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2153,"byte_end":2163,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"decode_uri","qualname":"::decode_uri","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURI()` function decodes a Uniform Resource Identifier (URI)\n previously created by `encodeURI` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2585,"byte_end":2605,"line_start":61,"line_end":61,"column_start":12,"column_end":32},"name":"decode_uri_component","qualname":"::decode_uri_component","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component\n previously created by encodeURIComponent or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3178,"byte_end":3188,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"encode_uri","qualname":"::encode_uri","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURI()` function encodes a Uniform Resource Identifier (URI)\n by replacing each instance of certain characters by one, two, three, or\n four escape sequences representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two\n \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3771,"byte_end":3791,"line_start":80,"line_end":80,"column_start":12,"column_end":32},"name":"encode_uri_component","qualname":"::encode_uri_component","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component\n by replacing each instance of certain characters by one, two, three, or four escape sequences\n representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4063,"byte_end":4067,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"eval","qualname":"::eval","value":"fn (js_source_text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `eval()` function evaluates JavaScript code represented as a string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4459,"byte_end":4468,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"is_finite","qualname":"::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global isFinite() function determines whether the passed value is a finite number.\n If  needed, the parameter is first converted to a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4848,"byte_end":4857,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"parse_int","qualname":"::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseInt()` function parses a string argument and returns an integer\n of the specified radix (the base in mathematical numeral systems), or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5187,"byte_end":5198,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"parse_float","qualname":"::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The parseFloat() function parses an argument and returns a floating point number,\n or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5517,"byte_end":5523,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"escape","qualname":"::escape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The escape() function computes a new string in which certain characters have been\n replaced by a hexadecimal escape sequence.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6016,"byte_end":6024,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"unescape","qualname":"::unescape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The unescape() function computes a new string in which hexadecimal escape\n sequences are replaced with the character that it represents. The escape sequences might\n be introduced by a function like escape. Usually, decodeURI or decodeURIComponent\n are preferred over unescape.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6217,"byte_end":6222,"line_start":131,"line_end":131,"column_start":14,"column_end":19},"name":"Array","qualname":"::Array","value":"Array {  }","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6078,"byte_end":6079,"line_start":127,"line_end":127,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6303,"byte_end":6306,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"fn () -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty array","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6505,"byte_end":6509,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"from","qualname":"<Array>::from","value":"fn (val: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.from()` method creates a new, shallow-copied `Array` instance\n from an array-like or iterable object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6886,"byte_end":6897,"line_start":147,"line_end":147,"column_start":12,"column_end":23},"name":"copy_within","qualname":"<Array>::copy_within","value":"fn (&self, target: i32, start: i32, end: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The copyWithin() method shallow copies part of an array to another\n location in the same array and returns it, without modifying its size.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7283,"byte_end":7289,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"concat","qualname":"<Array>::concat","value":"fn (&self, array: &Array) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The concat() method is used to merge two or more arrays. This method\n does not change the existing arrays, but instead returns a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7626,"byte_end":7631,"line_start":161,"line_end":161,"column_start":12,"column_end":17},"name":"every","qualname":"<Array>::every","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The every() method tests whether all elements in the array pass the test\n implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8036,"byte_end":8040,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"fill","qualname":"<Array>::fill","value":"fn (&self, value: &JsValue, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8408,"byte_end":8414,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"filter","qualname":"<Array>::filter","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `filter()` method creates a new array with all elements that pass the\n test implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8834,"byte_end":8838,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"find","qualname":"<Array>::find","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `find()` method returns the value of the first element in the array that satisfies\n  the provided testing function. Otherwise `undefined` is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9279,"byte_end":9289,"line_start":189,"line_end":189,"column_start":12,"column_end":22},"name":"find_index","qualname":"<Array>::find_index","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The findIndex() method returns the index of the first element in the array that\n satisfies the provided testing function. Otherwise -1 is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9679,"byte_end":9683,"line_start":196,"line_end":196,"column_start":12,"column_end":16},"name":"flat","qualname":"<Array>::flat","value":"fn (&self, depth: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The flat() method creates a new array with all sub-array elements concatenated into it\n recursively up to the specified depth.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10041,"byte_end":10049,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Array>::flat_map","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array) -> Vec<JsValue>) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The flatMap() method first maps each element using a mapping function, then flattens\n the result into a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10440,"byte_end":10448,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each array element.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10818,"byte_end":10826,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"includes","qualname":"<Array>::includes","value":"fn (&self, value: &JsValue, from_index: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The includes() method determines whether an array includes a certain\n element, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11216,"byte_end":11224,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Array>::index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The indexOf() method returns the first index at which a given element\n can be found in the array, or -1 if it is not present.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11574,"byte_end":11582,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Array>::is_array","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Array.isArray() method determines whether the passed value is an Array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11908,"byte_end":11912,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"join","qualname":"<Array>::join","value":"fn (&self, delimiter: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The join() method joins all elements of an array (or an array-like object)\n into a string and returns this string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12364,"byte_end":12377,"line_start":247,"line_end":247,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<Array>::last_index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndexOf() method returns the last index at which a given element\n can be found in the array, or -1 if it is not present. The array is\n searched backwards, starting at fromIndex.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12892,"byte_end":12898,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"length","qualname":"<Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of an object which is an instance of type Array\n sets or returns the number of elements in that array. The value is an\n unsigned, 32-bit integer that is always numerically greater than the\n highest index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13520,"byte_end":13523,"line_start":266,"line_end":266,"column_start":12,"column_end":15},"name":"map","qualname":"<Array>::map","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" map calls a provided callback function once for each element in an array,\n in order, and constructs a new array from the results. callback is invoked\n only for indexes of the array which have assigned values, including undefined.\n It is not called for missing elements of the array (that is, indexes that have\n never been set, which have been deleted or which have never been assigned a value).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14472,"byte_end":14475,"line_start":284,"line_end":284,"column_start":12,"column_end":15},"name":"of1","qualname":"<Array>::of1","value":"fn (a: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.of()` method creates a new Array instance with a variable\n number of arguments, regardless of number or type of the arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14690,"byte_end":14693,"line_start":288,"line_end":288,"column_start":12,"column_end":15},"name":"of2","qualname":"<Array>::of2","value":"fn (a: &JsValue, b: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14921,"byte_end":14924,"line_start":292,"line_end":292,"column_start":12,"column_end":15},"name":"of3","qualname":"<Array>::of3","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15165,"byte_end":15168,"line_start":296,"line_end":296,"column_start":12,"column_end":15},"name":"of4","qualname":"<Array>::of4","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15422,"byte_end":15425,"line_start":300,"line_end":300,"column_start":12,"column_end":15},"name":"of5","qualname":"<Array>::of5","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue, e: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15812,"byte_end":15815,"line_start":307,"line_end":307,"column_start":12,"column_end":15},"name":"pop","qualname":"<Array>::pop","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The pop() method removes the last element from an array and returns that\n element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16135,"byte_end":16139,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"push","qualname":"<Array>::push","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The push() method adds one or more elements to the end of an array and\n returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16511,"byte_end":16517,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Array>::reduce","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The reduce() method applies a function against an accumulator and each element in\n the array (from left to right) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17031,"byte_end":17043,"line_start":332,"line_end":332,"column_start":12,"column_end":24},"name":"reduce_right","qualname":"<Array>::reduce_right","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The reduceRight() method applies a function against an accumulator and each value\n of the array (from right-to-left) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17519,"byte_end":17526,"line_start":343,"line_end":343,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Array>::reverse","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The reverse() method reverses an array in place. The first array\n element becomes the last, and the last array element becomes the first.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17875,"byte_end":17880,"line_start":350,"line_end":350,"column_start":12,"column_end":17},"name":"shift","qualname":"<Array>::shift","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The shift() method removes the first element from an array and returns\n that removed element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18280,"byte_end":18285,"line_start":358,"line_end":358,"column_start":12,"column_end":17},"name":"slice","qualname":"<Array>::slice","value":"fn (&self, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The slice() method returns a shallow copy of a portion of an array into\n a new array object selected from begin to end (end not included).\n The original array will not be modified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18710,"byte_end":18714,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"name":"some","qualname":"<Array>::some","value":"fn (&self, predicate: &mut dyn FnMut(JsValue) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The some() method tests whether at least one element in the array passes the test implemented\n by the provided function.\n Note: This method returns false for any condition put on an empty array.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19281,"byte_end":19285,"line_start":376,"line_end":376,"column_start":12,"column_end":16},"name":"sort","qualname":"<Array>::sort","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The sort() method sorts the elements of an array in place and returns\n the array. The sort is not necessarily stable. The default sort\n order is according to string Unicode code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19608,"byte_end":19614,"line_start":383,"line_end":383,"column_start":12,"column_end":18},"name":"splice","qualname":"<Array>::splice","value":"fn (&self, start: u32, delete_count: u32, item: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The splice() method changes the contents of an array by removing existing elements and/or\n adding new elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20160,"byte_end":20176,"line_start":391,"line_end":391,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Array>::to_locale_string","value":"fn (&self, locales: &JsValue, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string representing the elements of the array.\n The elements are converted to Strings using their toLocaleString methods and these\n Strings are separated by a locale-specific String (such as a comma “,”).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20541,"byte_end":20550,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Array>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified array\n and its elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20883,"byte_end":20890,"line_start":405,"line_end":405,"column_start":12,"column_end":19},"name":"unshift","qualname":"<Array>::unshift","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The unshift() method adds one or more elements to the beginning of an\n array and returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":720},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21071,"byte_end":21082,"line_start":413,"line_end":413,"column_start":14,"column_end":25},"name":"ArrayBuffer","qualname":"::ArrayBuffer","value":"ArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":63}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20962,"byte_end":20963,"line_start":409,"line_end":409,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21649,"byte_end":21652,"line_start":424,"line_end":424,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuffer>::new","value":"fn (length: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `ArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer. You cannot directly\n manipulate the contents of an `ArrayBuffer`; instead, you\n create one of the typed array objects or a `DataView` object\n which represents the buffer in a specific format, and use that\n to read and write the contents of the buffer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22266,"byte_end":22277,"line_start":434,"line_end":434,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<ArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength property of an object which is an instance of type ArrayBuffer\n it's an accessor property whose set accessor function is undefined,\n meaning that you can only read this property.\n The value is established when the array is constructed and cannot be changed.\n This property returns 0 if this ArrayBuffer has been detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22678,"byte_end":22685,"line_start":441,"line_end":441,"column_start":12,"column_end":19},"name":"is_view","qualname":"<ArrayBuffer>::is_view","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isView()` method returns true if arg is one of the `ArrayBuffer`\n views, such as typed array objects or a DataView; false otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23062,"byte_end":23067,"line_start":449,"line_end":449,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBuffer>::slice","value":"fn (&self, begin: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `ArrayBuffer` whose contents\n are a copy of this `ArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23361,"byte_end":23375,"line_start":455,"line_end":455,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<ArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20948,"byte_end":20963,"line_start":409,"line_end":409,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":878},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23566,"byte_end":23583,"line_start":463,"line_end":463,"column_start":14,"column_end":31},"name":"SharedArrayBuffer","qualname":"::SharedArrayBuffer","value":"SharedArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":69}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24083,"byte_end":24086,"line_start":473,"line_end":473,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedArrayBuffer>::new","value":"fn (length: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `SharedArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer, similar to the `ArrayBuffer`\n object, but in a way that they can be used to create views\n on shared memory. Unlike an `ArrayBuffer`, a `SharedArrayBuffer`\n cannot become detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24541,"byte_end":24552,"line_start":481,"line_end":481,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<SharedArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length of\n an `SharedArrayBuffer` in bytes. This is established when\n the `SharedArrayBuffer` is constructed and cannot be changed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24955,"byte_end":24960,"line_start":489,"line_end":489,"column_start":12,"column_end":17},"name":"slice","qualname":"<SharedArrayBuffer>::slice","value":"fn (&self, begin: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `SharedArrayBuffer` whose contents\n are a copy of this `SharedArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25272,"byte_end":25286,"line_start":495,"line_end":495,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<SharedArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23458,"byte_end":23473,"line_start":459,"line_end":459,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25697,"byte_end":25701,"line_start":506,"line_end":506,"column_start":12,"column_end":16},"name":"keys","qualname":"<Array>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The keys() method returns a new Array Iterator object that contains the\n keys for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26037,"byte_end":26044,"line_start":513,"line_end":513,"column_start":12,"column_end":19},"name":"entries","qualname":"<Array>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The entries() method returns a new Array Iterator object that contains\n the key/value pairs for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26369,"byte_end":26375,"line_start":520,"line_end":520,"column_start":12,"column_end":18},"name":"values","qualname":"<Array>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The values() method returns a new Array Iterator object that\n contains the values for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25378,"byte_end":25393,"line_start":499,"line_end":499,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27012,"byte_end":27019,"line_start":533,"line_end":533,"column_start":9,"column_end":16},"name":"Atomics","qualname":"::Atomics","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":914},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":930},{"krate":0,"index":934},{"krate":0,"index":938},{"krate":0,"index":942},{"krate":0,"index":946},{"krate":0,"index":950},{"krate":0,"index":954}],"decl_id":null,"docs":" The `Atomics` object provides atomic operations as static methods.\n They are used with `SharedArrayBuffer` objects.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26979,"byte_end":27003,"line_start":532,"line_end":532,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":906},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27567,"byte_end":27570,"line_start":545,"line_end":545,"column_start":16,"column_end":19},"name":"add","qualname":"::Atomics::add","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.add()` method adds a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":910},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28169,"byte_end":28172,"line_start":555,"line_end":555,"column_start":16,"column_end":19},"name":"and","qualname":"::Atomics::and","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.and()` method computes a bitwise AND with a given\n value at a given position in the array, and returns the old value\n at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":914},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28925,"byte_end":28941,"line_start":566,"line_end":566,"column_start":16,"column_end":32},"name":"compare_exchange","qualname":"::Atomics::compare_exchange","value":"fn (typed_array: &JsValue, index: u32, expected_value: i32, replacement_value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.compareExchange()` method exchanges a given\n replacement value at a given position in the array, if a given expected\n value equals the old value. It returns the old value at that position\n whether it was equal to the expected value or not.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":918},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29608,"byte_end":29616,"line_start":580,"line_end":580,"column_start":16,"column_end":24},"name":"exchange","qualname":"::Atomics::exchange","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.exchange()` method stores a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":922},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30182,"byte_end":30194,"line_start":589,"line_end":589,"column_start":16,"column_end":28},"name":"is_lock_free","qualname":"::Atomics::is_lock_free","value":"fn (size: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.isLockFree()` method is used to determine\n whether to use locks or atomic operations. It returns true,\n if the given size is one of the `BYTES_PER_ELEMENT` property\n of integer `TypedArray` types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":926},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30534,"byte_end":30538,"line_start":596,"line_end":596,"column_start":16,"column_end":20},"name":"load","qualname":"::Atomics::load","value":"fn (typed_array: &JsValue, index: u32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.load()` method returns a value at a given\n position in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":930},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31005,"byte_end":31011,"line_start":604,"line_end":604,"column_start":16,"column_end":22},"name":"notify","qualname":"::Atomics::notify","value":"fn (typed_array: &Int32Array, index: u32, count: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.notify()` method notifies up some agents that\n are sleeping in the wait queue.\n Note: This operation works with a shared `Int32Array` only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":934},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31598,"byte_end":31600,"line_start":613,"line_end":613,"column_start":16,"column_end":18},"name":"or","qualname":"::Atomics::or","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.or()` method computes a bitwise OR with a given value\n at a given position in the array, and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32024,"byte_end":32029,"line_start":620,"line_end":620,"column_start":16,"column_end":21},"name":"store","qualname":"::Atomics::store","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.store()` method stores a given value at the given\n position in the array and returns that value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":942},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32598,"byte_end":32601,"line_start":629,"line_end":629,"column_start":16,"column_end":19},"name":"sub","qualname":"::Atomics::sub","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.sub()` method substracts a given value at a\n given position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":946},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33293,"byte_end":33297,"line_start":640,"line_end":640,"column_start":16,"column_end":20},"name":"wait","qualname":"::Atomics::wait","value":"fn (typed_array: &Int32Array, index: u32, value: i32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.wait()` method verifies that a given\n position in an `Int32Array` still contains a given value\n and if so sleeps, awaiting a wakeup or a timeout.\n It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".\n Note: This operation only works with a shared `Int32Array`\n and may not be allowed on the main thread.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":950},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33648,"byte_end":33665,"line_start":646,"line_end":646,"column_start":16,"column_end":33},"name":"wait_with_timeout","qualname":"::Atomics::wait_with_timeout","value":"fn (typed_array: &Int32Array, index: u32, value: i32, timeout: f64) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait()`, but with timeout","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":954},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34345,"byte_end":34348,"line_start":661,"line_end":661,"column_start":16,"column_end":19},"name":"xor","qualname":"::Atomics::xor","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.xor()` method computes a bitwise XOR\n with a given value at a given position in the array,\n and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27045,"byte_end":27060,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34597,"byte_end":34604,"line_start":670,"line_end":670,"column_start":14,"column_end":21},"name":"Boolean","qualname":"::Boolean","value":"Boolean {  }","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34455,"byte_end":34456,"line_start":666,"line_end":666,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34931,"byte_end":34934,"line_start":677,"line_end":677,"column_start":12,"column_end":15},"name":"new","qualname":"<Boolean>::new","value":"fn (value: &JsValue) -> Boolean","parent":null,"children":[],"decl_id":null,"docs":" The `Boolean()` constructor creates an object wrapper for a boolean value.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Boolean::from` instead\")","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34853,"byte_end":34919,"line_start":676,"line_end":676,"column_start":5,"column_end":71}},{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35239,"byte_end":35247,"line_start":683,"line_end":683,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Boolean>::value_of","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `Boolean` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34441,"byte_end":34456,"line_start":666,"line_end":666,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1408},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35921,"byte_end":35929,"line_start":718,"line_end":718,"column_start":14,"column_end":22},"name":"DataView","qualname":"::DataView","value":"DataView {  }","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35812,"byte_end":35813,"line_start":714,"line_end":714,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36287,"byte_end":36290,"line_start":726,"line_end":726,"column_start":12,"column_end":15},"name":"new","qualname":"<DataView>::new","value":"fn (buffer: &ArrayBuffer, byteOffset: usize, byteLength: usize) -> DataView","parent":null,"children":[],"decl_id":null,"docs":" The `DataView` view provides a low-level interface for reading and\n writing multiple number types in an `ArrayBuffer` irrespective of the\n platform's endianness.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36654,"byte_end":36660,"line_start":732,"line_end":732,"column_start":12,"column_end":18},"name":"buffer","qualname":"<DataView>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37047,"byte_end":37058,"line_start":739,"line_end":739,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<DataView>::byte_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37439,"byte_end":37450,"line_start":746,"line_end":746,"column_start":12,"column_end":23},"name":"byte_offset","qualname":"<DataView>::byte_offset","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The offset (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37805,"byte_end":37813,"line_start":753,"line_end":753,"column_start":12,"column_end":20},"name":"get_int8","qualname":"<DataView>::get_int8","value":"fn (&self, byte_offset: usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" The getInt8() method gets a signed 8-bit integer (byte) at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38190,"byte_end":38199,"line_start":760,"line_end":760,"column_start":12,"column_end":21},"name":"get_uint8","qualname":"<DataView>::get_uint8","value":"fn (&self, byte_offset: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The getUint8() method gets a unsigned 8-bit integer (byte) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38576,"byte_end":38585,"line_start":767,"line_end":767,"column_start":12,"column_end":21},"name":"get_int16","qualname":"<DataView>::get_int16","value":"fn (&self, byte_offset: usize) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The getInt16() method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38963,"byte_end":38979,"line_start":774,"line_end":774,"column_start":12,"column_end":28},"name":"get_int16_endian","qualname":"<DataView>::get_int16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The getInt16() method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39389,"byte_end":39399,"line_start":781,"line_end":781,"column_start":12,"column_end":22},"name":"get_uint16","qualname":"<DataView>::get_uint16","value":"fn (&self, byte_offset: usize) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39788,"byte_end":39805,"line_start":788,"line_end":788,"column_start":12,"column_end":29},"name":"get_uint16_endian","qualname":"<DataView>::get_uint16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40203,"byte_end":40212,"line_start":795,"line_end":795,"column_start":12,"column_end":21},"name":"get_int32","qualname":"<DataView>::get_int32","value":"fn (&self, byte_offset: usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The getInt32() method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40589,"byte_end":40605,"line_start":802,"line_end":802,"column_start":12,"column_end":28},"name":"get_int32_endian","qualname":"<DataView>::get_int32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The getInt32() method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41014,"byte_end":41024,"line_start":809,"line_end":809,"column_start":12,"column_end":22},"name":"get_uint32","qualname":"<DataView>::get_uint32","value":"fn (&self, byte_offset: usize) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41412,"byte_end":41429,"line_start":816,"line_end":816,"column_start":12,"column_end":29},"name":"get_uint32_endian","qualname":"<DataView>::get_uint32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41832,"byte_end":41843,"line_start":823,"line_end":823,"column_start":12,"column_end":23},"name":"get_float32","qualname":"<DataView>::get_float32","value":"fn (&self, byte_offset: usize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The getFloat32() method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42225,"byte_end":42243,"line_start":830,"line_end":830,"column_start":12,"column_end":30},"name":"get_float32_endian","qualname":"<DataView>::get_float32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The getFloat32() method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42647,"byte_end":42658,"line_start":837,"line_end":837,"column_start":12,"column_end":23},"name":"get_float64","qualname":"<DataView>::get_float64","value":"fn (&self, byte_offset: usize) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getFloat64() method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43041,"byte_end":43059,"line_start":844,"line_end":844,"column_start":12,"column_end":30},"name":"get_float64_endian","qualname":"<DataView>::get_float64_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getFloat64() method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43461,"byte_end":43469,"line_start":851,"line_end":851,"column_start":12,"column_end":20},"name":"set_int8","qualname":"<DataView>::set_int8","value":"fn (&self, byte_offset: usize, value: i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt8() method stores a signed 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43860,"byte_end":43869,"line_start":858,"line_end":858,"column_start":12,"column_end":21},"name":"set_uint8","qualname":"<DataView>::set_uint8","value":"fn (&self, byte_offset: usize, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint8() method stores an unsigned 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44259,"byte_end":44268,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"set_int16","qualname":"<DataView>::set_int16","value":"fn (&self, byte_offset: usize, value: i16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt16() method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44659,"byte_end":44675,"line_start":872,"line_end":872,"column_start":12,"column_end":28},"name":"set_int16_endian","qualname":"<DataView>::set_int16_endian","value":"fn (&self, byte_offset: usize, value: i16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt16() method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45102,"byte_end":45112,"line_start":879,"line_end":879,"column_start":12,"column_end":22},"name":"set_uint16","qualname":"<DataView>::set_uint16","value":"fn (&self, byte_offset: usize, value: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45518,"byte_end":45535,"line_start":886,"line_end":886,"column_start":12,"column_end":29},"name":"set_uint16_endian","qualname":"<DataView>::set_uint16_endian","value":"fn (&self, byte_offset: usize, value: u16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45946,"byte_end":45955,"line_start":893,"line_end":893,"column_start":12,"column_end":21},"name":"set_int32","qualname":"<DataView>::set_int32","value":"fn (&self, byte_offset: usize, value: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt32() method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46345,"byte_end":46361,"line_start":900,"line_end":900,"column_start":12,"column_end":28},"name":"set_int32_endian","qualname":"<DataView>::set_int32_endian","value":"fn (&self, byte_offset: usize, value: i32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt32() method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46787,"byte_end":46797,"line_start":907,"line_end":907,"column_start":12,"column_end":22},"name":"set_uint32","qualname":"<DataView>::set_uint32","value":"fn (&self, byte_offset: usize, value: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47202,"byte_end":47219,"line_start":914,"line_end":914,"column_start":12,"column_end":29},"name":"set_uint32_endian","qualname":"<DataView>::set_uint32_endian","value":"fn (&self, byte_offset: usize, value: u32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47635,"byte_end":47646,"line_start":921,"line_end":921,"column_start":12,"column_end":23},"name":"set_float32","qualname":"<DataView>::set_float32","value":"fn (&self, byte_offset: usize, value: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat32() method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48041,"byte_end":48059,"line_start":928,"line_end":928,"column_start":12,"column_end":30},"name":"set_float32_endian","qualname":"<DataView>::set_float32_endian","value":"fn (&self, byte_offset: usize, value: f32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat32() method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48476,"byte_end":48487,"line_start":935,"line_end":935,"column_start":12,"column_end":23},"name":"set_float64","qualname":"<DataView>::set_float64","value":"fn (&self, byte_offset: usize, value: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat64() method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48883,"byte_end":48901,"line_start":942,"line_end":942,"column_start":12,"column_end":30},"name":"set_float64_endian","qualname":"<DataView>::set_float64_endian","value":"fn (&self, byte_offset: usize, value: f64, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat64() method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35798,"byte_end":35813,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1578},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49108,"byte_end":49113,"line_start":950,"line_end":950,"column_start":14,"column_end":19},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":89}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48999,"byte_end":49000,"line_start":946,"line_end":946,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49553,"byte_end":49556,"line_start":959,"line_end":959,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (message: &str) -> Error","parent":null,"children":[],"decl_id":null,"docs":" The Error constructor creates an error object.\n Instances of Error objects are thrown when runtime errors occur.\n The Error object can also be used as a base object for user-defined exceptions.\n See below for standard built-in error types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49849,"byte_end":49856,"line_start":965,"line_end":965,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The message property is a human-readable description of the error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49943,"byte_end":49954,"line_start":967,"line_end":967,"column_start":12,"column_end":23},"name":"set_message","qualname":"<Error>::set_message","value":"fn (&self, message: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50271,"byte_end":50275,"line_start":973,"line_end":973,"column_start":12,"column_end":16},"name":"name","qualname":"<Error>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The name property represents a name for the type of error. The initial value is \"Error\".","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50362,"byte_end":50370,"line_start":975,"line_end":975,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Error>::set_name","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50678,"byte_end":50687,"line_start":981,"line_end":981,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Error>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified Error object","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48985,"byte_end":49000,"line_start":946,"line_end":946,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1730},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50871,"byte_end":50880,"line_start":989,"line_end":989,"column_start":14,"column_end":23},"name":"EvalError","qualname":"::EvalError","value":"EvalError {  }","parent":null,"children":[{"krate":0,"index":95}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50731,"byte_end":50746,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50731,"byte_end":50746,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50731,"byte_end":50746,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50745,"byte_end":50746,"line_start":985,"line_end":985,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51265,"byte_end":51268,"line_start":997,"line_end":997,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalError>::new","value":"fn (message: &str) -> EvalError","parent":null,"children":[],"decl_id":null,"docs":" The EvalError object indicates an error regarding the global eval() function. This\n exception is not thrown by JavaScript anymore, however the EvalError object remains for\n compatibility.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50731,"byte_end":50746,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50731,"byte_end":50746,"line_start":985,"line_end":985,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1932},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51471,"byte_end":51479,"line_start":1005,"line_end":1005,"column_start":14,"column_end":22},"name":"Function","qualname":"::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":101}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51327,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52112,"byte_end":52125,"line_start":1016,"line_end":1016,"column_start":12,"column_end":25},"name":"new_with_args","qualname":"<Function>::new_with_args","value":"fn (args: &str, body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52794,"byte_end":52805,"line_start":1027,"line_end":1027,"column_start":12,"column_end":23},"name":"new_no_args","qualname":"<Function>::new_no_args","value":"fn (body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53150,"byte_end":53155,"line_start":1034,"line_end":1034,"column_start":12,"column_end":17},"name":"apply","qualname":"<Function>::apply","value":"fn (&self, context: &JsValue, args: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The apply() method calls a function with a given this value, and arguments provided as an array\n (or an array-like object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53544,"byte_end":53549,"line_start":1041,"line_end":1041,"column_start":12,"column_end":17},"name":"call0","qualname":"<Function>::call0","value":"fn (&self, context: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53924,"byte_end":53929,"line_start":1048,"line_end":1048,"column_start":12,"column_end":17},"name":"call1","qualname":"<Function>::call1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54320,"byte_end":54325,"line_start":1055,"line_end":1055,"column_start":12,"column_end":17},"name":"call2","qualname":"<Function>::call2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54771,"byte_end":54776,"line_start":1067,"line_end":1067,"column_start":12,"column_end":17},"name":"call3","qualname":"<Function>::call3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":55324,"byte_end":55328,"line_start":1080,"line_end":1080,"column_start":12,"column_end":16},"name":"bind","qualname":"<Function>::bind","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":55660,"byte_end":55666,"line_start":1086,"line_end":1086,"column_start":12,"column_end":18},"name":"length","qualname":"<Function>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property indicates the number of arguments expected by the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56065,"byte_end":56069,"line_start":1094,"line_end":1094,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" A Function object's read-only name property indicates the function's\n name as specified when it was created or \"anonymous\" for functions\n created anonymously.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56389,"byte_end":56398,"line_start":1100,"line_end":1100,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Function>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the source code of the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51313,"byte_end":51328,"line_start":1001,"line_end":1001,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56743,"byte_end":56751,"line_start":1110,"line_end":1110,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Function>::try_from","value":"fn (val: &JsValue) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Function` value of this JS value if it's an instance of a\n function.","sig":null,"attributes":[{"value":"deprecated(note =\n                 \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56649,"byte_end":56731,"line_start":1109,"line_end":1109,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":2084},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56957,"byte_end":56966,"line_start":1120,"line_end":1120,"column_start":14,"column_end":23},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56848,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":57334,"byte_end":57338,"line_start":1127,"line_end":1127,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"fn (&self, value: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The next() method returns an object with two properties done and value.\n You can also provide a parameter to the next method to send a value to the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":57688,"byte_end":57695,"line_start":1133,"line_end":1133,"column_start":12,"column_end":19},"name":"return_","qualname":"<Generator>::return_","value":"fn (&self, value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The return() method returns the given value and finishes the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58095,"byte_end":58100,"line_start":1140,"line_end":1140,"column_start":12,"column_end":17},"name":"throw","qualname":"<Generator>::throw","value":"fn (&self, error: &Error) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The throw() method resumes the execution of a generator by throwing an error into it\n and returns an object with two properties done and value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56834,"byte_end":56849,"line_start":1116,"line_end":1116,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2266},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58296,"byte_end":58299,"line_start":1148,"line_end":1148,"column_start":14,"column_end":17},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":113}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58187,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58536,"byte_end":58541,"line_start":1154,"line_end":1154,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The clear() method removes all elements from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58801,"byte_end":58807,"line_start":1160,"line_end":1160,"column_start":12,"column_end":18},"name":"delete","qualname":"<Map>::delete","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The delete() method removes the specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59167,"byte_end":59175,"line_start":1167,"line_end":1167,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Map>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The forEach() method executes a provided function once per each\n key/value pair in the Map object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59471,"byte_end":59474,"line_start":1173,"line_end":1173,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"fn (&self, key: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The get() method returns a specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59799,"byte_end":59802,"line_start":1180,"line_end":1180,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The has() method returns a boolean indicating whether an element with\n the specified key exists or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60145,"byte_end":60148,"line_start":1187,"line_end":1187,"column_start":12,"column_end":15},"name":"new","qualname":"<Map>::new","value":"fn () -> Map","parent":null,"children":[],"decl_id":null,"docs":" The Map object holds key-value pairs. Any value (both objects and\n primitive values) maybe used as either a key or a value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2256},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60433,"byte_end":60436,"line_start":1194,"line_end":1194,"column_start":12,"column_end":15},"name":"set","qualname":"<Map>::set","value":"fn (&self, key: &JsValue, value: &JsValue) -> Map","parent":null,"children":[],"decl_id":null,"docs":" The set() method adds or updates an element with a specified key\n and value to a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60863,"byte_end":60867,"line_start":1202,"line_end":1202,"column_start":12,"column_end":16},"name":"size","qualname":"<Map>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The value of size is an integer representing how many entries\n the Map object has. A set accessor function for size is undefined;\n you can not change this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58173,"byte_end":58188,"line_start":1144,"line_end":1144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61272,"byte_end":61279,"line_start":1214,"line_end":1214,"column_start":12,"column_end":19},"name":"entries","qualname":"<Map>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The entries() method returns a new Iterator object that contains\n the [key, value] pairs for each element in the Map object in\n insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61614,"byte_end":61618,"line_start":1221,"line_end":1221,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The keys() method returns a new Iterator object that contains the\n keys for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61959,"byte_end":61965,"line_start":1228,"line_end":1228,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The values() method returns a new Iterator object that contains the\n values for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60907,"byte_end":60922,"line_start":1206,"line_end":1206,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2414},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62398,"byte_end":62406,"line_start":1240,"line_end":1240,"column_start":14,"column_end":22},"name":"Iterator","qualname":"::Iterator","value":"Iterator {  }","parent":null,"children":[{"krate":0,"index":119}],"decl_id":null,"docs":" Any object that conforms to the JS iterator protocol. For example,\n something returned by `myArray[Symbol.iterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62006,"byte_end":62021,"line_start":1232,"line_end":1232,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62006,"byte_end":62021,"line_start":1232,"line_end":1232,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62006,"byte_end":62021,"line_start":1232,"line_end":1232,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62742,"byte_end":62746,"line_start":1247,"line_end":1247,"column_start":12,"column_end":16},"name":"next","qualname":"<Iterator>::next","value":"fn (&self) -> Result<IteratorNext, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The next method always has to return an object with appropriate\n properties including done and value. If a non-object value gets returned\n (such as false or undefined), a TypeError (\"iterator.next() returned a\n non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62006,"byte_end":62021,"line_start":1232,"line_end":1232,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62006,"byte_end":62021,"line_start":1232,"line_end":1232,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63378,"byte_end":63382,"line_start":1273,"line_end":1273,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63596,"byte_end":63604,"line_start":1281,"line_end":1281,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65169,"byte_end":65177,"line_start":1357,"line_end":1357,"column_start":8,"column_end":16},"name":"try_iter","qualname":"::try_iter","value":"fn (val: &JsValue) -> Result<Option<IntoIter>, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over `val` using the JS iteration protocol and\n `Symbol.iterator`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2660},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65937,"byte_end":65949,"line_start":1382,"line_end":1382,"column_start":14,"column_end":26},"name":"IteratorNext","qualname":"::IteratorNext","value":"IteratorNext {  }","parent":null,"children":[{"krate":0,"index":131}],"decl_id":null,"docs":" The result of calling `next()` on a JS iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65648,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66377,"byte_end":66381,"line_start":1392,"line_end":1392,"column_start":12,"column_end":16},"name":"done","qualname":"<IteratorNext>::done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the value `true` if the iterator is past the end of the iterated\n sequence. In this case value optionally specifies the return value of\n the iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66569,"byte_end":66574,"line_start":1397,"line_end":1397,"column_start":12,"column_end":17},"name":"value","qualname":"<IteratorNext>::value","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Any JavaScript value returned by the iterator. Can be omitted when done\n is true.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65634,"byte_end":65649,"line_start":1375,"line_end":1375,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66644,"byte_end":66648,"line_start":1401,"line_end":1401,"column_start":9,"column_end":13},"name":"Math","qualname":"::Math","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2688},{"krate":0,"index":2692},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2704},{"krate":0,"index":2708},{"krate":0,"index":2712},{"krate":0,"index":2716},{"krate":0,"index":2720},{"krate":0,"index":2724},{"krate":0,"index":2728},{"krate":0,"index":2732},{"krate":0,"index":2736},{"krate":0,"index":2740},{"krate":0,"index":2744},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2756},{"krate":0,"index":2760},{"krate":0,"index":2764},{"krate":0,"index":2768},{"krate":0,"index":2772},{"krate":0,"index":2776},{"krate":0,"index":2780},{"krate":0,"index":2784},{"krate":0,"index":2788},{"krate":0,"index":2792},{"krate":0,"index":2796},{"krate":0,"index":2800},{"krate":0,"index":2804},{"krate":0,"index":2808},{"krate":0,"index":2812},{"krate":0,"index":2816}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66611,"byte_end":66635,"line_start":1400,"line_end":1400,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2680},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67028,"byte_end":67031,"line_start":1412,"line_end":1412,"column_start":16,"column_end":19},"name":"abs","qualname":"::Math::abs","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.abs() function returns the absolute value of a number, that is\n Math.abs(x) = |x|","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2684},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67444,"byte_end":67448,"line_start":1420,"line_end":1420,"column_start":16,"column_end":20},"name":"acos","qualname":"::Math::acos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.acos() function returns the arccosine (in radians) of a\n number, that is ∀x∊[-1;1]\n Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2688},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67860,"byte_end":67865,"line_start":1428,"line_end":1428,"column_start":16,"column_end":21},"name":"acosh","qualname":"::Math::acosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.acosh() function returns the hyperbolic arc-cosine of a\n number, that is ∀x ≥ 1\n Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2692},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":68284,"byte_end":68288,"line_start":1436,"line_end":1436,"column_start":16,"column_end":20},"name":"asin","qualname":"::Math::asin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.asin() function returns the arcsine (in radians) of a\n number, that is ∀x ∊ [-1;1]\n Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2696},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":68668,"byte_end":68673,"line_start":1443,"line_end":1443,"column_start":16,"column_end":21},"name":"asinh","qualname":"::Math::asinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.asinh() function returns the hyperbolic arcsine of a\n number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2700},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":68944,"byte_end":68948,"line_start":1449,"line_end":1449,"column_start":16,"column_end":20},"name":"atan","qualname":"::Math::atan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atan() function returns the arctangent (in radians) of a\n number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that\n tan(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2704},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69270,"byte_end":69275,"line_start":1456,"line_end":1456,"column_start":16,"column_end":21},"name":"atan2","qualname":"::Math::atan2","value":"fn (y: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atan2() function returns the arctangent of the quotient of\n its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2708},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69696,"byte_end":69701,"line_start":1464,"line_end":1464,"column_start":16,"column_end":21},"name":"atanh","qualname":"::Math::atanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atanh() function returns the hyperbolic arctangent of a number,\n that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that\n tanh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2712},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70059,"byte_end":70063,"line_start":1471,"line_end":1471,"column_start":16,"column_end":20},"name":"cbrt","qualname":"::Math::cbrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cbrt() function returns the cube root of a number, that is\n Math.cbrt(x) = x^3 = the unique y such that y^3 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2716},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70396,"byte_end":70400,"line_start":1478,"line_end":1478,"column_start":16,"column_end":20},"name":"ceil","qualname":"::Math::ceil","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.ceil() function returns the smallest integer greater than\n or equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2720},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70754,"byte_end":70759,"line_start":1485,"line_end":1485,"column_start":16,"column_end":21},"name":"clz32","qualname":"::Math::clz32","value":"fn (x: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The Math.clz32() function returns the number of leading zero bits in\n the 32-bit binary representation of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2724},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":71157,"byte_end":71160,"line_start":1492,"line_end":1492,"column_start":16,"column_end":19},"name":"cos","qualname":"::Math::cos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cos() static function returns the cosine of the specified angle,\n which must be specified in radians. This value is length(adjacent)/length(hypotenuse).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2728},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":71510,"byte_end":71514,"line_start":1499,"line_end":1499,"column_start":16,"column_end":20},"name":"cosh","qualname":"::Math::cosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cosh() function returns the hyperbolic cosine of a number,\n that can be expressed using the constant e.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2732},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":71908,"byte_end":71911,"line_start":1506,"line_end":1506,"column_start":16,"column_end":19},"name":"exp","qualname":"::Math::exp","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.exp() function returns e^x, where x is the argument, and e is Euler's number\n (also known as Napier's constant), the base of the natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2736},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":72260,"byte_end":72265,"line_start":1513,"line_end":1513,"column_start":16,"column_end":21},"name":"expm1","qualname":"::Math::expm1","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.expm1() function returns e^x - 1, where x is the argument, and e the base of the\n natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2740},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":72596,"byte_end":72601,"line_start":1520,"line_end":1520,"column_start":16,"column_end":21},"name":"floor","qualname":"::Math::floor","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.floor() function returns the largest integer less than or\n equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2744},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":72946,"byte_end":72952,"line_start":1527,"line_end":1527,"column_start":16,"column_end":22},"name":"fround","qualname":"::Math::fround","value":"fn (x: f64) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The Math.fround() function returns the nearest 32-bit single precision float representation\n of a Number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2748},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":73269,"byte_end":73274,"line_start":1533,"line_end":1533,"column_start":16,"column_end":21},"name":"hypot","qualname":"::Math::hypot","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.hypot() function returns the square root of the sum of squares of its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2752},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":73623,"byte_end":73627,"line_start":1540,"line_end":1540,"column_start":16,"column_end":20},"name":"imul","qualname":"::Math::imul","value":"fn (x: i32, y: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The Math.imul() function returns the result of the C-like 32-bit multiplication of the\n two parameters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2756},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":74022,"byte_end":74025,"line_start":1547,"line_end":1547,"column_start":16,"column_end":19},"name":"log","qualname":"::Math::log","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log() function returns the natural logarithm (base e) of a number.\n The JavaScript Math.log() function is equivalent to ln(x) in mathematics.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2760},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":74321,"byte_end":74326,"line_start":1553,"line_end":1553,"column_start":16,"column_end":21},"name":"log10","qualname":"::Math::log10","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log10() function returns the base 10 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2764},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":74623,"byte_end":74628,"line_start":1558,"line_end":1558,"column_start":16,"column_end":21},"name":"log1p","qualname":"::Math::log1p","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log1p() function returns the natural logarithm (base e) of 1 + a number.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2768},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":74921,"byte_end":74925,"line_start":1564,"line_end":1564,"column_start":16,"column_end":20},"name":"log2","qualname":"::Math::log2","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log2() function returns the base 2 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2772},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":75210,"byte_end":75213,"line_start":1570,"line_end":1570,"column_start":16,"column_end":19},"name":"max","qualname":"::Math::max","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.max() function returns the largest of two numbers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2776},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":75526,"byte_end":75529,"line_start":1576,"line_end":1576,"column_start":16,"column_end":19},"name":"min","qualname":"::Math::min","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The static function Math.min() returns the lowest-valued number passed into it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2780},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":75850,"byte_end":75853,"line_start":1582,"line_end":1582,"column_start":16,"column_end":19},"name":"pow","qualname":"::Math::pow","value":"fn (base: f64, exponent: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.pow() function returns the base to the exponent power, that is, base^exponent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2784},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":76505,"byte_end":76511,"line_start":1592,"line_end":1592,"column_start":16,"column_end":22},"name":"random","qualname":"::Math::random","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.random() function returns a floating-point, pseudo-random number\n in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution\n over that range — which you can then scale to your desired range.\n The implementation selects the initial seed to the random number generation algorithm;\n it cannot be chosen or reset by the user.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2788},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":76820,"byte_end":76825,"line_start":1598,"line_end":1598,"column_start":16,"column_end":21},"name":"round","qualname":"::Math::round","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.round() function returns the value of a number rounded to the nearest integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2792},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":77179,"byte_end":77183,"line_start":1605,"line_end":1605,"column_start":16,"column_end":20},"name":"sign","qualname":"::Math::sign","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sign() function returns the sign of a number, indicating whether the number is\n positive, negative or zero.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2796},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":77462,"byte_end":77465,"line_start":1611,"line_end":1611,"column_start":16,"column_end":19},"name":"sin","qualname":"::Math::sin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sin() function returns the sine of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2800},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":77843,"byte_end":77847,"line_start":1618,"line_end":1618,"column_start":16,"column_end":20},"name":"sinh","qualname":"::Math::sinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed\n using the constant e: Math.sinh(x) = (e^x - e^-x)/2","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2804},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":78226,"byte_end":78230,"line_start":1625,"line_end":1625,"column_start":16,"column_end":20},"name":"sqrt","qualname":"::Math::sqrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sqrt() function returns the square root of a number, that is\n ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2808},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":78512,"byte_end":78515,"line_start":1631,"line_end":1631,"column_start":16,"column_end":19},"name":"tan","qualname":"::Math::tan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.tan() function returns the tangent of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2812},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":78907,"byte_end":78911,"line_start":1638,"line_end":1638,"column_start":16,"column_end":20},"name":"tanh","qualname":"::Math::tanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.tanh() function returns the hyperbolic tangent of a number, that is\n tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2816},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79248,"byte_end":79253,"line_start":1645,"line_end":1645,"column_start":16,"column_end":21},"name":"trunc","qualname":"::Math::trunc","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.trunc() function returns the integer part of a number by removing any fractional\n digits.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66686,"byte_end":66701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3014},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79430,"byte_end":79436,"line_start":1654,"line_end":1654,"column_start":14,"column_end":20},"name":"Number","qualname":"::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":139}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79744,"byte_end":79753,"line_start":1660,"line_end":1660,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Number>::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isFinite() method determines whether the passed value is a finite number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":80084,"byte_end":80094,"line_start":1666,"line_end":1666,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Number>::is_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isInteger() method determines whether the passed value is an integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2950},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":80498,"byte_end":80504,"line_start":1673,"line_end":1673,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Number>::is_nan","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isNaN() method determines whether the passed value is NaN and its type is Number.\n It is a more robust version of the original, global isNaN().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":80878,"byte_end":80893,"line_start":1680,"line_end":1680,"column_start":12,"column_end":27},"name":"is_safe_integer","qualname":"<Number>::is_safe_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isSafeInteger() method determines whether the provided value is a number\n that is a safe integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":81342,"byte_end":81345,"line_start":1689,"line_end":1689,"column_start":12,"column_end":15},"name":"new","qualname":"<Number>::new","value":"fn (value: &JsValue) -> Number","parent":null,"children":[],"decl_id":null,"docs":" The `Number` JavaScript object is a wrapper object allowing\n you to work with numerical values. A `Number` object is\n created using the `Number()` constructor.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Number::from` instead\")","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":81265,"byte_end":81330,"line_start":1688,"line_end":1688,"column_start":5,"column_end":70}},{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":81712,"byte_end":81721,"line_start":1696,"line_end":1696,"column_start":12,"column_end":21},"name":"parse_int","qualname":"<Number>::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Number.parseInt() method parses a string argument and returns an\n integer of the specified radix or base.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":82079,"byte_end":82090,"line_start":1703,"line_end":1703,"column_start":12,"column_end":23},"name":"parse_float","qualname":"<Number>::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Number.parseFloat() method parses a string argument and returns a\n floating point number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":82435,"byte_end":82451,"line_start":1710,"line_end":1710,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Number>::to_locale_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string with a language sensitive\n representation of this number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":82818,"byte_end":82830,"line_start":1717,"line_end":1717,"column_start":12,"column_end":24},"name":"to_precision","qualname":"<Number>::to_precision","value":"fn (&self, precision: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toPrecision() method returns a string representing the Number\n object to the specified precision.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":83203,"byte_end":83211,"line_start":1724,"line_end":1724,"column_start":12,"column_end":20},"name":"to_fixed","qualname":"<Number>::to_fixed","value":"fn (&self, digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toFixed() method returns a string representing the Number\n object using fixed-point notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":83596,"byte_end":83610,"line_start":1731,"line_end":1731,"column_start":12,"column_end":26},"name":"to_exponential","qualname":"<Number>::to_exponential","value":"fn (&self, fraction_digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toExponential() method returns a string representing the Number\n object in exponential notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":83975,"byte_end":83984,"line_start":1738,"line_end":1738,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Number>::to_string","value":"fn (&self, radix: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the\n specified Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":84326,"byte_end":84334,"line_start":1745,"line_end":1745,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Number>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method returns the wrapped primitive value of\n a Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":79290,"byte_end":79305,"line_start":1650,"line_end":1650,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3486},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85201,"byte_end":85205,"line_start":1785,"line_end":1785,"column_start":14,"column_end":18},"name":"Date","qualname":"::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":145}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85092,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3200},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85511,"byte_end":85519,"line_start":1792,"line_end":1792,"column_start":12,"column_end":20},"name":"get_date","qualname":"<Date>::get_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getDate() method returns the day of the month for the\n specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3206},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85908,"byte_end":85915,"line_start":1799,"line_end":1799,"column_start":12,"column_end":19},"name":"get_day","qualname":"<Date>::get_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getDay() method returns the day of the week for the specified date according to local time,\n where 0 represents Sunday. For the day of the month see getDate().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3212},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":86232,"byte_end":86245,"line_start":1805,"line_end":1805,"column_start":12,"column_end":25},"name":"get_full_year","qualname":"<Date>::get_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getFullYear() method returns the year of the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3218},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":86555,"byte_end":86564,"line_start":1811,"line_end":1811,"column_start":12,"column_end":21},"name":"get_hours","qualname":"<Date>::get_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getHours() method returns the hour for the specified date, according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":86901,"byte_end":86917,"line_start":1817,"line_end":1817,"column_start":12,"column_end":28},"name":"get_milliseconds","qualname":"<Date>::get_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMilliseconds() method returns the milliseconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":87234,"byte_end":87245,"line_start":1823,"line_end":1823,"column_start":12,"column_end":23},"name":"get_minutes","qualname":"<Date>::get_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMinutes() method returns the minutes in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":87636,"byte_end":87645,"line_start":1830,"line_end":1830,"column_start":12,"column_end":21},"name":"get_month","qualname":"<Date>::get_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMonth() method returns the month in the specified date according to local time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":87962,"byte_end":87973,"line_start":1836,"line_end":1836,"column_start":12,"column_end":23},"name":"get_seconds","qualname":"<Date>::get_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getSeconds() method returns the seconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":88326,"byte_end":88334,"line_start":1843,"line_end":1843,"column_start":12,"column_end":20},"name":"get_time","qualname":"<Date>::get_time","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getTime() method returns the numeric value corresponding to the time for the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3254},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":88710,"byte_end":88729,"line_start":1850,"line_end":1850,"column_start":12,"column_end":31},"name":"get_timezone_offset","qualname":"<Date>::get_timezone_offset","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getTimezoneOffset() method returns the time zone difference, in minutes,\n from current locale (host system settings) to UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":89074,"byte_end":89086,"line_start":1857,"line_end":1857,"column_start":12,"column_end":24},"name":"get_utc_date","qualname":"<Date>::get_utc_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCDate() method returns the day (date) of the month in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":89447,"byte_end":89458,"line_start":1864,"line_end":1864,"column_start":12,"column_end":23},"name":"get_utc_day","qualname":"<Date>::get_utc_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCDay() method returns the day of the week in the specified date according to universal time,\n where 0 represents Sunday.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":89788,"byte_end":89805,"line_start":1870,"line_end":1870,"column_start":12,"column_end":29},"name":"get_utc_full_year","qualname":"<Date>::get_utc_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCFullYear() method returns the year in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3278},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":90127,"byte_end":90140,"line_start":1876,"line_end":1876,"column_start":12,"column_end":25},"name":"get_utc_hours","qualname":"<Date>::get_utc_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCHours() method returns the hours in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3284},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":90498,"byte_end":90518,"line_start":1883,"line_end":1883,"column_start":12,"column_end":32},"name":"get_utc_milliseconds","qualname":"<Date>::get_utc_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMilliseconds() method returns the milliseconds in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3290},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":90848,"byte_end":90863,"line_start":1889,"line_end":1889,"column_start":12,"column_end":27},"name":"get_utc_minutes","qualname":"<Date>::get_utc_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMinutes() method returns the minutes in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3296},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":91260,"byte_end":91273,"line_start":1896,"line_end":1896,"column_start":12,"column_end":25},"name":"get_utc_month","qualname":"<Date>::get_utc_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMonth() returns the month of the specified date according to universal time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":91603,"byte_end":91618,"line_start":1902,"line_end":1902,"column_start":12,"column_end":27},"name":"get_utc_seconds","qualname":"<Date>::get_utc_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCSeconds() method returns the seconds in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3308},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":92008,"byte_end":92011,"line_start":1910,"line_end":1910,"column_start":12,"column_end":15},"name":"new","qualname":"<Date>::new","value":"fn (init: &JsValue) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3314},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":92300,"byte_end":92305,"line_start":1917,"line_end":1917,"column_start":12,"column_end":17},"name":"new_0","qualname":"<Date>::new_0","value":"fn () -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents the current moment in\n time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":92620,"byte_end":92623,"line_start":1924,"line_end":1924,"column_start":12,"column_end":15},"name":"now","qualname":"<Date>::now","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.now()` method returns the number of milliseconds\n elapsed since January 1, 1970 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3326},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":93089,"byte_end":93094,"line_start":1932,"line_end":1932,"column_start":12,"column_end":17},"name":"parse","qualname":"<Date>::parse","value":"fn (date: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Date.parse() method parses a string representation of a date, and returns the number of milliseconds\n since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases,\n contains illegal date values (e.g. 2015-02-31).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3332},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":93420,"byte_end":93428,"line_start":1938,"line_end":1938,"column_start":12,"column_end":20},"name":"set_date","qualname":"<Date>::set_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setDate() method sets the day of the Date object relative to the beginning of the currently set month.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3338},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":93787,"byte_end":93800,"line_start":1945,"line_end":1945,"column_start":12,"column_end":25},"name":"set_full_year","qualname":"<Date>::set_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setFullYear() method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":94263,"byte_end":94272,"line_start":1953,"line_end":1953,"column_start":12,"column_end":21},"name":"set_hours","qualname":"<Date>::set_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setHours() method sets the hours for a specified date according to local time,\n and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented\n by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3350},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":94617,"byte_end":94633,"line_start":1959,"line_end":1959,"column_start":12,"column_end":28},"name":"set_milliseconds","qualname":"<Date>::set_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMilliseconds() method sets the milliseconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3356},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":94965,"byte_end":94976,"line_start":1965,"line_end":1965,"column_start":12,"column_end":23},"name":"set_minutes","qualname":"<Date>::set_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMinutes() method sets the minutes for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":95307,"byte_end":95316,"line_start":1971,"line_end":1971,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Date>::set_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMonth() method sets the month for a specified date according to the currently set year.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3368},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":95641,"byte_end":95652,"line_start":1977,"line_end":1977,"column_start":12,"column_end":23},"name":"set_seconds","qualname":"<Date>::set_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setSeconds() method sets the seconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":96025,"byte_end":96033,"line_start":1984,"line_end":1984,"column_start":12,"column_end":20},"name":"set_time","qualname":"<Date>::set_time","value":"fn (&self, time: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setTime() method sets the Date object to the time represented by a number of milliseconds\n since January 1, 1970, 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":96378,"byte_end":96390,"line_start":1991,"line_end":1991,"column_start":12,"column_end":24},"name":"set_utc_date","qualname":"<Date>::set_utc_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCDate() method sets the day of the month for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3386},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":96731,"byte_end":96748,"line_start":1997,"line_end":1997,"column_start":12,"column_end":29},"name":"set_utc_full_year","qualname":"<Date>::set_utc_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCFullYear() method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3392},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":97224,"byte_end":97237,"line_start":2005,"line_end":2005,"column_start":12,"column_end":25},"name":"set_utc_hours","qualname":"<Date>::set_utc_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCHours() method sets the hour for a specified date according to universal time,\n and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time\n represented by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3398},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":97603,"byte_end":97623,"line_start":2012,"line_end":2012,"column_start":12,"column_end":32},"name":"set_utc_milliseconds","qualname":"<Date>::set_utc_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMilliseconds() method sets the milliseconds for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":97968,"byte_end":97983,"line_start":2018,"line_end":2018,"column_start":12,"column_end":27},"name":"set_utc_minutes","qualname":"<Date>::set_utc_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMinutes() method sets the minutes for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":98315,"byte_end":98328,"line_start":2024,"line_end":2024,"column_start":12,"column_end":25},"name":"set_utc_month","qualname":"<Date>::set_utc_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMonth() method sets the month for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":98666,"byte_end":98681,"line_start":2030,"line_end":2030,"column_start":12,"column_end":27},"name":"set_utc_seconds","qualname":"<Date>::set_utc_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCSeconds() method sets the seconds for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":99045,"byte_end":99059,"line_start":2037,"line_end":2037,"column_start":12,"column_end":26},"name":"to_date_string","qualname":"<Date>::to_date_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toDateString() method returns the date portion of a Date object\n in human readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":99588,"byte_end":99601,"line_start":2046,"line_end":2046,"column_start":12,"column_end":25},"name":"to_iso_string","qualname":"<Date>::to_iso_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toISOString() method returns a string in simplified extended ISO format (ISO\n 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset,\n as denoted by the suffix \"Z\"","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":99896,"byte_end":99903,"line_start":2052,"line_end":2052,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Date>::to_json","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toJSON() method returns a string representation of the Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":100660,"byte_end":100681,"line_start":2064,"line_end":2064,"column_start":12,"column_end":33},"name":"to_locale_date_string","qualname":"<Date>::to_locale_date_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleDateString() method returns a string with a language sensitive\n representation of the date portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions\n should be used and allow to customize the behavior of the function.\n In older implementations, which ignore the locales and options arguments,\n the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":101430,"byte_end":101446,"line_start":2076,"line_end":2076,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Date>::to_locale_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string with a language sensitive\n representation of this date. The new locales and options arguments\n let applications specify the language whose formatting conventions\n should be used and customize the behavior of the function.\n In older implementations, which ignore the locales\n and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":102219,"byte_end":102240,"line_start":2087,"line_end":2087,"column_start":12,"column_end":33},"name":"to_locale_time_string","qualname":"<Date>::to_locale_time_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleTimeString() method returns a string with a language sensitive\n representation of the time portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions should be\n used and customize the behavior of the function. In older implementations, which ignore\n the locales and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3458},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":102568,"byte_end":102577,"line_start":2094,"line_end":2094,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Date>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing\n the specified Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3464},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":102932,"byte_end":102946,"line_start":2101,"line_end":2101,"column_start":12,"column_end":26},"name":"to_time_string","qualname":"<Date>::to_time_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toTimeString() method returns the time portion of a Date object in human\n readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":103266,"byte_end":103279,"line_start":2108,"line_end":2108,"column_start":12,"column_end":25},"name":"to_utc_string","qualname":"<Date>::to_utc_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toUTCString() method converts a date to a string,\n using the UTC time zone.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":103736,"byte_end":103739,"line_start":2117,"line_end":2117,"column_start":12,"column_end":15},"name":"utc","qualname":"<Date>::utc","value":"fn (year: f64, month: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.UTC()` method accepts the same parameters as the\n longest form of the constructor, and returns the number of\n milliseconds in a `Date` object since January 1, 1970,\n 00:00:00, universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104045,"byte_end":104053,"line_start":2124,"line_end":2124,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Date>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method  returns the primitive value of\n a Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":85078,"byte_end":85093,"line_start":1781,"line_end":1781,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3794},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104159,"byte_end":104165,"line_start":2131,"line_end":2131,"column_start":14,"column_end":20},"name":"Object","qualname":"::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":151}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3610},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104555,"byte_end":104561,"line_start":2139,"line_end":2139,"column_start":12,"column_end":18},"name":"assign","qualname":"<Object>::assign","value":"fn (target: &Object, source: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":105013,"byte_end":105020,"line_start":2147,"line_end":2147,"column_start":12,"column_end":19},"name":"assign2","qualname":"<Object>::assign2","value":"fn (target: &Object, source1: &Object, source2: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":105491,"byte_end":105498,"line_start":2155,"line_end":2155,"column_start":12,"column_end":19},"name":"assign3","qualname":"<Object>::assign3","value":"fn (target: &Object, source1: &Object, source2: &Object, source3: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":105904,"byte_end":105915,"line_start":2163,"line_end":2163,"column_start":12,"column_end":23},"name":"constructor","qualname":"<Object>::constructor","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The constructor property returns a reference to the Object constructor\n function that created the instance object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":106274,"byte_end":106280,"line_start":2170,"line_end":2170,"column_start":12,"column_end":18},"name":"create","qualname":"<Object>::create","value":"fn (prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.create() method creates a new object, using an existing\n object to provide the newly created object's prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":106720,"byte_end":106735,"line_start":2178,"line_end":2178,"column_start":12,"column_end":27},"name":"define_property","qualname":"<Object>::define_property","value":"fn (obj: &Object, prop: &JsValue, descriptor: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The static method Object.defineProperty() defines a new\n property directly on an object, or modifies an existing\n property on an object, and returns the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":107177,"byte_end":107194,"line_start":2186,"line_end":2186,"column_start":12,"column_end":29},"name":"define_properties","qualname":"<Object>::define_properties","value":"fn (obj: &Object, props: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.defineProperties() method defines new or modifies\n existing properties directly on an object, returning the\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":107727,"byte_end":107734,"line_start":2196,"line_end":2196,"column_start":12,"column_end":19},"name":"entries","qualname":"<Object>::entries","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.entries() method returns an array of a given\n object's own enumerable property [key, value] pairs, in the\n same order as that provided by a for...in loop (the difference\n being that a for-in loop enumerates properties in the\n prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":108347,"byte_end":108353,"line_start":2206,"line_end":2206,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Object>::freeze","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.freeze()` method freezes an object: that is, prevents new\n properties from being added to it; prevents existing properties from\n being removed; and prevents existing properties, or their enumerability,\n configurability, or writability, from being changed, it also prevents\n the prototype from being changed. The method returns the passed object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":108708,"byte_end":108720,"line_start":2213,"line_end":2213,"column_start":12,"column_end":24},"name":"from_entries","qualname":"<Object>::from_entries","value":"fn (iterable: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The Object.fromEntries() method transforms a list of key-value pairs\n into an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":109245,"byte_end":109272,"line_start":2222,"line_end":2222,"column_start":12,"column_end":39},"name":"get_own_property_descriptor","qualname":"<Object>::get_own_property_descriptor","value":"fn (obj: &Object, prop: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyDescriptor() method returns a\n property descriptor for an own property (that is, one directly\n present on an object and not in the object's prototype chain)\n of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":109680,"byte_end":109708,"line_start":2229,"line_end":2229,"column_start":12,"column_end":40},"name":"get_own_property_descriptors","qualname":"<Object>::get_own_property_descriptors","value":"fn (obj: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyDescriptors() method returns all own\n property descriptors of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":110177,"byte_end":110199,"line_start":2237,"line_end":2237,"column_start":12,"column_end":34},"name":"get_own_property_names","qualname":"<Object>::get_own_property_names","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyNames() method returns an array of\n all properties (including non-enumerable properties except for\n those which use Symbol) found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":110599,"byte_end":110623,"line_start":2244,"line_end":2244,"column_start":12,"column_end":36},"name":"get_own_property_symbols","qualname":"<Object>::get_own_property_symbols","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertySymbols() method returns an array of\n all symbol properties found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":111035,"byte_end":111051,"line_start":2252,"line_end":2252,"column_start":12,"column_end":28},"name":"get_prototype_of","qualname":"<Object>::get_prototype_of","value":"fn (obj: &JsValue) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.getPrototypeOf() method returns the prototype\n (i.e. the value of the internal [[Prototype]] property) of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3700},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":111464,"byte_end":111480,"line_start":2260,"line_end":2260,"column_start":12,"column_end":28},"name":"has_own_property","qualname":"<Object>::has_own_property","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `hasOwnProperty()` method returns a boolean indicating whether the\n object has the specified property as its own property (as opposed to\n inheriting it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":111793,"byte_end":111795,"line_start":2266,"line_end":2266,"column_start":12,"column_end":14},"name":"is","qualname":"<Object>::is","value":"fn (value_1: &JsValue, value_2: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Object.is() method determines whether two values are the same value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3712},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":112203,"byte_end":112216,"line_start":2273,"line_end":2273,"column_start":12,"column_end":25},"name":"is_extensible","qualname":"<Object>::is_extensible","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isExtensible()` method determines if an object is extensible\n (whether it can have new properties added to it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3718},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":112523,"byte_end":112532,"line_start":2279,"line_end":2279,"column_start":12,"column_end":21},"name":"is_frozen","qualname":"<Object>::is_frozen","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isFrozen()` determines if an object is frozen.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":112846,"byte_end":112855,"line_start":2285,"line_end":2285,"column_start":12,"column_end":21},"name":"is_sealed","qualname":"<Object>::is_sealed","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isSealed()` method determines if an object is sealed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3730},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":113195,"byte_end":113210,"line_start":2292,"line_end":2292,"column_start":12,"column_end":27},"name":"is_prototype_of","qualname":"<Object>::is_prototype_of","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isPrototypeOf()` method checks if an object exists in another\n object's prototype chain.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3736},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":113585,"byte_end":113589,"line_start":2299,"line_end":2299,"column_start":12,"column_end":16},"name":"keys","qualname":"<Object>::keys","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.keys()` method returns an array of a given object's property\n names, in the same order as we get with a normal loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":113849,"byte_end":113852,"line_start":2305,"line_end":2305,"column_start":12,"column_end":15},"name":"new","qualname":"<Object>::new","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" The [`Object`] constructor creates an object wrapper.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3748},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":114269,"byte_end":114287,"line_start":2313,"line_end":2313,"column_start":12,"column_end":30},"name":"prevent_extensions","qualname":"<Object>::prevent_extensions","value":"fn (object: &Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `Object.preventExtensions()` method prevents new properties from\n ever being added to an object (i.e. prevents future extensions to the\n object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":114651,"byte_end":114673,"line_start":2320,"line_end":2320,"column_start":12,"column_end":34},"name":"property_is_enumerable","qualname":"<Object>::property_is_enumerable","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `propertyIsEnumerable()` method returns a Boolean indicating\n whether the specified property is enumerable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3760},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":115170,"byte_end":115174,"line_start":2329,"line_end":2329,"column_start":12,"column_end":16},"name":"seal","qualname":"<Object>::seal","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.seal()` method seals an object, preventing new properties\n from being added to it and marking all existing properties as\n non-configurable.  Values of present properties can still be changed as\n long as they are writable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":115604,"byte_end":115620,"line_start":2337,"line_end":2337,"column_start":12,"column_end":28},"name":"set_prototype_of","qualname":"<Object>::set_prototype_of","value":"fn (object: &Object, prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.setPrototypeOf()` method sets the prototype (i.e., the\n internal `[[Prototype]]` property) of a specified object to another\n object or `null`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3772},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":116058,"byte_end":116074,"line_start":2345,"line_end":2345,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Object>::to_locale_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the object.\n This method is meant to be overridden by derived objects for\n locale-specific purposes.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3778},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":116371,"byte_end":116380,"line_start":2351,"line_end":2351,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Object>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":116693,"byte_end":116701,"line_start":2358,"line_end":2358,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Object>::value_of","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3790},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117201,"byte_end":117207,"line_start":2367,"line_end":2367,"column_start":12,"column_end":18},"name":"values","qualname":"<Object>::values","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.values()` method returns an array of a given object's own\n enumerable property values, in the same order as that provided by a\n `for...in` loop (the difference being that a for-in loop enumerates\n properties in the prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":104089,"byte_end":104104,"line_start":2128,"line_end":2128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117456,"byte_end":117464,"line_start":2376,"line_end":2376,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Object>::try_from","value":"fn (val: &JsValue) -> Option<&Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Object` value of this JS value if it's an instance of an\n object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3918},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117867,"byte_end":117872,"line_start":2398,"line_end":2398,"column_start":14,"column_end":19},"name":"Proxy","qualname":"::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":157}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3908},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118224,"byte_end":118227,"line_start":2406,"line_end":2406,"column_start":12,"column_end":15},"name":"new","qualname":"<Proxy>::new","value":"fn (target: &JsValue, handler: &Object) -> Proxy","parent":null,"children":[],"decl_id":null,"docs":" The [`Proxy`] object is used to define custom behavior for fundamental\n operations (e.g. property lookup, assignment, enumeration, function\n invocation, etc).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118561,"byte_end":118570,"line_start":2413,"line_end":2413,"column_start":12,"column_end":21},"name":"revocable","qualname":"<Proxy>::revocable","value":"fn (target: &JsValue, handler: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Proxy.revocable()` method is used to create a revocable [`Proxy`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117797,"byte_end":117812,"line_start":2395,"line_end":2395,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":4060},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119020,"byte_end":119030,"line_start":2425,"line_end":2425,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::RangeError","value":"RangeError {  }","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":" The RangeError object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118635,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118635,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118635,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118649,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4056},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119322,"byte_end":119325,"line_start":2432,"line_end":2432,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeError>::new","value":"fn (message: &str) -> RangeError","parent":null,"children":[],"decl_id":null,"docs":" The RangeError object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118635,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":118635,"byte_end":118650,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":4212},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119756,"byte_end":119770,"line_start":2444,"line_end":2444,"column_start":14,"column_end":28},"name":"ReferenceError","qualname":"::ReferenceError","value":"ReferenceError {  }","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":" The ReferenceError object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119377,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119377,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119377,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119391,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4208},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120056,"byte_end":120059,"line_start":2451,"line_end":2451,"column_start":12,"column_end":15},"name":"new","qualname":"<ReferenceError>::new","value":"fn (message: &str) -> ReferenceError","parent":null,"children":[],"decl_id":null,"docs":" The ReferenceError object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119377,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":119377,"byte_end":119392,"line_start":2436,"line_end":2436,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120130,"byte_end":120137,"line_start":2455,"line_end":2455,"column_start":9,"column_end":16},"name":"Reflect","qualname":"::Reflect","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":4232},{"krate":0,"index":4236},{"krate":0,"index":4240},{"krate":0,"index":4244},{"krate":0,"index":4248},{"krate":0,"index":4252},{"krate":0,"index":4256},{"krate":0,"index":4260},{"krate":0,"index":4264},{"krate":0,"index":4268},{"krate":0,"index":4272},{"krate":0,"index":4276},{"krate":0,"index":4280},{"krate":0,"index":4284},{"krate":0,"index":4288},{"krate":0,"index":4292},{"krate":0,"index":4296},{"krate":0,"index":4300},{"krate":0,"index":4304}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120097,"byte_end":120121,"line_start":2454,"line_end":2454,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":4232},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120534,"byte_end":120539,"line_start":2466,"line_end":2466,"column_start":16,"column_end":21},"name":"apply","qualname":"::Reflect::apply","value":"fn (target: &Function, this_argument: &JsValue, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.apply()` method calls a target function with\n arguments as specified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4236},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":121139,"byte_end":121148,"line_start":2478,"line_end":2478,"column_start":16,"column_end":25},"name":"construct","qualname":"::Reflect::construct","value":"fn (target: &Function, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4240},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":121697,"byte_end":121722,"line_start":2486,"line_end":2486,"column_start":16,"column_end":41},"name":"construct_with_new_target","qualname":"::Reflect::construct_with_new_target","value":"fn (target: &Function, arguments_list: &Array, new_target: &Function) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4244},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":122239,"byte_end":122254,"line_start":2497,"line_end":2497,"column_start":16,"column_end":31},"name":"define_property","qualname":"::Reflect::define_property","value":"fn (target: &Object, property_key: &JsValue, attributes: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.defineProperty()` method is like\n `Object.defineProperty()` but returns a `Boolean`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4248},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":122783,"byte_end":122798,"line_start":2508,"line_end":2508,"column_start":16,"column_end":31},"name":"delete_property","qualname":"::Reflect::delete_property","value":"fn (target: &Object, key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.deleteProperty()` method allows to delete\n properties.  It is like the `delete` operator as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4252},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":123208,"byte_end":123211,"line_start":2515,"line_end":2515,"column_start":16,"column_end":19},"name":"get","qualname":"::Reflect::get","value":"fn (target: &JsValue, key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.get()` method works like getting a property from\n an object (`target[propertyKey]`) as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4256},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":123470,"byte_end":123477,"line_start":2519,"line_end":2519,"column_start":16,"column_end":23},"name":"get_f64","qualname":"::Reflect::get_f64","value":"fn (target: &JsValue, key: f64) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::get`](#method.get) except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4260},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":123730,"byte_end":123737,"line_start":2523,"line_end":2523,"column_start":16,"column_end":23},"name":"get_u32","qualname":"::Reflect::get_u32","value":"fn (target: &JsValue, key: u32) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::get`](#method.get) except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4264},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":124309,"byte_end":124336,"line_start":2531,"line_end":2531,"column_start":16,"column_end":43},"name":"get_own_property_descriptor","qualname":"::Reflect::get_own_property_descriptor","value":"fn (target: &Object, property_key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getOwnPropertyDescriptor()` method is similar to\n `Object.getOwnPropertyDescriptor()`. It returns a property descriptor\n of the given property if it exists on the object, `undefined` otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4268},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":124945,"byte_end":124961,"line_start":2543,"line_end":2543,"column_start":16,"column_end":32},"name":"get_prototype_of","qualname":"::Reflect::get_prototype_of","value":"fn (target: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getPrototypeOf()` method is almost the same\n method as `Object.getPrototypeOf()`. It returns the prototype\n (i.e. the value of the internal `[[Prototype]]` property) of\n the specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4272},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":125317,"byte_end":125320,"line_start":2550,"line_end":2550,"column_start":16,"column_end":19},"name":"has","qualname":"::Reflect::has","value":"fn (target: &JsValue, property_key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.has()` method works like the in operator as a\n function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4276},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":125867,"byte_end":125880,"line_start":2558,"line_end":2558,"column_start":16,"column_end":29},"name":"is_extensible","qualname":"::Reflect::is_extensible","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.isExtensible()` method determines if an object is\n extensible (whether it can have new properties added to it). It is\n similar to `Object.isExtensible()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4280},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":126277,"byte_end":126285,"line_start":2565,"line_end":2565,"column_start":16,"column_end":24},"name":"own_keys","qualname":"::Reflect::own_keys","value":"fn (target: &JsValue) -> Result<Array, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.ownKeys()` method returns an array of the\n target object's own property keys.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4284},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":126861,"byte_end":126879,"line_start":2574,"line_end":2574,"column_start":16,"column_end":34},"name":"prevent_extensions","qualname":"::Reflect::prevent_extensions","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.preventExtensions()` method prevents new\n properties from ever being added to an object (i.e. prevents\n future extensions to the object). It is similar to\n `Object.preventExtensions()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4288},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":127234,"byte_end":127237,"line_start":2581,"line_end":2581,"column_start":16,"column_end":19},"name":"set","qualname":"::Reflect::set","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4292},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":127566,"byte_end":127573,"line_start":2589,"line_end":2589,"column_start":16,"column_end":23},"name":"set_f64","qualname":"::Reflect::set_f64","value":"fn (target: &JsValue, property_key: f64, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::set`](#method.set) except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4296},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":127896,"byte_end":127903,"line_start":2597,"line_end":2597,"column_start":16,"column_end":23},"name":"set_u32","qualname":"::Reflect::set_u32","value":"fn (target: &JsValue, property_key: u32, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::set`](#method.set) except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4300},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":128357,"byte_end":128374,"line_start":2608,"line_end":2608,"column_start":16,"column_end":33},"name":"set_with_receiver","qualname":"::Reflect::set_with_receiver","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue, receiver: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":4304},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129047,"byte_end":129063,"line_start":2622,"line_end":2622,"column_start":16,"column_end":32},"name":"set_prototype_of","qualname":"::Reflect::set_prototype_of","value":"fn (target: &Object, prototype: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.setPrototypeOf()` method is the same\n method as `Object.setPrototypeOf()`. It sets the prototype\n (i.e., the internal `[[Prototype]]` property) of a specified\n object to another object or to null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":120178,"byte_end":120193,"line_start":2459,"line_end":2459,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4590},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129270,"byte_end":129276,"line_start":2631,"line_end":2631,"column_start":14,"column_end":20},"name":"RegExp","qualname":"::RegExp","value":"RegExp {  }","parent":null,"children":[{"krate":0,"index":175}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129161,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4424},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129568,"byte_end":129572,"line_start":2638,"line_end":2638,"column_start":12,"column_end":16},"name":"exec","qualname":"<RegExp>::exec","value":"fn (&self, text: &str) -> Option<Array>","parent":null,"children":[],"decl_id":null,"docs":" The exec() method executes a search for a match in a specified\n string. Returns a result array, or null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4430},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129915,"byte_end":129920,"line_start":2645,"line_end":2645,"column_start":12,"column_end":17},"name":"flags","qualname":"<RegExp>::flags","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The flags property returns a string consisting of the flags of\n the current regular expression object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4436},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":130325,"byte_end":130331,"line_start":2653,"line_end":2653,"column_start":12,"column_end":18},"name":"global","qualname":"<RegExp>::global","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global property indicates whether or not the \"g\" flag is\n used with the regular expression. global is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4442},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":130766,"byte_end":130777,"line_start":2661,"line_end":2661,"column_start":12,"column_end":23},"name":"ignore_case","qualname":"<RegExp>::ignore_case","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The ignoreCase property indicates whether or not the \"i\" flag\n is used with the regular expression. ignoreCase is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4448},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":131221,"byte_end":131226,"line_start":2670,"line_end":2670,"column_start":12,"column_end":17},"name":"input","qualname":"<RegExp>::input","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard input property is a static property of\n regular expressions that contains the string against which a\n regular expression is matched. RegExp.$_ is an alias for this\n property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4454},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":131603,"byte_end":131613,"line_start":2677,"line_end":2677,"column_start":12,"column_end":22},"name":"last_index","qualname":"<RegExp>::last_index","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4460},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":131998,"byte_end":132012,"line_start":2684,"line_end":2684,"column_start":12,"column_end":26},"name":"set_last_index","qualname":"<RegExp>::set_last_index","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4466},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":132466,"byte_end":132476,"line_start":2692,"line_end":2692,"column_start":12,"column_end":22},"name":"last_match","qualname":"<RegExp>::last_match","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastMatch property is a static and read-only\n property of regular expressions that contains the last matched\n characters. RegExp.$& is an alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4472},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":132944,"byte_end":132954,"line_start":2701,"line_end":2701,"column_start":12,"column_end":22},"name":"last_paren","qualname":"<RegExp>::last_paren","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastParen property is a static and read-only\n property of regular expressions that contains the last\n parenthesized substring match, if any. RegExp.$+ is an alias\n for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4478},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":133427,"byte_end":133439,"line_start":2710,"line_end":2710,"column_start":12,"column_end":24},"name":"left_context","qualname":"<RegExp>::left_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard leftContext property is a static and\n read-only property of regular expressions that contains the\n substring preceding the most recent match. RegExp.$` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4484},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":133840,"byte_end":133849,"line_start":2718,"line_end":2718,"column_start":12,"column_end":21},"name":"multiline","qualname":"<RegExp>::multiline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The multiline property indicates whether or not the \"m\" flag\n is used with the regular expression. multiline is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4490},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134276,"byte_end":134278,"line_start":2726,"line_end":2726,"column_start":12,"column_end":14},"name":"n1","qualname":"<RegExp>::n1","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties\n are static and read-only properties of regular expressions\n that contain parenthesized substring matches.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134376,"byte_end":134378,"line_start":2728,"line_end":2728,"column_start":12,"column_end":14},"name":"n2","qualname":"<RegExp>::n2","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134476,"byte_end":134478,"line_start":2730,"line_end":2730,"column_start":12,"column_end":14},"name":"n3","qualname":"<RegExp>::n3","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4508},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134576,"byte_end":134578,"line_start":2732,"line_end":2732,"column_start":12,"column_end":14},"name":"n4","qualname":"<RegExp>::n4","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4514},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134676,"byte_end":134678,"line_start":2734,"line_end":2734,"column_start":12,"column_end":14},"name":"n5","qualname":"<RegExp>::n5","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4520},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134776,"byte_end":134778,"line_start":2736,"line_end":2736,"column_start":12,"column_end":14},"name":"n6","qualname":"<RegExp>::n6","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4526},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134876,"byte_end":134878,"line_start":2738,"line_end":2738,"column_start":12,"column_end":14},"name":"n7","qualname":"<RegExp>::n7","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4532},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":134976,"byte_end":134978,"line_start":2740,"line_end":2740,"column_start":12,"column_end":14},"name":"n8","qualname":"<RegExp>::n8","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4538},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":135076,"byte_end":135078,"line_start":2742,"line_end":2742,"column_start":12,"column_end":14},"name":"n9","qualname":"<RegExp>::n9","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4544},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":135365,"byte_end":135368,"line_start":2748,"line_end":2748,"column_start":12,"column_end":15},"name":"new","qualname":"<RegExp>::new","value":"fn (pattern: &str, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":" The RegExp constructor creates a regular expression object for matching text with a pattern.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4550},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":135452,"byte_end":135462,"line_start":2750,"line_end":2750,"column_start":12,"column_end":22},"name":"new_regexp","qualname":"<RegExp>::new_regexp","value":"fn (pattern: &RegExp, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4556},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":135965,"byte_end":135978,"line_start":2759,"line_end":2759,"column_start":12,"column_end":25},"name":"right_context","qualname":"<RegExp>::right_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard rightContext property is a static and\n read-only property of regular expressions that contains the\n substring following the most recent match. RegExp.$' is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4562},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":136360,"byte_end":136366,"line_start":2767,"line_end":2767,"column_start":12,"column_end":18},"name":"source","qualname":"<RegExp>::source","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The source property returns a String containing the source\n text of the regexp object, and it doesn't contain the two\n forward slashes on both sides and any flags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4568},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":136861,"byte_end":136867,"line_start":2777,"line_end":2777,"column_start":12,"column_end":18},"name":"sticky","qualname":"<RegExp>::sticky","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The sticky property reflects whether or not the search is\n sticky (searches in strings only from the index indicated by\n the lastIndex property of this regular expression). sticky is\n a read-only property of an individual regular expression\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4574},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137210,"byte_end":137214,"line_start":2785,"line_end":2785,"column_start":12,"column_end":16},"name":"test","qualname":"<RegExp>::test","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The test() method executes a search for a match between a\n regular expression and a specified string. Returns true or\n false.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4580},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137537,"byte_end":137546,"line_start":2792,"line_end":2792,"column_start":12,"column_end":21},"name":"to_string","qualname":"<RegExp>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the\n regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4586},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137952,"byte_end":137959,"line_start":2800,"line_end":2800,"column_start":12,"column_end":19},"name":"unicode","qualname":"<RegExp>::unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The unicode property indicates whether or not the \"u\" flag is\n used with a regular expression. unicode is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":129147,"byte_end":129162,"line_start":2627,"line_end":2627,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":4766},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":138117,"byte_end":138120,"line_start":2808,"line_end":2808,"column_start":14,"column_end":17},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":138008,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4726},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":138400,"byte_end":138403,"line_start":2815,"line_end":2815,"column_start":12,"column_end":15},"name":"add","qualname":"<Set>::add","value":"fn (&self, value: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new element with a specified value to the\n end of a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4732},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":138682,"byte_end":138687,"line_start":2821,"line_end":2821,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4738},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":138961,"byte_end":138967,"line_start":2828,"line_end":2828,"column_start":12,"column_end":18},"name":"delete","qualname":"<Set>::delete","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4744},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":139320,"byte_end":139328,"line_start":2835,"line_end":2835,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Set>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue, Set)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The forEach() method executes a provided function once for each value\n in the Set object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4750},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":139700,"byte_end":139703,"line_start":2842,"line_end":2842,"column_start":12,"column_end":15},"name":"has","qualname":"<Set>::has","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified value exists in a [`Set`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4756},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140033,"byte_end":140036,"line_start":2849,"line_end":2849,"column_start":12,"column_end":15},"name":"new","qualname":"<Set>::new","value":"fn (init: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The [`Set`] object lets you store unique values of any type, whether\n primitive values or object references.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4762},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140340,"byte_end":140344,"line_start":2856,"line_end":2856,"column_start":12,"column_end":16},"name":"size","qualname":"<Set>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size accessor property returns the number of elements in a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":137994,"byte_end":138009,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4788},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140979,"byte_end":140986,"line_start":2870,"line_end":2870,"column_start":12,"column_end":19},"name":"entries","qualname":"<Set>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains an\n array of [value, value] for each element in the Set object, in insertion\n order. For Set objects there is no key like in Map objects. However, to\n keep the API similar to the Map object, each entry has the same value\n for its key and value here, so that an array [value, value] is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4794},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141351,"byte_end":141355,"line_start":2878,"line_end":2878,"column_start":12,"column_end":16},"name":"keys","qualname":"<Set>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method is an alias for this method (for similarity with\n Map objects); it behaves exactly the same and returns values\n of Set elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4800},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141697,"byte_end":141703,"line_start":2885,"line_end":2885,"column_start":12,"column_end":18},"name":"values","qualname":"<Set>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Set object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":140383,"byte_end":140398,"line_start":2860,"line_end":2860,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":4936},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142195,"byte_end":142206,"line_start":2898,"line_end":2898,"column_start":14,"column_end":25},"name":"SyntaxError","qualname":"::SyntaxError","value":"SyntaxError {  }","parent":null,"children":[{"krate":0,"index":187}],"decl_id":null,"docs":" A SyntaxError is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141746,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141746,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141746,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141760,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4932},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142562,"byte_end":142565,"line_start":2906,"line_end":2906,"column_start":12,"column_end":15},"name":"new","qualname":"<SyntaxError>::new","value":"fn (message: &str) -> SyntaxError","parent":null,"children":[],"decl_id":null,"docs":" A SyntaxError is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141746,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141746,"byte_end":141761,"line_start":2889,"line_end":2889,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5088},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142980,"byte_end":142989,"line_start":2918,"line_end":2918,"column_start":14,"column_end":23},"name":"TypeError","qualname":"::TypeError","value":"TypeError {  }","parent":null,"children":[{"krate":0,"index":193}],"decl_id":null,"docs":" The TypeError object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142613,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142613,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142613,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142627,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5084},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143263,"byte_end":143266,"line_start":2925,"line_end":2925,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeError>::new","value":"fn (message: &str) -> TypeError","parent":null,"children":[],"decl_id":null,"docs":" The TypeError object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142613,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142613,"byte_end":142628,"line_start":2910,"line_end":2910,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5240},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143715,"byte_end":143723,"line_start":2937,"line_end":2937,"column_start":14,"column_end":22},"name":"UriError","qualname":"::UriError","value":"UriError {  }","parent":null,"children":[{"krate":0,"index":199}],"decl_id":null,"docs":" The URIError object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143311,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143311,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143311,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143325,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5236},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144037,"byte_end":144040,"line_start":2944,"line_end":2944,"column_start":12,"column_end":15},"name":"new","qualname":"<UriError>::new","value":"fn (message: &str) -> UriError","parent":null,"children":[],"decl_id":null,"docs":" The URIError object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143311,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":143311,"byte_end":143326,"line_start":2929,"line_end":2929,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5404},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144206,"byte_end":144213,"line_start":2952,"line_end":2952,"column_start":14,"column_end":21},"name":"WeakMap","qualname":"::WeakMap","value":"WeakMap {  }","parent":null,"children":[{"krate":0,"index":205}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144097,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5376},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144575,"byte_end":144578,"line_start":2960,"line_end":2960,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakMap>::new","value":"fn () -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The [`WeakMap`] object is a collection of key/value pairs in which the\n keys are weakly referenced.  The keys must be objects and the values can\n be arbitrary values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5382},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144906,"byte_end":144909,"line_start":2967,"line_end":2967,"column_start":12,"column_end":15},"name":"set","qualname":"<WeakMap>::set","value":"fn (&self, key: &Object, value: &JsValue) -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method sets the value for the key in the [`WeakMap`] object.\n Returns the [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5388},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145234,"byte_end":145237,"line_start":2974,"line_end":2974,"column_start":12,"column_end":15},"name":"get","qualname":"<WeakMap>::get","value":"fn (&self, key: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The get() method returns a specified by key element\n from a [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5394},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145597,"byte_end":145600,"line_start":2981,"line_end":2981,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakMap>::has","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists in the [`WeakMap`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5400},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145908,"byte_end":145914,"line_start":2988,"line_end":2988,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakMap>::delete","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`WeakMap`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":144083,"byte_end":144098,"line_start":2948,"line_end":2948,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5562},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":146091,"byte_end":146098,"line_start":2996,"line_end":2996,"column_start":14,"column_end":21},"name":"WeakSet","qualname":"::WeakSet","value":"WeakSet {  }","parent":null,"children":[{"krate":0,"index":211}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145982,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5540},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":146352,"byte_end":146355,"line_start":3002,"line_end":3002,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakSet>::new","value":"fn () -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `WeakSet` object lets you store weakly held objects in a collection.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5546},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":146650,"byte_end":146653,"line_start":3009,"line_end":3009,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakSet>::has","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an object exists\n in a WeakSet or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5552},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":146945,"byte_end":146948,"line_start":3015,"line_end":3015,"column_start":12,"column_end":15},"name":"add","qualname":"<WeakSet>::add","value":"fn (&self, value: &Object) -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new object to the end of a WeakSet object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5558},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147257,"byte_end":147263,"line_start":3022,"line_end":3022,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakSet>::delete","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a WeakSet\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":145968,"byte_end":145983,"line_start":2992,"line_end":2992,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147341,"byte_end":147352,"line_start":3026,"line_end":3026,"column_start":9,"column_end":20},"name":"WebAssembly","qualname":"::WebAssembly","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":5582},{"krate":0,"index":5586},{"krate":0,"index":5590},{"krate":0,"index":5594},{"krate":0,"index":5598},{"krate":0,"index":5722},{"krate":0,"index":5738},{"krate":0,"index":5734},{"krate":0,"index":5728},{"krate":0,"index":5724},{"krate":0,"index":5602},{"krate":0,"index":5704},{"krate":0,"index":5710},{"krate":0,"index":5716},{"krate":0,"index":5868},{"krate":0,"index":5884},{"krate":0,"index":5880},{"krate":0,"index":5874},{"krate":0,"index":5870},{"krate":0,"index":5742},{"krate":0,"index":5844},{"krate":0,"index":5850},{"krate":0,"index":5856},{"krate":0,"index":5862},{"krate":0,"index":6008},{"krate":0,"index":6024},{"krate":0,"index":6020},{"krate":0,"index":6014},{"krate":0,"index":6010},{"krate":0,"index":5888},{"krate":0,"index":5990},{"krate":0,"index":5996},{"krate":0,"index":6002},{"krate":0,"index":6148},{"krate":0,"index":6164},{"krate":0,"index":6160},{"krate":0,"index":6154},{"krate":0,"index":6150},{"krate":0,"index":6028},{"krate":0,"index":6130},{"krate":0,"index":6136},{"krate":0,"index":6142},{"krate":0,"index":6306},{"krate":0,"index":6322},{"krate":0,"index":6318},{"krate":0,"index":6312},{"krate":0,"index":6308},{"krate":0,"index":6168},{"krate":0,"index":6270},{"krate":0,"index":6276},{"krate":0,"index":6282},{"krate":0,"index":6288},{"krate":0,"index":6294},{"krate":0,"index":6300},{"krate":0,"index":6470},{"krate":0,"index":6486},{"krate":0,"index":6482},{"krate":0,"index":6476},{"krate":0,"index":6472},{"krate":0,"index":6326},{"krate":0,"index":6428},{"krate":0,"index":6434},{"krate":0,"index":6440},{"krate":0,"index":6446},{"krate":0,"index":6452},{"krate":0,"index":6458},{"krate":0,"index":6464},{"krate":0,"index":6622},{"krate":0,"index":6638},{"krate":0,"index":6634},{"krate":0,"index":6628},{"krate":0,"index":6624},{"krate":0,"index":6490},{"krate":0,"index":6592},{"krate":0,"index":6598},{"krate":0,"index":6604},{"krate":0,"index":6610},{"krate":0,"index":6616}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147308,"byte_end":147332,"line_start":3025,"line_end":3025,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":5582},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147956,"byte_end":147963,"line_start":3039,"line_end":3039,"column_start":16,"column_end":23},"name":"compile","qualname":"::WebAssembly::compile","value":"fn (buffer_source: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" `The WebAssembly.compile()` function compiles a `WebAssembly.Module`\n from WebAssembly binary code.  This function is useful if it is\n necessary to a compile a module before it can be instantiated\n (otherwise, the `WebAssembly.instantiate()` function should be used).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5586},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":148363,"byte_end":148381,"line_start":3046,"line_end":3046,"column_start":16,"column_end":34},"name":"instantiate_buffer","qualname":"::WebAssembly::instantiate_buffer","value":"fn (buffer: &[u8], imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5590},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":148789,"byte_end":148807,"line_start":3053,"line_end":3053,"column_start":16,"column_end":34},"name":"instantiate_module","qualname":"::WebAssembly::instantiate_module","value":"fn (module: &Module, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5594},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149364,"byte_end":149385,"line_start":3062,"line_end":3062,"column_start":16,"column_end":37},"name":"instantiate_streaming","qualname":"::WebAssembly::instantiate_streaming","value":"fn (response: &Promise, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiateStreaming()` function compiles and\n instantiates a WebAssembly module directly from a streamed\n underlying source. This is the most efficient, optimized way to load\n wasm code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":5598},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149870,"byte_end":149878,"line_start":3070,"line_end":3070,"column_start":16,"column_end":24},"name":"validate","qualname":"::WebAssembly::validate","value":"fn (buffer_source: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.validate()` function validates a given typed\n array of WebAssembly binary code, returning whether the bytes\n form a valid wasm module (`true`) or not (`false`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":147397,"byte_end":147412,"line_start":3030,"line_end":3030,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":5722},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":150488,"byte_end":150500,"line_start":3083,"line_end":3083,"column_start":18,"column_end":30},"name":"CompileError","qualname":"::WebAssembly::CompileError","value":"CompileError {  }","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149973,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149973,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149973,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149987,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5718},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":150932,"byte_end":150935,"line_start":3091,"line_end":3091,"column_start":16,"column_end":19},"name":"new","qualname":"<CompileError>::new","value":"fn (message: &str) -> CompileError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149973,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":149973,"byte_end":149988,"line_start":3074,"line_end":3074,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":5868},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151585,"byte_end":151593,"line_start":3105,"line_end":3105,"column_start":18,"column_end":26},"name":"Instance","qualname":"::WebAssembly::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":223}],"decl_id":null,"docs":" A `WebAssembly.Instance` object is a stateful, executable instance\n of a `WebAssembly.Module`. Instance objects contain all the exported\n WebAssembly functions that allow calling into WebAssembly code from\n JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151021,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5858},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152129,"byte_end":152132,"line_start":3114,"line_end":3114,"column_start":16,"column_end":19},"name":"new","qualname":"<Instance>::new","value":"fn (module: &Module, imports: &Object) -> Result<Instance, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Instance()` constructor function can be called to\n synchronously instantiate a given `WebAssembly.Module`\n object. However, the primary way to get an `Instance` is through the\n asynchronous `WebAssembly.instantiateStreaming()` function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5864},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152726,"byte_end":152733,"line_start":3123,"line_end":3123,"column_start":16,"column_end":23},"name":"exports","qualname":"<Instance>::exports","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `exports` readonly property of the `WebAssembly.Instance` object\n prototype returns an object containing as its members all the\n functions exported from the WebAssembly module instance, to allow\n them to be accessed and used by JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":151007,"byte_end":151022,"line_start":3095,"line_end":3095,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6008},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153332,"byte_end":153341,"line_start":3136,"line_end":3136,"column_start":18,"column_end":27},"name":"LinkError","qualname":"::WebAssembly::LinkError","value":"LinkError {  }","parent":null,"children":[{"krate":0,"index":229}],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152802,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152802,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152802,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152816,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6004},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153788,"byte_end":153791,"line_start":3144,"line_end":3144,"column_start":16,"column_end":19},"name":"new","qualname":"<LinkError>::new","value":"fn (message: &str) -> LinkError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152802,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":152802,"byte_end":152817,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6148},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154377,"byte_end":154389,"line_start":3157,"line_end":3157,"column_start":18,"column_end":30},"name":"RuntimeError","qualname":"::WebAssembly::RuntimeError","value":"RuntimeError {  }","parent":null,"children":[{"krate":0,"index":235}],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153864,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153864,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153864,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153878,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6144},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154819,"byte_end":154822,"line_start":3165,"line_end":3165,"column_start":16,"column_end":19},"name":"new","qualname":"<RuntimeError>::new","value":"fn (message: &str) -> RuntimeError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153864,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":153864,"byte_end":153879,"line_start":3148,"line_end":3148,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6306},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":155429,"byte_end":155435,"line_start":3178,"line_end":3178,"column_start":18,"column_end":24},"name":"Module","qualname":"::WebAssembly::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":241}],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154906,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6284},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":155895,"byte_end":155898,"line_start":3186,"line_end":3186,"column_start":16,"column_end":19},"name":"new","qualname":"<Module>::new","value":"fn (buffer_source: &JsValue) -> Result<Module, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6290},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":156415,"byte_end":156430,"line_start":3194,"line_end":3194,"column_start":16,"column_end":31},"name":"custom_sections","qualname":"<Module>::custom_sections","value":"fn (module: &Module, sectionName: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.customSections()` function returns a copy of the\n contents of all custom sections in the given module with the given\n string name.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6296},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":156878,"byte_end":156885,"line_start":3201,"line_end":3201,"column_start":16,"column_end":23},"name":"exports","qualname":"<Module>::exports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.exports()` function returns an array containing\n descriptions of all the declared exports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6302},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157314,"byte_end":157321,"line_start":3208,"line_end":3208,"column_start":16,"column_end":23},"name":"imports","qualname":"<Module>::imports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.imports()` function returns an array containing\n descriptions of all the declared imports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":154892,"byte_end":154907,"line_start":3169,"line_end":3169,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6470},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157823,"byte_end":157828,"line_start":3220,"line_end":3220,"column_start":18,"column_end":23},"name":"Table","qualname":"::WebAssembly::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157399,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6442},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":158189,"byte_end":158192,"line_start":3227,"line_end":3227,"column_start":16,"column_end":19},"name":"new","qualname":"<Table>::new","value":"fn (table_descriptor: &Object) -> Result<Table, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6448},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":158659,"byte_end":158665,"line_start":3235,"line_end":3235,"column_start":16,"column_end":22},"name":"length","qualname":"<Table>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` prototype property of the `WebAssembly.Table` object\n returns the length of the table, i.e. the number of elements in the\n table.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6454},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":159064,"byte_end":159067,"line_start":3242,"line_end":3242,"column_start":16,"column_end":19},"name":"get","qualname":"<Table>::get","value":"fn (&self, index: u32) -> Result<Function, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `get()` prototype method of the `WebAssembly.Table()` object\n retrieves a function reference stored at a given index.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6460},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":159534,"byte_end":159538,"line_start":3250,"line_end":3250,"column_start":16,"column_end":20},"name":"grow","qualname":"<Table>::grow","value":"fn (&self, additional_capacity: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` prototype method of the `WebAssembly.Table` object\n increases the size of the `Table` instance by a specified number of\n elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6466},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":159988,"byte_end":159991,"line_start":3257,"line_end":3257,"column_start":16,"column_end":19},"name":"set","qualname":"<Table>::set","value":"fn (&self, index: u32, function: &Function) -> Result<(), JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `set()` prototype method of the `WebAssembly.Table` object mutates a\n reference stored at a given index to a different value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157385,"byte_end":157400,"line_start":3212,"line_end":3212,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6622},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160400,"byte_end":160406,"line_start":3266,"line_end":3266,"column_start":18,"column_end":24},"name":"Memory","qualname":"::WebAssembly::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":253}],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160114,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":19,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6606},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":161013,"byte_end":161016,"line_start":3277,"line_end":3277,"column_start":16,"column_end":19},"name":"new","qualname":"<Memory>::new","value":"fn (descriptor: &Object) -> Result<Memory, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Memory()` constructor creates a new `Memory` object\n which is a resizable `ArrayBuffer` that holds the raw bytes of\n memory accessed by a WebAssembly `Instance`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6612},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":161396,"byte_end":161402,"line_start":3284,"line_end":3284,"column_start":16,"column_end":22},"name":"buffer","qualname":"<Memory>::buffer","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" An accessor property that returns the buffer contained in the\n memory.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6618},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":161967,"byte_end":161971,"line_start":3295,"line_end":3295,"column_start":16,"column_end":20},"name":"grow","qualname":"<Memory>::grow","value":"fn (&self, pages: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` protoype method of the `Memory` object increases the\n size of the memory instance by a specified number of WebAssembly\n pages.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":160100,"byte_end":160115,"line_start":3261,"line_end":3261,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162323,"byte_end":162327,"line_start":3304,"line_end":3304,"column_start":9,"column_end":13},"name":"JSON","qualname":"::JSON","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":6642},{"krate":0,"index":6646},{"krate":0,"index":6650},{"krate":0,"index":6654}],"decl_id":null,"docs":" The `JSON` object contains methods for parsing [JavaScript Object\n Notation (JSON)](https://json.org/) and converting values to JSON. It\n can't be called or constructed, and aside from its two method\n properties, it has no interesting functionality of its own.\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162290,"byte_end":162314,"line_start":3303,"line_end":3303,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":6642},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162743,"byte_end":162748,"line_start":3315,"line_end":3315,"column_start":16,"column_end":21},"name":"parse","qualname":"::JSON::parse","value":"fn (text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.parse()` method parses a JSON string, constructing the\n JavaScript value or object described by the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":6646},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":163087,"byte_end":163096,"line_start":3321,"line_end":3321,"column_start":16,"column_end":25},"name":"stringify","qualname":"::JSON::stringify","value":"fn (obj: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":6650},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":163899,"byte_end":163922,"line_start":3333,"line_end":3333,"column_start":16,"column_end":39},"name":"stringify_with_replacer","qualname":"::JSON::stringify_with_replacer","value":"fn (obj: &JsValue, replacer: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":6654},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165439,"byte_end":165472,"line_start":3357,"line_end":3357,"column_start":16,"column_end":49},"name":"stringify_with_replacer_and_space","qualname":"::JSON::stringify_with_replacer_and_space","value":"fn (obj: &JsValue, replacer: &JsValue, space: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":162365,"byte_end":162380,"line_start":3308,"line_end":3308,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7134},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165791,"byte_end":165799,"line_start":3371,"line_end":3371,"column_start":14,"column_end":22},"name":"JsString","qualname":"::JsString","value":"JsString {  }","parent":null,"children":[{"krate":0,"index":259}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165638,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":15,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6776},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":166104,"byte_end":166110,"line_start":3378,"line_end":3378,"column_start":12,"column_end":18},"name":"length","qualname":"<JsString>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of a String object indicates the length of a string,\n in UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6782},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":166521,"byte_end":166528,"line_start":3386,"line_end":3386,"column_start":12,"column_end":19},"name":"char_at","qualname":"<JsString>::char_at","value":"fn (&self, index: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The String object's `charAt()` method returns a new string consisting of\n the single UTF-16 code unit located at the specified offset into the\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6788},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":167355,"byte_end":167367,"line_start":3400,"line_end":3400,"column_start":12,"column_end":24},"name":"char_code_at","qualname":"<JsString>::char_code_at","value":"fn (&self, index: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `charCodeAt()` method returns an integer between 0 and 65535\n representing the UTF-16 code unit at the given index (the UTF-16 code\n unit matches the Unicode code point for code points representable in a\n single UTF-16 code unit, but might also be the first code unit of a\n surrogate pair for code points not representable in a single UTF-16 code\n unit, e.g. Unicode code points > 0x10000).  If you want the entire code\n point value, use `codePointAt()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6794},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":167738,"byte_end":167751,"line_start":3407,"line_end":3407,"column_start":12,"column_end":25},"name":"code_point_at","qualname":"<JsString>::code_point_at","value":"fn (&self, pos: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `codePointAt()` method returns a non-negative integer that is the\n Unicode code point value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6800},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":168104,"byte_end":168110,"line_start":3414,"line_end":3414,"column_start":12,"column_end":18},"name":"concat","qualname":"<JsString>::concat","value":"fn (&self, string_2: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method concatenates the string arguments to the calling\n string and returns a new string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6806},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":168530,"byte_end":168539,"line_start":3421,"line_end":3421,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<JsString>::ends_with","value":"fn (&self, search_string: &str, length: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The endsWith() method determines whether a string ends with the characters of a\n specified string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6812},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":169380,"byte_end":169394,"line_start":3437,"line_end":3437,"column_start":12,"column_end":26},"name":"from_char_code","qualname":"<JsString>::from_char_code","value":"fn (char_codes: &[u16]) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The static String.fromCharCode() method returns a string created from\n the specified sequence of UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6818},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":169664,"byte_end":169679,"line_start":3441,"line_end":3441,"column_start":12,"column_end":27},"name":"from_char_code1","qualname":"<JsString>::from_char_code1","value":"fn (a: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6824},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":169937,"byte_end":169952,"line_start":3445,"line_end":3445,"column_start":12,"column_end":27},"name":"from_char_code2","qualname":"<JsString>::from_char_code2","value":"fn (a: u32, b: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6830},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":170218,"byte_end":170233,"line_start":3449,"line_end":3449,"column_start":12,"column_end":27},"name":"from_char_code3","qualname":"<JsString>::from_char_code3","value":"fn (a: u32, b: u32, c: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6836},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":170507,"byte_end":170522,"line_start":3453,"line_end":3453,"column_start":12,"column_end":27},"name":"from_char_code4","qualname":"<JsString>::from_char_code4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6842},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":170804,"byte_end":170819,"line_start":3457,"line_end":3457,"column_start":12,"column_end":27},"name":"from_char_code5","qualname":"<JsString>::from_char_code5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6848},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":171554,"byte_end":171569,"line_start":3473,"line_end":3473,"column_start":12,"column_end":27},"name":"from_code_point","qualname":"<JsString>::from_code_point","value":"fn (code_points: &[u32]) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static String.fromCodePoint() method returns a string created by\n using the specified sequence of code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6854},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":171866,"byte_end":171882,"line_start":3477,"line_end":3477,"column_start":12,"column_end":28},"name":"from_code_point1","qualname":"<JsString>::from_code_point1","value":"fn (a: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6860},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":172166,"byte_end":172182,"line_start":3481,"line_end":3481,"column_start":12,"column_end":28},"name":"from_code_point2","qualname":"<JsString>::from_code_point2","value":"fn (a: u32, b: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6866},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":172474,"byte_end":172490,"line_start":3485,"line_end":3485,"column_start":12,"column_end":28},"name":"from_code_point3","qualname":"<JsString>::from_code_point3","value":"fn (a: u32, b: u32, c: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6872},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":172790,"byte_end":172806,"line_start":3489,"line_end":3489,"column_start":12,"column_end":28},"name":"from_code_point4","qualname":"<JsString>::from_code_point4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6878},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":173114,"byte_end":173130,"line_start":3493,"line_end":3493,"column_start":12,"column_end":28},"name":"from_code_point5","qualname":"<JsString>::from_code_point5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6884},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":173542,"byte_end":173550,"line_start":3500,"line_end":3500,"column_start":12,"column_end":20},"name":"includes","qualname":"<JsString>::includes","value":"fn (&self, search_string: &str, position: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether one string may be found\n within another string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6890},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":174045,"byte_end":174053,"line_start":3508,"line_end":3508,"column_start":12,"column_end":20},"name":"index_of","qualname":"<JsString>::index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the index within the calling String\n object of the first occurrence of the specified value, starting the\n search at fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6896},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":174561,"byte_end":174574,"line_start":3516,"line_end":3516,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<JsString>::last_index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the index within the calling String\n object of the last occurrence of the specified value, searching\n backwards from fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6902},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":175040,"byte_end":175054,"line_start":3524,"line_end":3524,"column_start":12,"column_end":26},"name":"locale_compare","qualname":"<JsString>::locale_compare","value":"fn (&self, compare_string: &str, locales: &Array, options: &Object) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The localeCompare() method returns a number indicating whether\n a reference string comes before or after or is the same as\n the given string in sort order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6908},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":175487,"byte_end":175493,"line_start":3535,"line_end":3535,"column_start":12,"column_end":18},"name":"match_","qualname":"<JsString>::match_","value":"fn (&self, pattern: &RegExp) -> Option<Object>","parent":null,"children":[],"decl_id":null,"docs":" The match() method retrieves the matches when matching a string against a regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6914},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":175906,"byte_end":175915,"line_start":3542,"line_end":3542,"column_start":12,"column_end":21},"name":"normalize","qualname":"<JsString>::normalize","value":"fn (&self, form: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The normalize() method returns the Unicode Normalization Form\n of a given string (if the value isn't a string, it will be converted to one first).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6920},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":176409,"byte_end":176416,"line_start":3551,"line_end":3551,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<JsString>::pad_end","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padEnd()` method pads the current string with a given string\n (repeated, if needed) so that the resulting string reaches a given\n length. The padding is applied from the end (right) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6926},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":176945,"byte_end":176954,"line_start":3560,"line_end":3560,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<JsString>::pad_start","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padStart()` method pads the current string with another string\n (repeated, if needed) so that the resulting string reaches the given\n length. The padding is applied from the start (left) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6932},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":177395,"byte_end":177401,"line_start":3567,"line_end":3567,"column_start":12,"column_end":18},"name":"repeat","qualname":"<JsString>::repeat","value":"fn (&self, count: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The repeat() method constructs and returns a new string which contains the specified\n number of copies of the string on which it was called, concatenated together.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6938},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":177954,"byte_end":177961,"line_start":3577,"line_end":3577,"column_start":12,"column_end":19},"name":"replace","qualname":"<JsString>::replace","value":"fn (&self, pattern: &str, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The replace() method returns a new string with some or all matches of a pattern\n replaced by a replacement. The pattern can be a string or a RegExp, and\n the replacement can be a string or a function to be called for each match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6944},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":178231,"byte_end":178252,"line_start":3581,"line_end":3581,"column_start":12,"column_end":33},"name":"replace_with_function","qualname":"<JsString>::replace_with_function","value":"fn (&self, pattern: &str, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6950},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":178433,"byte_end":178451,"line_start":3588,"line_end":3588,"column_start":12,"column_end":30},"name":"replace_by_pattern","qualname":"<JsString>::replace_by_pattern","value":"fn (&self, pattern: &RegExp, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6956},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":178724,"byte_end":178756,"line_start":3592,"line_end":3592,"column_start":12,"column_end":44},"name":"replace_by_pattern_with_function","qualname":"<JsString>::replace_by_pattern_with_function","value":"fn (&self, pattern: &RegExp, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6962},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":179172,"byte_end":179178,"line_start":3603,"line_end":3603,"column_start":12,"column_end":18},"name":"search","qualname":"<JsString>::search","value":"fn (&self, pattern: &RegExp) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The search() method executes a search for a match between\n a regular expression and this String object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6968},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":179553,"byte_end":179558,"line_start":3610,"line_end":3610,"column_start":12,"column_end":17},"name":"slice","qualname":"<JsString>::slice","value":"fn (&self, start: u32, end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method extracts a section of a string and returns it as a\n new string, without modifying the original string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6974},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":180002,"byte_end":180007,"line_start":3617,"line_end":3617,"column_start":12,"column_end":17},"name":"split","qualname":"<JsString>::split","value":"fn (&self, separator: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The split() method splits a String object into an array of strings by separating the string\n into substrings, using a specified separator string to determine where to make each split.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6980},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":180253,"byte_end":180264,"line_start":3621,"line_end":3621,"column_start":12,"column_end":23},"name":"split_limit","qualname":"<JsString>::split_limit","value":"fn (&self, separator: &str, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6986},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":180522,"byte_end":180538,"line_start":3625,"line_end":3625,"column_start":12,"column_end":28},"name":"split_by_pattern","qualname":"<JsString>::split_by_pattern","value":"fn (&self, pattern: &RegExp) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6992},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":180785,"byte_end":180807,"line_start":3629,"line_end":3629,"column_start":12,"column_end":34},"name":"split_by_pattern_limit","qualname":"<JsString>::split_by_pattern_limit","value":"fn (&self, pattern: &RegExp, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":6998},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":181252,"byte_end":181263,"line_start":3637,"line_end":3637,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<JsString>::starts_with","value":"fn (&self, search_string: &str, position: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `startsWith()` method determines whether a string begins with the\n characters of a specified string, returning true or false as\n appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7004},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":181658,"byte_end":181667,"line_start":3644,"line_end":3644,"column_start":12,"column_end":21},"name":"substring","qualname":"<JsString>::substring","value":"fn (&self, index_start: u32, index_end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substring()` method returns the part of the string between the\n start and end indexes, or to the end of the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7010},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":182053,"byte_end":182059,"line_start":3651,"line_end":3651,"column_start":12,"column_end":18},"name":"substr","qualname":"<JsString>::substr","value":"fn (&self, start: i32, length: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substr()` method returns the part of a string between\n the start index and a number of characters after it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7016},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":182501,"byte_end":182521,"line_start":3658,"line_end":3658,"column_start":12,"column_end":32},"name":"to_locale_lower_case","qualname":"<JsString>::to_locale_lower_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleLowerCase() method returns the calling string value converted to lower case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7022},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":182957,"byte_end":182977,"line_start":3665,"line_end":3665,"column_start":12,"column_end":32},"name":"to_locale_upper_case","qualname":"<JsString>::to_locale_upper_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleUpperCase() method returns the calling string value converted to upper case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7028},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":183352,"byte_end":183365,"line_start":3672,"line_end":3672,"column_start":12,"column_end":25},"name":"to_lower_case","qualname":"<JsString>::to_lower_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLowerCase()` method returns the calling string value\n converted to lower case.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7034},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":183703,"byte_end":183712,"line_start":3679,"line_end":3679,"column_start":12,"column_end":21},"name":"to_string","qualname":"<JsString>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7040},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":184122,"byte_end":184135,"line_start":3686,"line_end":3686,"column_start":12,"column_end":25},"name":"to_upper_case","qualname":"<JsString>::to_upper_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUpperCase()` method returns the calling string value converted to\n uppercase (the value will be converted to a string if it isn't one).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7046},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":184606,"byte_end":184610,"line_start":3695,"line_end":3695,"column_start":12,"column_end":16},"name":"trim","qualname":"<JsString>::trim","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trim()` method removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab,\n no-break space, etc.) and all the line terminator characters (LF, CR,\n etc.).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7052},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":184980,"byte_end":184988,"line_start":3702,"line_end":3702,"column_start":12,"column_end":20},"name":"trim_end","qualname":"<JsString>::trim_end","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7058},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":185360,"byte_end":185370,"line_start":3709,"line_end":3709,"column_start":12,"column_end":22},"name":"trim_right","qualname":"<JsString>::trim_right","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7064},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":185752,"byte_end":185762,"line_start":3716,"line_end":3716,"column_start":12,"column_end":22},"name":"trim_start","qualname":"<JsString>::trim_start","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string.  `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7070},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":186143,"byte_end":186152,"line_start":3723,"line_end":3723,"column_start":12,"column_end":21},"name":"trim_left","qualname":"<JsString>::trim_left","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string.  `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7076},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":186477,"byte_end":186485,"line_start":3729,"line_end":3729,"column_start":12,"column_end":20},"name":"value_of","qualname":"<JsString>::value_of","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `String` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7082},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":186907,"byte_end":186910,"line_start":3736,"line_end":3736,"column_start":12,"column_end":15},"name":"raw","qualname":"<JsString>::raw","value":"fn (call_site: &Object, substitutions: &Array) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7088},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":187380,"byte_end":187385,"line_start":3743,"line_end":3743,"column_start":12,"column_end":17},"name":"raw_0","qualname":"<JsString>::raw_0","value":"fn (call_site: &Object) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7094},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":187832,"byte_end":187837,"line_start":3750,"line_end":3750,"column_start":12,"column_end":17},"name":"raw_1","qualname":"<JsString>::raw_1","value":"fn (call_site: &Object, substitutions_1: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7100},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":188307,"byte_end":188312,"line_start":3757,"line_end":3757,"column_start":12,"column_end":17},"name":"raw_2","qualname":"<JsString>::raw_2","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7106},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":188836,"byte_end":188841,"line_start":3768,"line_end":3768,"column_start":12,"column_end":17},"name":"raw_3","qualname":"<JsString>::raw_3","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7112},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":189396,"byte_end":189401,"line_start":3780,"line_end":3780,"column_start":12,"column_end":17},"name":"raw_4","qualname":"<JsString>::raw_4","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7118},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":189987,"byte_end":189992,"line_start":3793,"line_end":3793,"column_start":12,"column_end":17},"name":"raw_5","qualname":"<JsString>::raw_5","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7124},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":190609,"byte_end":190614,"line_start":3807,"line_end":3807,"column_start":12,"column_end":17},"name":"raw_6","qualname":"<JsString>::raw_6","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7130},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":191262,"byte_end":191267,"line_start":3822,"line_end":3822,"column_start":12,"column_end":17},"name":"raw_7","qualname":"<JsString>::raw_7","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str, substitutions_7: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165624,"byte_end":165639,"line_start":3367,"line_end":3367,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":191860,"byte_end":191868,"line_start":3841,"line_end":3841,"column_start":12,"column_end":20},"name":"try_from","qualname":"<JsString>::try_from","value":"fn (val: &JsValue) -> Option<&JsString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `JsString` value of this JS value if it's an instance of a\n string.","sig":null,"attributes":[{"value":"deprecated(note =\n                 \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":191766,"byte_end":191848,"line_start":3840,"line_end":3840,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":192793,"byte_end":192807,"line_start":3861,"line_end":3861,"column_start":12,"column_end":26},"name":"is_valid_utf16","qualname":"<JsString>::is_valid_utf16","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this string is a valid UTF-16 string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":193145,"byte_end":193149,"line_start":3870,"line_end":3870,"column_start":12,"column_end":16},"name":"iter","qualname":"<JsString>::iter","value":"fn <'a> (&'a self) -> impl ExactSizeIterator<Item = u16> + DoubleEndedIterator<Item = u16> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the `u16` character codes that make up this JS\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":193918,"byte_end":193925,"line_start":3886,"line_end":3886,"column_start":12,"column_end":19},"name":"as_char","qualname":"<JsString>::as_char","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If this string consists of a single Unicode code point, then this method\n converts it into a Rust `char` without doing any allocations.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7344},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195859,"byte_end":195865,"line_start":3973,"line_end":3973,"column_start":14,"column_end":20},"name":"Symbol","qualname":"::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":265}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7256},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":196327,"byte_end":196339,"line_start":3981,"line_end":3981,"column_start":12,"column_end":24},"name":"has_instance","qualname":"<Symbol>::has_instance","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.hasInstance` well-known symbol is used to determine\n if a constructor object recognizes an object as its instance.\n The `instanceof` operator's behavior can be customized by this symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7262},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":196806,"byte_end":196826,"line_start":3989,"line_end":3989,"column_start":12,"column_end":32},"name":"is_concat_spreadable","qualname":"<Symbol>::is_concat_spreadable","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.isConcatSpreadable` well-known symbol is used to configure\n if an object should be flattened to its array elements when using the\n `Array.prototype.concat()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7268},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":197176,"byte_end":197184,"line_start":3996,"line_end":3996,"column_start":12,"column_end":20},"name":"iterator","qualname":"<Symbol>::iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.iterator` well-known symbol specifies the default iterator\n for an object.  Used by `for...of`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7274},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":197617,"byte_end":197623,"line_start":4004,"line_end":4004,"column_start":12,"column_end":18},"name":"match_","qualname":"<Symbol>::match_","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.match` well-known symbol specifies the matching of a regular\n expression against a string. This function is called by the\n `String.prototype.match()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7280},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":198164,"byte_end":198171,"line_start":4015,"line_end":4015,"column_start":12,"column_end":19},"name":"replace","qualname":"<Symbol>::replace","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.replace` well-known symbol specifies the method that\n replaces matched substrings of a string.  This function is called by the\n `String.prototype.replace()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7286},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":198737,"byte_end":198743,"line_start":4026,"line_end":4026,"column_start":12,"column_end":18},"name":"search","qualname":"<Symbol>::search","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.search` well-known symbol specifies the method that returns\n the index within a string that matches the regular expression.  This\n function is called by the `String.prototype.search()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7292},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":199123,"byte_end":199130,"line_start":4033,"line_end":4033,"column_start":12,"column_end":19},"name":"species","qualname":"<Symbol>::species","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The well-known symbol `Symbol.species` specifies a function-valued\n property that the constructor function uses to create derived objects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7298},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":199676,"byte_end":199681,"line_start":4043,"line_end":4043,"column_start":12,"column_end":17},"name":"split","qualname":"<Symbol>::split","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.split` well-known symbol specifies the method that splits a\n string at the indices that match a regular expression.  This function is\n called by the `String.prototype.split()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7304},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":200109,"byte_end":200121,"line_start":4051,"line_end":4051,"column_start":12,"column_end":24},"name":"to_primitive","qualname":"<Symbol>::to_primitive","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toPrimitive` is a symbol that specifies a function valued\n property that is called to convert an object to a corresponding\n primitive value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7310},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":200623,"byte_end":200636,"line_start":4060,"line_end":4060,"column_start":12,"column_end":25},"name":"to_string_tag","qualname":"<Symbol>::to_string_tag","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toStringTag` well-known symbol is a string valued property\n that is used in the creation of the default string description of an\n object.  It is accessed internally by the `Object.prototype.toString()`\n method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7316},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":201093,"byte_end":201097,"line_start":4068,"line_end":4068,"column_start":12,"column_end":16},"name":"for_","qualname":"<Symbol>::for_","value":"fn (key: &str) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with\n the given key and returns it if found.\n Otherwise a new symbol gets created in the global symbol registry with this key.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7322},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":201451,"byte_end":201458,"line_start":4074,"line_end":4074,"column_start":12,"column_end":19},"name":"key_for","qualname":"<Symbol>::key_for","value":"fn (sym: &Symbol) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7328},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":201768,"byte_end":201777,"line_start":4080,"line_end":4080,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Symbol>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7334},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202238,"byte_end":202249,"line_start":4088,"line_end":4088,"column_start":12,"column_end":23},"name":"unscopables","qualname":"<Symbol>::unscopables","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.unscopables well-known symbol is used to specify an object\n value of whose own and inherited property names are excluded from the\n with environment bindings of the associated object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":7340},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202532,"byte_end":202540,"line_start":4094,"line_end":4094,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Symbol>::value_of","value":"fn (&self) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method returns the primitive value of a Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195736,"byte_end":195751,"line_start":3969,"line_end":3969,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202603,"byte_end":202607,"line_start":4098,"line_end":4098,"column_start":9,"column_end":13},"name":"Intl","qualname":"::Intl","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":7354},{"krate":0,"index":7496},{"krate":0,"index":7502},{"krate":0,"index":7498},{"krate":0,"index":7358},{"krate":0,"index":7460},{"krate":0,"index":7466},{"krate":0,"index":7472},{"krate":0,"index":7478},{"krate":0,"index":7484},{"krate":0,"index":7490},{"krate":0,"index":7650},{"krate":0,"index":7656},{"krate":0,"index":7652},{"krate":0,"index":7506},{"krate":0,"index":7608},{"krate":0,"index":7614},{"krate":0,"index":7620},{"krate":0,"index":7626},{"krate":0,"index":7632},{"krate":0,"index":7638},{"krate":0,"index":7644},{"krate":0,"index":7804},{"krate":0,"index":7810},{"krate":0,"index":7806},{"krate":0,"index":7660},{"krate":0,"index":7762},{"krate":0,"index":7768},{"krate":0,"index":7774},{"krate":0,"index":7780},{"krate":0,"index":7786},{"krate":0,"index":7792},{"krate":0,"index":7798},{"krate":0,"index":7952},{"krate":0,"index":7958},{"krate":0,"index":7954},{"krate":0,"index":7814},{"krate":0,"index":7916},{"krate":0,"index":7922},{"krate":0,"index":7928},{"krate":0,"index":7934},{"krate":0,"index":7940},{"krate":0,"index":7946}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202570,"byte_end":202594,"line_start":4097,"line_end":4097,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":7354},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203147,"byte_end":203168,"line_start":4110,"line_end":4110,"column_start":16,"column_end":37},"name":"get_canonical_locales","qualname":"::Intl::get_canonical_locales","value":"fn (s: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.getCanonicalLocales()` method returns an array containing\n the canonical locale names. Duplicates will be omitted and elements\n will be validated as structurally valid language tags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202645,"byte_end":202660,"line_start":4102,"line_end":4102,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":202645,"byte_end":202660,"line_start":4102,"line_end":4102,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7496},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203643,"byte_end":203651,"line_start":4122,"line_end":4122,"column_start":18,"column_end":26},"name":"Collator","qualname":"::Intl::Collator","value":"Collator {  }","parent":null,"children":[{"krate":0,"index":271}],"decl_id":null,"docs":" The Intl.Collator object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7474},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":204001,"byte_end":204004,"line_start":4129,"line_end":4129,"column_start":16,"column_end":19},"name":"new","qualname":"<Collator>::new","value":"fn (locales: &Array, options: &Object) -> Collator","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7480},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":204459,"byte_end":204466,"line_start":4137,"line_end":4137,"column_start":16,"column_end":23},"name":"compare","qualname":"<Collator>::compare","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.compare property returns a function that\n compares two strings according to the sort order of this Collator\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7486},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":204970,"byte_end":204986,"line_start":4145,"line_end":4145,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<Collator>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and collation options\n computed during initialization of this Collator object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7492},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205534,"byte_end":205554,"line_start":4154,"line_end":4154,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<Collator>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in\n collation without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":203224,"byte_end":203239,"line_start":4114,"line_end":4114,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7650},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206065,"byte_end":206079,"line_start":4166,"line_end":4166,"column_start":18,"column_end":32},"name":"DateTimeFormat","qualname":"::Intl::DateTimeFormat","value":"DateTimeFormat {  }","parent":null,"children":[{"krate":0,"index":277}],"decl_id":null,"docs":" The Intl.DateTimeFormat object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7622},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206437,"byte_end":206440,"line_start":4173,"line_end":4173,"column_start":16,"column_end":19},"name":"new","qualname":"<DateTimeFormat>::new","value":"fn (locales: &Array, options: &Object) -> DateTimeFormat","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7628},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":206948,"byte_end":206954,"line_start":4181,"line_end":4181,"column_start":16,"column_end":22},"name":"format","qualname":"<DateTimeFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.format property returns a getter function that\n formats a date according to the locale and formatting options of this\n Intl.DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7634},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":207415,"byte_end":207430,"line_start":4188,"line_end":4188,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<DateTimeFormat>::format_to_parts","value":"fn (&self, date: &Date) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.formatToParts() method allows locale-aware\n formatting of strings produced by DateTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7640},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":207983,"byte_end":207999,"line_start":4196,"line_end":4196,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<DateTimeFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and date and time formatting\n options computed during initialization of this DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7646},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208586,"byte_end":208606,"line_start":4205,"line_end":4205,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<DateTimeFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in date\n and time formatting without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":205638,"byte_end":205653,"line_start":4158,"line_end":4158,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7804},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":209104,"byte_end":209116,"line_start":4217,"line_end":4217,"column_start":18,"column_end":30},"name":"NumberFormat","qualname":"::Intl::NumberFormat","value":"NumberFormat {  }","parent":null,"children":[{"krate":0,"index":283}],"decl_id":null,"docs":" The Intl.NumberFormat object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7776},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":209463,"byte_end":209466,"line_start":4224,"line_end":4224,"column_start":16,"column_end":19},"name":"new","qualname":"<NumberFormat>::new","value":"fn (locales: &Array, options: &Object) -> NumberFormat","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7782},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":209961,"byte_end":209967,"line_start":4232,"line_end":4232,"column_start":16,"column_end":22},"name":"format","qualname":"<NumberFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.format property returns a getter function that\n formats a number according to the locale and formatting options of this\n NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7788},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":210422,"byte_end":210437,"line_start":4239,"line_end":4239,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<NumberFormat>::format_to_parts","value":"fn (&self, number: f64) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Numberformat.prototype.formatToParts() method allows locale-aware\n formatting of strings produced by NumberTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7794},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":210975,"byte_end":210991,"line_start":4247,"line_end":4247,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<NumberFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and number formatting\n options computed during initialization of this NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7800},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211551,"byte_end":211571,"line_start":4255,"line_end":4255,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<NumberFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in number\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208688,"byte_end":208703,"line_start":4209,"line_end":4209,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7952},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":212083,"byte_end":212094,"line_start":4267,"line_end":4267,"column_start":18,"column_end":29},"name":"PluralRules","qualname":"::Intl::PluralRules","value":"PluralRules {  }","parent":null,"children":[{"krate":0,"index":289}],"decl_id":null,"docs":" The Intl.PluralRules object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7930},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":212456,"byte_end":212459,"line_start":4274,"line_end":4274,"column_start":16,"column_end":19},"name":"new","qualname":"<PluralRules>::new","value":"fn (locales: &Array, options: &Object) -> PluralRules","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7936},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":213001,"byte_end":213017,"line_start":4282,"line_end":4282,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<PluralRules>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and plural formatting\n options computed during initialization of this PluralRules object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7942},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":213414,"byte_end":213420,"line_start":4289,"line_end":4289,"column_start":16,"column_end":22},"name":"select","qualname":"<PluralRules>::select","value":"fn (&self, number: f64) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.prototype.select method returns a String indicating\n which plural rule to use for locale-aware formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":7948},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":213991,"byte_end":214011,"line_start":4297,"line_end":4297,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<PluralRules>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in plural\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":211652,"byte_end":211667,"line_start":4259,"line_end":4259,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8130},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214451,"byte_end":214458,"line_start":4310,"line_end":4310,"column_start":14,"column_end":21},"name":"Promise","qualname":"::Promise","value":"Promise {  }","parent":null,"children":[{"krate":0,"index":295}],"decl_id":null,"docs":" The `Promise` object represents the eventual completion (or failure) of\n an asynchronous operation, and its resulting value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8078},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":215488,"byte_end":215491,"line_start":4329,"line_end":4329,"column_start":12,"column_end":15},"name":"new","qualname":"<Promise>::new","value":"fn (cb: &mut dyn FnMut(Function, Function)) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Promise` with the provided executor `cb`","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8084},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":216020,"byte_end":216023,"line_start":4338,"line_end":4338,"column_start":12,"column_end":15},"name":"all","qualname":"<Promise>::all","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.all(iterable)` method returns a single `Promise` that\n resolves when all of the promises in the iterable argument have resolved\n or when the iterable argument contains no promises. It rejects with the\n reason of the first promise that rejects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8090},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":216457,"byte_end":216461,"line_start":4346,"line_end":4346,"column_start":12,"column_end":16},"name":"race","qualname":"<Promise>::race","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.race(iterable)` method returns a promise that resolves or\n rejects as soon as one of the promises in the iterable resolves or\n rejects, with the value or reason from that promise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8096},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":216801,"byte_end":216807,"line_start":4353,"line_end":4353,"column_start":12,"column_end":18},"name":"reject","qualname":"<Promise>::reject","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.reject(reason)` method returns a `Promise` object that is\n rejected with the given reason.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8102},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":217423,"byte_end":217430,"line_start":4363,"line_end":4363,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Promise>::resolve","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.resolve(value)` method returns a `Promise` object that is\n resolved with the given value. If the value is a promise, that promise\n is returned; if the value is a thenable (i.e. has a \"then\" method), the\n returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8108},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":217914,"byte_end":217919,"line_start":4372,"line_end":4372,"column_start":12,"column_end":17},"name":"catch","qualname":"<Promise>::catch","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `catch()` method returns a `Promise` and deals with rejected cases\n only.  It behaves the same as calling `Promise.prototype.then(undefined,\n onRejected)` (in fact, calling `obj.catch(onRejected)` internally calls\n `obj.then(undefined, onRejected)`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8114},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":218311,"byte_end":218315,"line_start":4379,"line_end":4379,"column_start":12,"column_end":16},"name":"then","qualname":"<Promise>::then","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `then()` method returns a `Promise`. It takes up to two arguments:\n callback functions for the success and failure cases of the `Promise`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8120},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":218493,"byte_end":218498,"line_start":4383,"line_end":4383,"column_start":12,"column_end":17},"name":"then2","qualname":"<Promise>::then2","value":"fn (&self, resolve: &Closure<dyn FnMut(JsValue)>, reject: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Same as `then`, only with both arguments provided.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":8126},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":219274,"byte_end":219281,"line_start":4400,"line_end":4400,"column_start":12,"column_end":19},"name":"finally","qualname":"<Promise>::finally","value":"fn (&self, cb: &Closure<dyn FnMut()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `finally()` method returns a `Promise`. When the promise is settled,\n whether fulfilled or rejected, the specified callback function is\n executed. This provides a way for code that must be executed once the\n `Promise` has been dealt with to be run whether the promise was\n fulfilled successfully or rejected.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":214077,"byte_end":214092,"line_start":4302,"line_end":4302,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":219505,"byte_end":219511,"line_start":4407,"line_end":4407,"column_start":8,"column_end":14},"name":"global","qualname":"::global","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the global scope object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8394},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Int8Array","qualname":"::Int8Array","value":"Int8Array {  }","parent":null,"children":[{"krate":0,"index":301}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8318},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Int8Array>::new","value":"fn (constructor_arg: &JsValue) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8324},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int8Array>::new_with_length","value":"fn (length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8330},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8336},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8342},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int8Array>::fill","value":"fn (&self, value: i8, start: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8348},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8354},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8360},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8366},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i8, u32, Int8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8372},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Int8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8378},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8384},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8390},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Int8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8596},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Int16Array","qualname":"::Int16Array","value":"Int16Array {  }","parent":null,"children":[{"krate":0,"index":307}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8520},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Int16Array>::new","value":"fn (constructor_arg: &JsValue) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8526},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int16Array>::new_with_length","value":"fn (length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8532},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8538},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8544},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int16Array>::fill","value":"fn (&self, value: i16, start: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8550},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8556},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8562},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8568},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i16, u32, Int16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8574},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Int16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8580},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8586},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8592},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Int16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8798},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Int32Array","qualname":"::Int32Array","value":"Int32Array {  }","parent":null,"children":[{"krate":0,"index":313}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8722},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Int32Array>::new","value":"fn (constructor_arg: &JsValue) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8728},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int32Array>::new_with_length","value":"fn (length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8734},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8740},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8746},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int32Array>::fill","value":"fn (&self, value: i32, start: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8752},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8758},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8764},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8770},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i32, u32, Int32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8776},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Int32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8782},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8788},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8794},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Int32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9000},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Uint8Array","qualname":"::Uint8Array","value":"Uint8Array {  }","parent":null,"children":[{"krate":0,"index":319}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8924},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8930},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8Array>::new_with_length","value":"fn (length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8936},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8942},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8948},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8Array>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8954},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8960},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8966},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8972},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8978},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8984},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8990},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":8996},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9202},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Uint8ClampedArray","qualname":"::Uint8ClampedArray","value":"Uint8ClampedArray {  }","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9126},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8ClampedArray>::new","value":"fn (constructor_arg: &JsValue) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8ClampedArray()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9132},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8ClampedArray>::new_with_length","value":"fn (length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9138},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8ClampedArray>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9144},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8ClampedArray>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9150},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8ClampedArray>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9156},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8ClampedArray>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9162},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8ClampedArray>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9168},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8ClampedArray>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9174},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8ClampedArray>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8ClampedArray)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9180},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8ClampedArray>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9186},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8ClampedArray>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9192},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8ClampedArray>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9198},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8ClampedArray>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9404},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Uint16Array","qualname":"::Uint16Array","value":"Uint16Array {  }","parent":null,"children":[{"krate":0,"index":331}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9328},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint16Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9334},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint16Array>::new_with_length","value":"fn (length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9340},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9346},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9352},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint16Array>::fill","value":"fn (&self, value: u16, start: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9358},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9364},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9370},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9376},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u16, u32, Uint16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9382},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9388},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9394},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9400},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9606},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Uint32Array","qualname":"::Uint32Array","value":"Uint32Array {  }","parent":null,"children":[{"krate":0,"index":337}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9530},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint32Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9536},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint32Array>::new_with_length","value":"fn (length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9542},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9548},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9554},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint32Array>::fill","value":"fn (&self, value: u32, start: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9560},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9566},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9572},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9578},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u32, u32, Uint32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9584},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9590},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9596},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9602},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9808},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Float32Array","qualname":"::Float32Array","value":"Float32Array {  }","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9732},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Float32Array>::new","value":"fn (constructor_arg: &JsValue) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9738},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float32Array>::new_with_length","value":"fn (length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9744},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9750},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9756},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float32Array>::fill","value":"fn (&self, value: f32, start: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9762},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9768},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9774},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9780},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f32, u32, Float32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9786},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Float32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9792},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9798},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9804},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Float32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":10010},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"Float64Array","qualname":"::Float64Array","value":"Float64Array {  }","parent":null,"children":[{"krate":0,"index":349}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9934},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new","qualname":"<Float64Array>::new","value":"fn (constructor_arg: &JsValue) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float64Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9940},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float64Array>::new_with_length","value":"fn (length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9946},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float64Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9952},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float64Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9958},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float64Array>::fill","value":"fn (&self, value: f64, start: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9964},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float64Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9970},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float64Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9976},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float64Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9982},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float64Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f64, u32, Float64Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9988},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"length","qualname":"<Float64Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":9994},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float64Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":10000},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float64Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":10006},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24},"name":"set","qualname":"<Float64Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}},{"value":"allow(clippy::all)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":220791,"byte_end":220806,"line_start":4438,"line_end":4438,"column_start":9,"column_end":24}}]}],"impls":[{"id":103,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35296,"byte_end":35303,"line_start":686,"line_end":686,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35549,"byte_end":35556,"line_start":700,"line_end":700,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35677,"byte_end":35684,"line_start":707,"line_end":707,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56437,"byte_end":56445,"line_start":1103,"line_end":1103,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62806,"byte_end":62814,"line_start":1250,"line_end":1250,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63965,"byte_end":63969,"line_start":1302,"line_end":1302,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64130,"byte_end":64138,"line_start":1310,"line_end":1310,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64377,"byte_end":64385,"line_start":1322,"line_end":1322,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64526,"byte_end":64535,"line_start":1330,"line_end":1330,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":84961,"byte_end":84967,"line_start":1774,"line_end":1774,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117243,"byte_end":117249,"line_start":2370,"line_end":2370,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117640,"byte_end":117646,"line_start":2385,"line_end":2385,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117777,"byte_end":117783,"line_start":2392,"line_end":2392,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":803,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":191558,"byte_end":191566,"line_start":3834,"line_end":3834,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":804,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194434,"byte_end":194442,"line_start":3907,"line_end":3907,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":805,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194562,"byte_end":194570,"line_start":3913,"line_end":3913,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":806,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194707,"byte_end":194715,"line_start":3919,"line_end":3919,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":807,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194859,"byte_end":194867,"line_start":3925,"line_end":3925,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":808,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195007,"byte_end":195015,"line_start":3931,"line_end":3931,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":809,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195141,"byte_end":195149,"line_start":3937,"line_end":3937,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":810,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195238,"byte_end":195246,"line_start":3943,"line_end":3943,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":811,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195395,"byte_end":195401,"line_start":3950,"line_end":3950,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":812,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195517,"byte_end":195523,"line_start":3956,"line_end":3956,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":813,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195613,"byte_end":195621,"line_start":3962,"line_end":3962,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35296,"byte_end":35303,"line_start":686,"line_end":686,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35549,"byte_end":35556,"line_start":700,"line_end":700,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35677,"byte_end":35684,"line_start":707,"line_end":707,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56437,"byte_end":56445,"line_start":1103,"line_end":1103,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[211]},"from":{"krate":0,"index":1932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62806,"byte_end":62814,"line_start":1250,"line_end":1250,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[264]},"from":{"krate":0,"index":2414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63965,"byte_end":63969,"line_start":1302,"line_end":1302,"column_start":34,"column_end":38},"kind":{"variant":"Impl","fields":[277]},"from":{"krate":0,"index":42},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64130,"byte_end":64138,"line_start":1310,"line_end":1310,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[278]},"from":{"krate":0,"index":2414},"to":{"krate":2,"index":4494}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64377,"byte_end":64385,"line_start":1322,"line_end":1322,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[279]},"from":{"krate":0,"index":44},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64526,"byte_end":64535,"line_start":1330,"line_end":1330,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[280]},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":84961,"byte_end":84967,"line_start":1774,"line_end":1774,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[323]},"from":{"krate":0,"index":3014},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117243,"byte_end":117249,"line_start":2370,"line_end":2370,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[427]},"from":{"krate":0,"index":3794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117640,"byte_end":117646,"line_start":2385,"line_end":2385,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[428]},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117777,"byte_end":117783,"line_start":2392,"line_end":2392,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[429]},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":2416}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":191558,"byte_end":191566,"line_start":3834,"line_end":3834,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[803]},"from":{"krate":0,"index":7134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194434,"byte_end":194442,"line_start":3907,"line_end":3907,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[804]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194562,"byte_end":194570,"line_start":3913,"line_end":3913,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[805]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194707,"byte_end":194715,"line_start":3919,"line_end":3919,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[806]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":194859,"byte_end":194867,"line_start":3925,"line_end":3925,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[807]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195007,"byte_end":195015,"line_start":3931,"line_end":3931,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[808]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195141,"byte_end":195149,"line_start":3937,"line_end":3937,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[809]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195238,"byte_end":195246,"line_start":3943,"line_end":3943,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[810]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195395,"byte_end":195401,"line_start":3950,"line_end":3950,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[811]},"from":{"krate":5,"index":5504},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195517,"byte_end":195523,"line_start":3956,"line_end":3956,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[812]},"from":{"krate":5,"index":5504},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,106,115,45,115,121,115,45,48,46,51,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":195613,"byte_end":195621,"line_start":3962,"line_end":3962,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[813]},"from":{"krate":0,"index":7134},"to":{"krate":2,"index":8426}}]}