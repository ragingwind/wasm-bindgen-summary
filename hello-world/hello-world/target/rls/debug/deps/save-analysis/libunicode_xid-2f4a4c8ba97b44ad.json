{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48],"program":"/Users/ragingwind/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","unicode_xid","/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=2f4a4c8ba97b44ad","-C","extra-filename=-2f4a4c8ba97b44ad","--out-dir","/Users/ragingwind/Workspace/wasm-bindgen-summary/hello-world/hello-world/target/rls/debug/deps","-L","dependency=/Users/ragingwind/Workspace/wasm-bindgen-summary/hello-world/hello-world/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/ragingwind/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,87,111,114,107,115,112,97,99,101,47,119,97,115,109,45,98,105,110,100,103,101,110,45,115,117,109,109,97,114,121,47,104,101,108,108,111,45,119,111,114,108,100,47,104,101,108,108,111,45,119,111,114,108,100,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,117,110,105,99,111,100,101,95,120,105,100,45,50,102,52,97,52,99,56,98,97,57,55,98,52,52,97,100,46,114,108,105,98]},"prelude":{"crate_id":{"name":"unicode_xid","disambiguator":[2582415371472857011,10690231719657392558]},"crate_root":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src","external_crates":[{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11146009991168716943,2172830830702649436]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15762031658991204948,3568202897914550072]}},{"file_name":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17333171034018679256,2583489994995213704]}}],"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":2686,"line_start":11,"line_end":87,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1609,"byte_end":1624,"line_start":55,"line_end":55,"column_start":17,"column_end":32},"alias_span":null,"name":"UNICODE_VERSION","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":2686,"line_start":11,"line_end":87,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/ragingwind/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":36},{"krate":0,"index":42}],"decl_id":null,"docs":" Determine if a `char` is a valid identifier for a parser and/or lexer according to\n [Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","sig":null,"attributes":[{"value":"deny(missing_docs, unsafe_code)","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1217,"byte_end":1252,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1404,"byte_end":1414,"line_start":44,"line_end":44,"column_start":1,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,116,97,98,108,101,115,46,114,115],"byte_start":3428,"byte_end":3443,"line_start":17,"line_end":17,"column_start":11,"column_end":26},"name":"UNICODE_VERSION","qualname":"::tables::UNICODE_VERSION","value":"(u64, u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" The version of [Unicode](http://www.unicode.org/)\n that this version of unicode-xid is based on.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1751,"byte_end":1761,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"UnicodeXID","qualname":"::UnicodeXID","value":"UnicodeXID","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40}],"decl_id":null,"docs":" Methods for determining if a character is a valid identifier character.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2086,"byte_end":2098,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"is_xid_start","qualname":"::UnicodeXID::is_xid_start","value":"fn (self) -> bool","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns whether the specified character satisfies the 'XID_Start'\n Unicode property.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,114,97,103,105,110,103,119,105,110,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,105,99,111,100,101,45,120,105,100,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2445,"byte_end":2460,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"is_xid_continue","qualname":"::UnicodeXID::is_xid_continue","value":"fn (self) -> bool","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Returns whether the specified `char` satisfies the 'XID_Continue'\n Unicode property.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}