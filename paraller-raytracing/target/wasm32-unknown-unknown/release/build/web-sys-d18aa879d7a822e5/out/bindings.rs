# [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `CanvasRenderingContext2D` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct CanvasRenderingContext2d { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_CanvasRenderingContext2d : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for CanvasRenderingContext2d { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for CanvasRenderingContext2d { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for CanvasRenderingContext2d { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a CanvasRenderingContext2d { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { CanvasRenderingContext2d { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for CanvasRenderingContext2d { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a CanvasRenderingContext2d { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < CanvasRenderingContext2d > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( CanvasRenderingContext2d { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for CanvasRenderingContext2d { # [ inline ] fn from ( obj : JsValue ) -> CanvasRenderingContext2d { CanvasRenderingContext2d { obj : obj . into ( ) } } } impl AsRef < JsValue > for CanvasRenderingContext2d { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < CanvasRenderingContext2d > for CanvasRenderingContext2d { # [ inline ] fn as_ref ( & self ) -> & CanvasRenderingContext2d { self } } impl From < CanvasRenderingContext2d > for JsValue { # [ inline ] fn from ( obj : CanvasRenderingContext2d ) -> JsValue { obj . obj . into ( ) } } impl JsCast for CanvasRenderingContext2d { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_CanvasRenderingContext2D ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_CanvasRenderingContext2D ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_CanvasRenderingContext2D ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { CanvasRenderingContext2d { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const CanvasRenderingContext2d ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < CanvasRenderingContext2d > for Object { # [ inline ] fn from ( obj : CanvasRenderingContext2d ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for CanvasRenderingContext2d { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_window_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_draw_window_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_draw_window_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , window , x , y , w , h , bg_color ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let window = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( window , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; let bg_color = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bg_color , & mut __stack ) ; __widl_f_draw_window_CanvasRenderingContext2D ( self_ , window , x , y , w , h , bg_color ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_window_with_flags_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window_with_flags ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str , flags : u32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_draw_window_with_flags_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , flags : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_draw_window_with_flags_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , flags : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , window , x , y , w , h , bg_color , flags ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let window = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( window , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; let bg_color = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bg_color , & mut __stack ) ; let flags = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( flags , & mut __stack ) ; __widl_f_draw_window_with_flags_CanvasRenderingContext2D ( self_ , window , x , y , w , h , bg_color , flags ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_global_alpha_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `globalAlpha` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_alpha ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_global_alpha_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_global_alpha_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `globalAlpha` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_alpha ( & self , global_alpha : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_alpha : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_alpha : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , global_alpha ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let global_alpha = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( global_alpha , & mut __stack ) ; __widl_f_set_global_alpha_CanvasRenderingContext2D ( self_ , global_alpha ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_global_composite_operation_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `globalCompositeOperation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_composite_operation ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_global_composite_operation_CanvasRenderingContext2D ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_global_composite_operation_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `globalCompositeOperation` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_composite_operation ( & self , global_composite_operation : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_composite_operation : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_composite_operation : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , global_composite_operation ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let global_composite_operation = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( global_composite_operation , & mut __stack ) ; __widl_f_set_global_composite_operation_CanvasRenderingContext2D ( self_ , global_composite_operation ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_begin_path_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `beginPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn begin_path ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_begin_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_begin_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_begin_path_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clip_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `clip()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clip ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clip_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clip_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clip_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fill()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fill_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fill_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fill_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `isPointInPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_path_with_f64 ( & self , x : f64 , y : f64 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( self_ , x , y ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `isPointInStroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_stroke_with_x_and_y ( & self , x : f64 , y : f64 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( self_ , x , y ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `stroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stroke_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stroke_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stroke_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `strokeStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_style ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stroke_style_CanvasRenderingContext2D ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_stroke_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `strokeStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_stroke_style ( & self , stroke_style : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , stroke_style : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , stroke_style : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , stroke_style ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let stroke_style = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( stroke_style , & mut __stack ) ; __widl_f_set_stroke_style_CanvasRenderingContext2D ( self_ , stroke_style ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fillStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_style ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fill_style_CanvasRenderingContext2D ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_fill_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fillStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_fill_style ( & self , fill_style : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , fill_style : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , fill_style : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , fill_style ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let fill_style = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( fill_style , & mut __stack ) ; __widl_f_set_fill_style_CanvasRenderingContext2D ( self_ , fill_style ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_filter_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `filter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn filter ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_filter_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_filter_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `filter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_filter ( & self , filter : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , filter : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , filter : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , filter ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let filter = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( filter , & mut __stack ) ; __widl_f_set_filter_CanvasRenderingContext2D ( self_ , filter ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_add_hit_region_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `addHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn add_hit_region ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_add_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_add_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_add_hit_region_CanvasRenderingContext2D ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_hit_regions_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `clearHitRegions()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_hit_regions ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_hit_regions_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_hit_regions_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_hit_regions_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_hit_region_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `removeHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn remove_hit_region ( & self , id : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_remove_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_remove_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , id ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let id = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( id , & mut __stack ) ; __widl_f_remove_hit_region_CanvasRenderingContext2D ( self_ , id ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_data_with_sw_and_sh_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `createImageData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_data_with_sw_and_sh ( & self , sw : f64 , sh : f64 ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_data_with_sw_and_sh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_data_with_sw_and_sh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , sw , sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let sw = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; __widl_f_create_image_data_with_sw_and_sh_CanvasRenderingContext2D ( self_ , sw , sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_data_with_imagedata_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `createImageData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_data_with_imagedata ( & self , imagedata : & ImageData ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_data_with_imagedata_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_data_with_imagedata_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , imagedata ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let imagedata = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( imagedata , & mut __stack ) ; __widl_f_create_image_data_with_imagedata_CanvasRenderingContext2D ( self_ , imagedata ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_image_data_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `getImageData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn get_image_data ( & self , sx : f64 , sy : f64 , sw : f64 , sh : f64 ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_get_image_data_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_get_image_data_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , sx , sy , sw , sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let sx = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sx , & mut __stack ) ; let sy = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sy , & mut __stack ) ; let sw = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; __widl_f_get_image_data_CanvasRenderingContext2D ( self_ , sx , sy , sw , sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_put_image_data_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `putImageData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn put_image_data ( & self , imagedata : & ImageData , dx : f64 , dy : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_put_image_data_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_put_image_data_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , imagedata , dx , dy ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let imagedata = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( imagedata , & mut __stack ) ; let dx = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; __widl_f_put_image_data_CanvasRenderingContext2D ( self_ , imagedata , dx , dy ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `putImageData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height ( & self , imagedata : & ImageData , dx : f64 , dy : f64 , dirty_x : f64 , dirty_y : f64 , dirty_width : f64 , dirty_height : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_height : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , imagedata : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dirty_height : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , imagedata , dx , dy , dirty_x , dirty_y , dirty_width , dirty_height ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let imagedata = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( imagedata , & mut __stack ) ; let dx = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; let dirty_x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dirty_x , & mut __stack ) ; let dirty_y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dirty_y , & mut __stack ) ; let dirty_width = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dirty_width , & mut __stack ) ; let dirty_height = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dirty_height , & mut __stack ) ; __widl_f_put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height_CanvasRenderingContext2D ( self_ , imagedata , dx , dy , dirty_x , dirty_y , dirty_width , dirty_height ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `imageSmoothingEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn image_smoothing_enabled ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `imageSmoothingEnabled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_image_smoothing_enabled ( & self , image_smoothing_enabled : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image_smoothing_enabled : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image_smoothing_enabled : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , image_smoothing_enabled ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image_smoothing_enabled = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image_smoothing_enabled , & mut __stack ) ; __widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( self_ , image_smoothing_enabled ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_line_dash_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `getLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn get_line_dash ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_get_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_get_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_line_dash_CanvasRenderingContext2D ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_dash_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `setLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash ( & self , segments : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , segments : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , segments : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , segments ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let segments = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( segments , & mut __stack ) ; __widl_f_set_line_dash_CanvasRenderingContext2D ( self_ , segments ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_width ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_width_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_width ( & self , line_width : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , line_width ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_width = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_width , & mut __stack ) ; __widl_f_set_line_width_CanvasRenderingContext2D ( self_ , line_width ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_cap_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineCap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_cap ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_cap_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_cap_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineCap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_cap ( & self , line_cap : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_cap : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_cap : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , line_cap ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_cap = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_cap , & mut __stack ) ; __widl_f_set_line_cap_CanvasRenderingContext2D ( self_ , line_cap ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_join_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineJoin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_join ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_join_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_join_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineJoin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_join ( & self , line_join : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_join : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_join : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , line_join ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_join = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_join , & mut __stack ) ; __widl_f_set_line_join_CanvasRenderingContext2D ( self_ , line_join ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_miter_limit_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `miterLimit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn miter_limit ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_miter_limit_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_miter_limit_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `miterLimit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_miter_limit ( & self , miter_limit : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , miter_limit : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , miter_limit : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , miter_limit ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let miter_limit = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( miter_limit , & mut __stack ) ; __widl_f_set_miter_limit_CanvasRenderingContext2D ( self_ , miter_limit ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_dash_offset_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineDashOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_dash_offset ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_dash_offset_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_dash_offset_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineDashOffset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash_offset ( & self , line_dash_offset : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_dash_offset : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_dash_offset : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , line_dash_offset ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_dash_offset = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_dash_offset , & mut __stack ) ; __widl_f_set_line_dash_offset_CanvasRenderingContext2D ( self_ , line_dash_offset ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_arc_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_arc_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , radius , start_angle , end_angle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; let start_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; __widl_f_arc_CanvasRenderingContext2D ( self_ , x , y , radius , start_angle , end_angle ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_with_anticlockwise ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , radius , start_angle , end_angle , anticlockwise ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; let start_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; let anticlockwise = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( anticlockwise , & mut __stack ) ; __widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( self_ , x , y , radius , start_angle , end_angle , anticlockwise ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `arcTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_to ( & self , x1 : f64 , y1 : f64 , x2 : f64 , y2 : f64 , radius : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_arc_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x1 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y1 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x2 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y2 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_arc_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x1 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y1 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x2 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y2 : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x1 , y1 , x2 , y2 , radius ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x1 = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x1 , & mut __stack ) ; let y1 = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y1 , & mut __stack ) ; let x2 = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x2 , & mut __stack ) ; let y2 = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y2 , & mut __stack ) ; let radius = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; __widl_f_arc_to_CanvasRenderingContext2D ( self_ , x1 , y1 , x2 , y2 , radius ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_bezier_curve_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `bezierCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn bezier_curve_to ( & self , cp1x : f64 , cp1y : f64 , cp2x : f64 , cp2y : f64 , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_bezier_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_bezier_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , cp1x , cp1y , cp2x , cp2y , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cp1x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp1x , & mut __stack ) ; let cp1y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp1y , & mut __stack ) ; let cp2x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp2x , & mut __stack ) ; let cp2y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp2y , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_bezier_curve_to_CanvasRenderingContext2D ( self_ , cp1x , cp1y , cp2x , cp2y , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_close_path_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `closePath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn close_path ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_close_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_close_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_close_path_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ellipse_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ellipse_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ellipse_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius_x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_x , & mut __stack ) ; let radius_y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_y , & mut __stack ) ; let rotation = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( rotation , & mut __stack ) ; let start_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; __widl_f_ellipse_CanvasRenderingContext2D ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse_with_anticlockwise ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle , anticlockwise ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius_x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_x , & mut __stack ) ; let radius_y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_y , & mut __stack ) ; let rotation = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( rotation , & mut __stack ) ; let start_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; let anticlockwise = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( anticlockwise , & mut __stack ) ; __widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle , anticlockwise ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `lineTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_to ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_line_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_line_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_line_to_CanvasRenderingContext2D ( self_ , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_move_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_move_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_to_CanvasRenderingContext2D ( self_ , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_quadratic_curve_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `quadraticCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn quadratic_curve_to ( & self , cpx : f64 , cpy : f64 , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_quadratic_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_quadratic_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpx : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpy : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , cpx , cpy , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cpx = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cpx , & mut __stack ) ; let cpy = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cpy , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_quadratic_curve_to_CanvasRenderingContext2D ( self_ , cpx , cpy , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `rect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , w , h ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `clearRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , w , h ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_clear_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fillRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fill_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fill_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , w , h ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_fill_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `strokeRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stroke_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stroke_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y , w , h ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_stroke_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_offset_x_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowOffsetX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_x ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_offset_x_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowOffsetX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_x ( & self , shadow_offset_x : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , shadow_offset_x ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_offset_x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_offset_x , & mut __stack ) ; __widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( self_ , shadow_offset_x ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_offset_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowOffsetY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_y ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_offset_y_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowOffsetY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_y ( & self , shadow_offset_y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , shadow_offset_y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_offset_y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_offset_y , & mut __stack ) ; __widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( self_ , shadow_offset_y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_blur_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowBlur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_blur ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_blur_CanvasRenderingContext2D ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_blur_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowBlur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_blur ( & self , shadow_blur : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_blur : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_blur : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , shadow_blur ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_blur = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_blur , & mut __stack ) ; __widl_f_set_shadow_blur_CanvasRenderingContext2D ( self_ , shadow_blur ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_color_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowColor` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_color ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_color_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_color_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `shadowColor` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_color ( & self , shadow_color : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_color : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , shadow_color ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_color = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_color , & mut __stack ) ; __widl_f_set_shadow_color_CanvasRenderingContext2D ( self_ , shadow_color ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_restore_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `restore()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn restore ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_restore_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_restore_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_restore_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_save_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `save()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn save ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_save_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_save_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_save_CanvasRenderingContext2D ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_text_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fill_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fill_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_fill_text_CanvasRenderingContext2D ( self_ , text , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text , x , y , max_width ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let max_width = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( max_width , & mut __stack ) ; __widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( self_ , text , x , y , max_width ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_text_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stroke_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stroke_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_stroke_text_CanvasRenderingContext2D ( self_ , text , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text , x , y , max_width ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let max_width = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( max_width , & mut __stack ) ; __widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( self_ , text , x , y , max_width ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_font_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `font` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn font ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_font_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_font_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `font` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_font ( & self , font : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , font : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , font : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , font ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let font = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( font , & mut __stack ) ; __widl_f_set_font_CanvasRenderingContext2D ( self_ , font ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_text_align_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `textAlign` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_align ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_text_align_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_text_align_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `textAlign` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_align ( & self , text_align : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_align : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_align : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text_align ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text_align = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text_align , & mut __stack ) ; __widl_f_set_text_align_CanvasRenderingContext2D ( self_ , text_align ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_text_baseline_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `textBaseline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_baseline ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_text_baseline_CanvasRenderingContext2D ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_text_baseline_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `textBaseline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_baseline ( & self , text_baseline : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_baseline : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_baseline : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , text_baseline ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text_baseline = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text_baseline , & mut __stack ) ; __widl_f_set_text_baseline_CanvasRenderingContext2D ( self_ , text_baseline ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_reset_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `resetTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn reset_transform ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_reset_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_reset_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_reset_transform_CanvasRenderingContext2D ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_rotate_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `rotate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rotate ( & self , angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_rotate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_rotate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , angle : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , angle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let angle = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( angle , & mut __stack ) ; __widl_f_rotate_CanvasRenderingContext2D ( self_ , angle ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scale_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `scale()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn scale ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scale_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scale_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scale_CanvasRenderingContext2D ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `setTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , a , b , c , d , e , f ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a , & mut __stack ) ; let b = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( b , & mut __stack ) ; let c = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( c , & mut __stack ) ; let d = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( d , & mut __stack ) ; let e = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( e , & mut __stack ) ; let f = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( f , & mut __stack ) ; __widl_f_set_transform_CanvasRenderingContext2D ( self_ , a , b , c , d , e , f ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `transform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , a , b , c , d , e , f ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a , & mut __stack ) ; let b = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( b , & mut __stack ) ; let c = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( c , & mut __stack ) ; let d = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( d , & mut __stack ) ; let e = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( e , & mut __stack ) ; let f = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( f , & mut __stack ) ; __widl_f_transform_CanvasRenderingContext2D ( self_ , a , b , c , d , e , f ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_translate_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ doc = "The `translate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn translate ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_translate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_translate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_translate_CanvasRenderingContext2D ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `DedicatedWorkerGlobalScope` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct DedicatedWorkerGlobalScope { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_DedicatedWorkerGlobalScope : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for DedicatedWorkerGlobalScope { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for DedicatedWorkerGlobalScope { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for DedicatedWorkerGlobalScope { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for DedicatedWorkerGlobalScope { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a DedicatedWorkerGlobalScope { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for DedicatedWorkerGlobalScope { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { DedicatedWorkerGlobalScope { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for DedicatedWorkerGlobalScope { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a DedicatedWorkerGlobalScope { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for DedicatedWorkerGlobalScope { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < DedicatedWorkerGlobalScope > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( DedicatedWorkerGlobalScope { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for DedicatedWorkerGlobalScope { # [ inline ] fn from ( obj : JsValue ) -> DedicatedWorkerGlobalScope { DedicatedWorkerGlobalScope { obj : obj . into ( ) } } } impl AsRef < JsValue > for DedicatedWorkerGlobalScope { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < DedicatedWorkerGlobalScope > for DedicatedWorkerGlobalScope { # [ inline ] fn as_ref ( & self ) -> & DedicatedWorkerGlobalScope { self } } impl From < DedicatedWorkerGlobalScope > for JsValue { # [ inline ] fn from ( obj : DedicatedWorkerGlobalScope ) -> JsValue { obj . obj . into ( ) } } impl JsCast for DedicatedWorkerGlobalScope { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_DedicatedWorkerGlobalScope ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_DedicatedWorkerGlobalScope ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_DedicatedWorkerGlobalScope ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { DedicatedWorkerGlobalScope { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const DedicatedWorkerGlobalScope ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < DedicatedWorkerGlobalScope > for Object { # [ inline ] fn from ( obj : DedicatedWorkerGlobalScope ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for DedicatedWorkerGlobalScope { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_close_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn close ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_close_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_close_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_close_DedicatedWorkerGlobalScope ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_post_message_DedicatedWorkerGlobalScope ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_with_transfer_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_with_transfer_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message , transfer ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( transfer , & mut __stack ) ; __widl_f_post_message_with_transfer_DedicatedWorkerGlobalScope ( self_ , message , transfer ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_name_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_name_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_name_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_name_DedicatedWorkerGlobalScope ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessage_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessage_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessage_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessage_DedicatedWorkerGlobalScope ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessage_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessage_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessage ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessage = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessage , & mut __stack ) ; __widl_f_set_onmessage_DedicatedWorkerGlobalScope ( self_ , onmessage ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessageerror_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessageerror_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessageerror_DedicatedWorkerGlobalScope ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_DedicatedWorkerGlobalScope ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & DedicatedWorkerGlobalScope as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl DedicatedWorkerGlobalScope { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror)\n\n*This API requires the following crate features to be activated: `DedicatedWorkerGlobalScope`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessageerror_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessageerror_DedicatedWorkerGlobalScope ( self_ : < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessageerror ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & DedicatedWorkerGlobalScope as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessageerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessageerror , & mut __stack ) ; __widl_f_set_onmessageerror_DedicatedWorkerGlobalScope ( self_ , onmessageerror ) } ; ( ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `ErrorEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct ErrorEvent { obj : Event } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_ErrorEvent : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for ErrorEvent { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for ErrorEvent { type Target = Event ; # [ inline ] fn deref ( & self ) -> & Event { & self . obj } } impl IntoWasmAbi for ErrorEvent { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for ErrorEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a ErrorEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for ErrorEvent { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { ErrorEvent { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for ErrorEvent { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a ErrorEvent { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for ErrorEvent { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < ErrorEvent > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( ErrorEvent { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for ErrorEvent { # [ inline ] fn from ( obj : JsValue ) -> ErrorEvent { ErrorEvent { obj : obj . into ( ) } } } impl AsRef < JsValue > for ErrorEvent { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < ErrorEvent > for ErrorEvent { # [ inline ] fn as_ref ( & self ) -> & ErrorEvent { self } } impl From < ErrorEvent > for JsValue { # [ inline ] fn from ( obj : ErrorEvent ) -> JsValue { obj . obj . into ( ) } } impl JsCast for ErrorEvent { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_ErrorEvent ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_ErrorEvent ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_ErrorEvent ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { ErrorEvent { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const ErrorEvent ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < ErrorEvent > for Event { # [ inline ] fn from ( obj : ErrorEvent ) -> Event { use wasm_bindgen :: JsCast ; Event :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Event > for ErrorEvent { # [ inline ] fn as_ref ( & self ) -> & Event { use wasm_bindgen :: JsCast ; Event :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < ErrorEvent > for Object { # [ inline ] fn from ( obj : ErrorEvent ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for ErrorEvent { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ErrorEvent as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `new ErrorEvent(..)` constructor, creating a new instance of `ErrorEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/ErrorEvent)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_ : & str ) -> Result < ErrorEvent , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_ErrorEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ErrorEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_ErrorEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ErrorEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( type_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_new_ErrorEvent ( type_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ErrorEvent as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_message_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ErrorEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `message` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/message)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn message ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_message_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_message_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_message_ErrorEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_filename_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ErrorEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `filename` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/filename)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn filename ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_filename_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_filename_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_filename_ErrorEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_lineno_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ErrorEvent as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `lineno` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/lineno)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn lineno ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_lineno_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_lineno_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_lineno_ErrorEvent ( self_ ) } ; < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_colno_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ErrorEvent as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `colno` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/colno)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn colno ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_colno_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_colno_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_colno_ErrorEvent ( self_ ) } ; < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_ErrorEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ErrorEvent as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl ErrorEvent { # [ allow ( bad_style ) ] # [ doc = "The `error` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent/error)\n\n*This API requires the following crate features to be activated: `ErrorEvent`*" ] # [ allow ( clippy :: all ) ] pub fn error ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_error_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_error_ErrorEvent ( self_ : < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ErrorEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_error_ErrorEvent ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Event` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Event { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Event : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Event { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for Event { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for Event { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Event { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Event { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Event { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { Event { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for Event { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Event { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Event { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Event > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Event { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for Event { # [ inline ] fn from ( obj : JsValue ) -> Event { Event { obj : obj . into ( ) } } } impl AsRef < JsValue > for Event { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < Event > for Event { # [ inline ] fn as_ref ( & self ) -> & Event { self } } impl From < Event > for JsValue { # [ inline ] fn from ( obj : Event ) -> JsValue { obj . obj . into ( ) } } impl JsCast for Event { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_Event ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_Event ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Event ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Event { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Event ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < Event > for Object { # [ inline ] fn from ( obj : Event ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Event { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < Event as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `new Event(..)` constructor, creating a new instance of `Event`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_ : & str ) -> Result < Event , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_Event ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Event as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_Event ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Event as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( type_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_new_Event ( type_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Event as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_composed_path_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `composedPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn composed_path ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_composed_path_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_composed_path_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_composed_path_Event ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_event_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `initEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn init_event ( & self , type_ : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_event_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_event_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_init_event_Event ( self_ , type_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_event_with_bubbles_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `initEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn init_event_with_bubbles ( & self , type_ : & str , bubbles : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_event_with_bubbles_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_event_with_bubbles_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; __widl_f_init_event_with_bubbles_Event ( self_ , type_ , bubbles ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_event_with_bubbles_and_cancelable_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `initEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn init_event_with_bubbles_and_cancelable ( & self , type_ : & str , bubbles : bool , cancelable : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_event_with_bubbles_and_cancelable_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_event_with_bubbles_and_cancelable_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; __widl_f_init_event_with_bubbles_and_cancelable_Event ( self_ , type_ , bubbles , cancelable ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prevent_default_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `preventDefault()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn prevent_default ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_prevent_default_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_prevent_default_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prevent_default_Event ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stop_immediate_propagation_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `stopImmediatePropagation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn stop_immediate_propagation ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stop_immediate_propagation_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stop_immediate_propagation_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stop_immediate_propagation_Event ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stop_propagation_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `stopPropagation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn stop_propagation ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stop_propagation_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stop_propagation_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stop_propagation_Event ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_type_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `type` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/type)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn type_ ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_type_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_type_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_type_Event ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_event_phase_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < u16 as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `eventPhase` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn event_phase ( & self , ) -> u16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_event_phase_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u16 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_event_phase_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u16 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_event_phase_Event ( self_ ) } ; < u16 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_bubbles_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `bubbles` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn bubbles ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_bubbles_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_bubbles_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_bubbles_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancelable_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `cancelable` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn cancelable ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_cancelable_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_cancelable_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_cancelable_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_default_prevented_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `defaultPrevented` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn default_prevented ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_default_prevented_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_default_prevented_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_default_prevented_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_composed_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `composed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composed)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn composed ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_composed_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_composed_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_composed_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_trusted_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `isTrusted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn is_trusted ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_is_trusted_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_is_trusted_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_is_trusted_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_stamp_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `timeStamp` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn time_stamp ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_time_stamp_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_time_stamp_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_time_stamp_Event ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancel_bubble_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `cancelBubble` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_bubble ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_cancel_bubble_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_cancel_bubble_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_cancel_bubble_Event ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_cancel_bubble_Event ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Event as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Event { # [ allow ( bad_style ) ] # [ doc = "The `cancelBubble` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)\n\n*This API requires the following crate features to be activated: `Event`*" ] # [ allow ( clippy :: all ) ] pub fn set_cancel_bubble ( & self , cancel_bubble : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_cancel_bubble_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancel_bubble : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_cancel_bubble_Event ( self_ : < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancel_bubble : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , cancel_bubble ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Event as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cancel_bubble = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancel_bubble , & mut __stack ) ; __widl_f_set_cancel_bubble_Event ( self_ , cancel_bubble ) } ; ( ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `ImageData` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct ImageData { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_ImageData : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for ImageData { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for ImageData { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for ImageData { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for ImageData { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a ImageData { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for ImageData { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { ImageData { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for ImageData { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a ImageData { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for ImageData { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < ImageData > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( ImageData { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for ImageData { # [ inline ] fn from ( obj : JsValue ) -> ImageData { ImageData { obj : obj . into ( ) } } } impl AsRef < JsValue > for ImageData { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < ImageData > for ImageData { # [ inline ] fn as_ref ( & self ) -> & ImageData { self } } impl From < ImageData > for JsValue { # [ inline ] fn from ( obj : ImageData ) -> JsValue { obj . obj . into ( ) } } impl JsCast for ImageData { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_ImageData ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_ImageData ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_ImageData ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { ImageData { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const ImageData ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < ImageData > for Object { # [ inline ] fn from ( obj : ImageData ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for ImageData { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_sw_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < u32 as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `new ImageData(..)` constructor, creating a new instance of `ImageData`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_sw ( sw : u32 , sh : u32 ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_with_sw_ImageData ( sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_with_sw_ImageData ( sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( sw , sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let sw = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; __widl_f_new_with_sw_ImageData ( sw , sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_u8_clamped_array_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `new ImageData(..)` constructor, creating a new instance of `ImageData`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_u8_clamped_array ( data : :: wasm_bindgen :: Clamped < & mut [ u8 ] > , sw : u32 ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_with_u8_clamped_array_ImageData ( data : < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_with_u8_clamped_array_ImageData ( data : < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( data , sw ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let sw = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; __widl_f_new_with_u8_clamped_array_ImageData ( data , sw ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_u8_clamped_array_and_sh_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ImageData as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `new ImageData(..)` constructor, creating a new instance of `ImageData`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_u8_clamped_array_and_sh ( data : :: wasm_bindgen :: Clamped < & mut [ u8 ] > , sw : u32 , sh : u32 ) -> Result < ImageData , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_with_u8_clamped_array_and_sh_ImageData ( data : < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_with_u8_clamped_array_and_sh_ImageData ( data : < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( data , sw , sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < :: wasm_bindgen :: Clamped < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let sw = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; __widl_f_new_with_u8_clamped_array_and_sh_ImageData ( data , sw , sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < ImageData as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_width_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn width ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_width_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_width_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_width_ImageData ( self_ ) } ; < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_height_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn height ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_height_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_height_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_height_ImageData ( self_ ) } ; < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_data_ImageData ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: Clamped < Vec < u8 > > as WasmDescribe > :: describe ( ) ; } impl ImageData { # [ allow ( bad_style ) ] # [ doc = "The `data` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data)\n\n*This API requires the following crate features to be activated: `ImageData`*" ] # [ allow ( clippy :: all ) ] pub fn data ( & self , ) -> :: wasm_bindgen :: Clamped < Vec < u8 > > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_data_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: Clamped < Vec < u8 > > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_data_ImageData ( self_ : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: Clamped < Vec < u8 > > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_data_ImageData ( self_ ) } ; < :: wasm_bindgen :: Clamped < Vec < u8 > > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `MessageEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct MessageEvent { obj : Event } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_MessageEvent : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for MessageEvent { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for MessageEvent { type Target = Event ; # [ inline ] fn deref ( & self ) -> & Event { & self . obj } } impl IntoWasmAbi for MessageEvent { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for MessageEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a MessageEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for MessageEvent { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { MessageEvent { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for MessageEvent { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a MessageEvent { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for MessageEvent { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < MessageEvent > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( MessageEvent { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for MessageEvent { # [ inline ] fn from ( obj : JsValue ) -> MessageEvent { MessageEvent { obj : obj . into ( ) } } } impl AsRef < JsValue > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < MessageEvent > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & MessageEvent { self } } impl From < MessageEvent > for JsValue { # [ inline ] fn from ( obj : MessageEvent ) -> JsValue { obj . obj . into ( ) } } impl JsCast for MessageEvent { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_MessageEvent ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_MessageEvent ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_MessageEvent ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { MessageEvent { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const MessageEvent ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < MessageEvent > for Event { # [ inline ] fn from ( obj : MessageEvent ) -> Event { use wasm_bindgen :: JsCast ; Event :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Event > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & Event { use wasm_bindgen :: JsCast ; Event :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < MessageEvent > for Object { # [ inline ] fn from ( obj : MessageEvent ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < MessageEvent as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `new MessageEvent(..)` constructor, creating a new instance of `MessageEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_ : & str ) -> Result < MessageEvent , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_MessageEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_MessageEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( type_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_new_MessageEvent ( type_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event ( & self , type_ : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_init_message_event_MessageEvent ( self_ , type_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles ( & self , type_ : & str , bubbles : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ , type_ , bubbles ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable ( & self , type_ : & str , bubbles : bool , cancelable : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ , type_ , bubbles , cancelable ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable , data ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ , type_ , bubbles , cancelable , data ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable , data , origin ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str , last_event_id : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin , & mut __stack ) ; let last_event_id = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( last_event_id , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str , last_event_id : & str , source : Option < & Window > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , source : < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , source : < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id , source ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin , & mut __stack ) ; let last_event_id = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( last_event_id , & mut __stack ) ; let source = < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( source , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id , source ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str , last_event_id : & str , source : Option < & Window > , ports : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , source : < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ports : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , source : < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ports : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id , source , ports ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles , & mut __stack ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable , & mut __stack ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin , & mut __stack ) ; let last_event_id = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( last_event_id , & mut __stack ) ; let source = < Option < & Window > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( source , & mut __stack ) ; let ports = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ports , & mut __stack ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id , source , ports ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_data_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `data` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn data ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_data_MessageEvent ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_origin_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn origin ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_origin_MessageEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_event_id_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `lastEventId` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn last_event_id ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_last_event_id_MessageEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_source_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Object > as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `source` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn source ( & self , ) -> Option < :: js_sys :: Object > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_source_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_source_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_source_MessageEvent ( self_ ) } ; < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ports_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `ports` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ports ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ports_MessageEvent ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Navigator` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Navigator { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Navigator : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Navigator { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for Navigator { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for Navigator { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Navigator { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Navigator { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Navigator { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { Navigator { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for Navigator { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Navigator { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Navigator { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Navigator > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Navigator { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for Navigator { # [ inline ] fn from ( obj : JsValue ) -> Navigator { Navigator { obj : obj . into ( ) } } } impl AsRef < JsValue > for Navigator { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < Navigator > for Navigator { # [ inline ] fn as_ref ( & self ) -> & Navigator { self } } impl From < Navigator > for JsValue { # [ inline ] fn from ( obj : Navigator ) -> JsValue { obj . obj . into ( ) } } impl JsCast for Navigator { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_Navigator ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_Navigator ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Navigator ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Navigator { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Navigator ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < Navigator > for Object { # [ inline ] fn from ( obj : Navigator ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Navigator { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_gamepads_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `getGamepads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn get_gamepads ( & self , ) -> Result < :: js_sys :: Array , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_get_gamepads_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_get_gamepads_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_gamepads_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_vr_displays_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `getVRDisplays()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDisplays)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn get_vr_displays ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_get_vr_displays_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_get_vr_displays_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_vr_displays_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_midi_access_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `requestMIDIAccess()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMIDIAccess)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn request_midi_access ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_request_midi_access_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_request_midi_access_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_request_midi_access_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_media_key_system_access_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `requestMediaKeySystemAccess()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn request_media_key_system_access ( & self , key_system : & str , supported_configurations : & :: wasm_bindgen :: JsValue ) -> :: js_sys :: Promise { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_request_media_key_system_access_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_system : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , supported_configurations : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_request_media_key_system_access_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_system : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , supported_configurations : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , key_system , supported_configurations ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let key_system = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_system , & mut __stack ) ; let supported_configurations = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( supported_configurations , & mut __stack ) ; __widl_f_request_media_key_system_access_Navigator ( self_ , key_system , supported_configurations ) } ; < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_send_beacon_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `sendBeacon()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn send_beacon ( & self , url : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_send_beacon_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_send_beacon_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; __widl_f_send_beacon_Navigator ( self_ , url ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_send_beacon_with_opt_buffer_source_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Object > as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `sendBeacon()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn send_beacon_with_opt_buffer_source ( & self , url : & str , data : Option < & :: js_sys :: Object > ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_send_beacon_with_opt_buffer_source_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & :: js_sys :: Object > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_send_beacon_with_opt_buffer_source_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & :: js_sys :: Object > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url , data ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let data = < Option < & :: js_sys :: Object > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_send_beacon_with_opt_buffer_source_Navigator ( self_ , url , data ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_send_beacon_with_opt_u8_array_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < & mut [ u8 ] > as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `sendBeacon()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn send_beacon_with_opt_u8_array ( & self , url : & str , data : Option < & mut [ u8 ] > ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_send_beacon_with_opt_u8_array_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_send_beacon_with_opt_u8_array_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url , data ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let data = < Option < & mut [ u8 ] > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_send_beacon_with_opt_u8_array_Navigator ( self_ , url , data ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_send_beacon_with_opt_str_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `sendBeacon()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn send_beacon_with_opt_str ( & self , url : & str , data : Option < & str > ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_send_beacon_with_opt_str_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & str > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_send_beacon_with_opt_str_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < Option < & str > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url , data ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let data = < Option < & str > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_send_beacon_with_opt_str_Navigator ( self_ , url , data ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_vibrate_with_duration_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `vibrate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn vibrate_with_duration ( & self , duration : u32 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_vibrate_with_duration_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , duration : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_vibrate_with_duration_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , duration : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , duration ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let duration = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( duration , & mut __stack ) ; __widl_f_vibrate_with_duration_Navigator ( self_ , duration ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_vibrate_with_pattern_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `vibrate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn vibrate_with_pattern ( & self , pattern : & :: wasm_bindgen :: JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_vibrate_with_pattern_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , pattern : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_vibrate_with_pattern_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , pattern : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , pattern ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let pattern = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( pattern , & mut __stack ) ; __widl_f_vibrate_with_pattern_Navigator ( self_ , pattern ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_do_not_track_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `doNotTrack` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn do_not_track ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_do_not_track_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_do_not_track_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_do_not_track_Navigator ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_max_touch_points_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `maxTouchPoints` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn max_touch_points ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_max_touch_points_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_max_touch_points_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_max_touch_points_Navigator ( self_ ) } ; < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_active_vr_displays_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `activeVRDisplays` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn active_vr_displays ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_active_vr_displays_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_active_vr_displays_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_active_vr_displays_Navigator ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_hardware_concurrency_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `hardwareConcurrency` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn hardware_concurrency ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_hardware_concurrency_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_hardware_concurrency_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_hardware_concurrency_Navigator ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_register_content_handler_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `registerContentHandler()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerContentHandler)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn register_content_handler ( & self , mime_type : & str , url : & str , title : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_register_content_handler_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , mime_type : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , title : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_register_content_handler_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , mime_type : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , title : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , mime_type , url , title ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let mime_type = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( mime_type , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let title = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( title , & mut __stack ) ; __widl_f_register_content_handler_Navigator ( self_ , mime_type , url , title ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_register_protocol_handler_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `registerProtocolHandler()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn register_protocol_handler ( & self , scheme : & str , url : & str , title : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_register_protocol_handler_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , scheme : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , title : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_register_protocol_handler_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , scheme : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , title : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , scheme , url , title ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let scheme = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( scheme , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let title = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( title , & mut __stack ) ; __widl_f_register_protocol_handler_Navigator ( self_ , scheme , url , title ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_taint_enabled_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `taintEnabled()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/taintEnabled)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn taint_enabled ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_taint_enabled_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_taint_enabled_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_taint_enabled_Navigator ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_app_code_name_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `appCodeName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appCodeName)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn app_code_name ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_app_code_name_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_app_code_name_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_app_code_name_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_app_name_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `appName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appName)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn app_name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_app_name_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_app_name_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_app_name_Navigator ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_app_version_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `appVersion` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appVersion)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn app_version ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_app_version_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_app_version_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_app_version_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_platform_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `platform` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn platform ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_platform_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_platform_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_platform_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_user_agent_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `userAgent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn user_agent ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_user_agent_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_user_agent_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_user_agent_Navigator ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_product_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `product` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/product)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn product ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_product_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_product_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_product_Navigator ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_language_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `language` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn language ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_language_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_language_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_language_Navigator ( self_ ) } ; < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_languages_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `languages` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn languages ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_languages_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_languages_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_languages_Navigator ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_on_line_Navigator ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Navigator as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Navigator { # [ allow ( bad_style ) ] # [ doc = "The `onLine` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine)\n\n*This API requires the following crate features to be activated: `Navigator`*" ] # [ allow ( clippy :: all ) ] pub fn on_line ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_on_line_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_on_line_Navigator ( self_ : < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Navigator as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_on_line_Navigator ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Window` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Window { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Window : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Window { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for Window { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for Window { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Window { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Window { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Window { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { Window { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for Window { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Window { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Window { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Window > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Window { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for Window { # [ inline ] fn from ( obj : JsValue ) -> Window { Window { obj : obj . into ( ) } } } impl AsRef < JsValue > for Window { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < Window > for Window { # [ inline ] fn as_ref ( & self ) -> & Window { self } } impl From < Window > for JsValue { # [ inline ] fn from ( obj : Window ) -> JsValue { obj . obj . into ( ) } } impl JsCast for Window { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_Window ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_Window ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Window ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Window { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Window ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < Window > for Object { # [ inline ] fn from ( obj : Window ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Window { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alert_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_alert_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_alert_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_alert_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alert_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert_with_message ( & self , message : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_alert_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_alert_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_alert_with_message_Window ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_blur_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `blur()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn blur ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_blur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_blur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_blur_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancel_animation_frame_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `cancelAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_animation_frame ( & self , handle : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_cancel_animation_frame_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_cancel_animation_frame_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , handle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_cancel_animation_frame_Window ( self_ , handle ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancel_idle_callback_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `cancelIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_idle_callback ( & self , handle : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_cancel_idle_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_cancel_idle_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , handle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < u32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_cancel_idle_callback_Window ( self_ , handle ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_capture_events_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `captureEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn capture_events ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_capture_events_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_capture_events_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_capture_events_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_close_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn close ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_close_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_close_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_close_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_confirm_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_confirm_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_confirm_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_confirm_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_confirm_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm_with_message ( & self , message : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_confirm_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_confirm_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , message ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_confirm_with_message_Window ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_focus_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `focus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn focus ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_focus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_focus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_focus_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_by_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `moveBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_move_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_move_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_by_Window ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_to_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_move_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_move_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_to_Window ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_open_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_open_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_open_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url ( & self , url : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_open_with_url_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_open_with_url_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; __widl_f_open_with_url_Window ( self_ , url ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target ( & self , url : & str , target : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_open_with_url_and_target_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_open_with_url_and_target_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url , target ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let target = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target , & mut __stack ) ; __widl_f_open_with_url_and_target_Window ( self_ , url , target ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_and_features_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target_and_features ( & self , url : & str , target : & str , features : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_open_with_url_and_target_and_features_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , features : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_open_with_url_and_target_and_features_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , features : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , url , target , features ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let target = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target , & mut __stack ) ; let features = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( features , & mut __stack ) ; __widl_f_open_with_url_and_target_and_features_Window ( self_ , url , target , features ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message , target_origin ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let target_origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target_origin , & mut __stack ) ; __widl_f_post_message_Window ( self_ , message , target_origin ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_with_transfer_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_with_transfer_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message , target_origin , transfer ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let target_origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target_origin , & mut __stack ) ; let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( transfer , & mut __stack ) ; __widl_f_post_message_with_transfer_Window ( self_ , message , target_origin , transfer ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_print_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `print()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn print ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_print_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_print_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_print_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt ( & self , ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_prompt_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_prompt_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prompt_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message ( & self , message : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_prompt_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_prompt_with_message_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , message ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_prompt_with_message_Window ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_and_default_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message_and_default ( & self , message : & str , default : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_prompt_with_message_and_default_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , default : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_prompt_with_message_and_default_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , default : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , message , default ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let default = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( default , & mut __stack ) ; __widl_f_prompt_with_message_and_default_Window ( self_ , message , default ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < String > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_release_events_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `releaseEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn release_events ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_release_events_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_release_events_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_release_events_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_animation_frame_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `requestAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_animation_frame ( & self , callback : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_request_animation_frame_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_request_animation_frame_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , callback ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; __widl_f_request_animation_frame_Window ( self_ , callback ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_idle_callback_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_idle_callback ( & self , callback : & :: js_sys :: Function ) -> Result < u32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_request_idle_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_request_idle_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , callback ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; __widl_f_request_idle_callback_Window ( self_ , callback ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_resize_by_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `resizeBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_resize_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_resize_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_resize_by_Window ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_resize_to_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `resizeTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_resize_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_resize_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_resize_to_Window ( self_ , x , y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_by_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_by_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_by_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_by_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_by_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_to_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_to_with_x_and_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , x , y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_to_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_to_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_to_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stop_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn stop ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_stop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_stop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stop_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Object as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The indexing getter\n\n\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn get ( & self , name : & str ) -> :: js_sys :: Object { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_get_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Object as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_get_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Object as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , name ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_get_Window ( self_ , name ) } ; < :: js_sys :: Object as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_window_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `window` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn window ( & self , ) -> Window { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_window_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_window_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_window_Window ( self_ ) } ; < Window as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_self_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `self` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn self_ ( & self , ) -> Window { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_self_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_self_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_self_Window ( self_ ) } ; < Window as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_name_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_name_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_name_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_name_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_name_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_name ( & self , name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_name_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_name_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , name ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_set_name_Window ( self_ , name ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_status_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `status` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn status ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_status_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_status_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_status_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_status_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `status` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_status ( & self , status : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_status_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , status : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_status_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , status : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , status ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let status = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( status , & mut __stack ) ; __widl_f_set_status_Window ( self_ , status ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_closed_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `closed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn closed ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_closed_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_closed_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_closed_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_event_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `event` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn event ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_event_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_event_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_event_Window ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_frames_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `frames` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn frames ( & self , ) -> Result < Window , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_frames_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_frames_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_frames_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Window as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_length_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn length ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_length_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_length_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_length_Window ( self_ ) } ; < u32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_top_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `top` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn top ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_top_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_top_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_top_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_opener_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `opener` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn opener ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_opener_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_opener_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_opener_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_opener_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `opener` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_opener ( & self , opener : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_opener_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , opener : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_opener_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , opener : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , opener ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let opener = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( opener , & mut __stack ) ; __widl_f_set_opener_Window ( self_ , opener ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_parent_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `parent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn parent ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_parent_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_parent_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_parent_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Option < Window > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_navigator_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Navigator as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `navigator` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator)\n\n*This API requires the following crate features to be activated: `Navigator`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn navigator ( & self , ) -> Navigator { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_navigator_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Navigator as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_navigator_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Navigator as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_navigator_Window ( self_ ) } ; < Navigator as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onappinstalled_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onappinstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onappinstalled ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onappinstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onappinstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onappinstalled_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onappinstalled_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onappinstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onappinstalled ( & self , onappinstalled : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onappinstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onappinstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onappinstalled ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onappinstalled = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onappinstalled , & mut __stack ) ; __widl_f_set_onappinstalled_Window ( self_ , onappinstalled ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_inner_width_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `innerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_inner_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_inner_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_inner_width_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_inner_width_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `innerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_width ( & self , inner_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_inner_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_width : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_inner_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_width : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , inner_width ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let inner_width = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( inner_width , & mut __stack ) ; __widl_f_set_inner_width_Window ( self_ , inner_width ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_inner_height_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `innerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_inner_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_inner_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_inner_height_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_inner_height_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `innerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_height ( & self , inner_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_inner_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_height : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_inner_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_height : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , inner_height ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let inner_height = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( inner_height , & mut __stack ) ; __widl_f_set_inner_height_Window ( self_ , inner_height ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_x_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_x ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_x_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_page_x_offset_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `pageXOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_x_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_page_x_offset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_page_x_offset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_page_x_offset_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `scrollY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_y ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_scroll_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_scroll_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_y_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_page_y_offset_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `pageYOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_y_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_page_y_offset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_page_y_offset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_page_y_offset_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_x_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_x ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_screen_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_screen_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_x_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_screen_x_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `screenX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_x ( & self , screen_x : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_screen_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_screen_x_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , screen_x ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let screen_x = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x , & mut __stack ) ; __widl_f_set_screen_x_Window ( self_ , screen_x ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_y ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_screen_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_screen_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_y_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_screen_y_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `screenY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_y ( & self , screen_y : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_screen_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_screen_y_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , screen_y ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let screen_y = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y , & mut __stack ) ; __widl_f_set_screen_y_Window ( self_ , screen_y ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_outer_width_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `outerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_outer_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_outer_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_outer_width_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_outer_width_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `outerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_width ( & self , outer_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_outer_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_width : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_outer_width_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_width : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , outer_width ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let outer_width = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( outer_width , & mut __stack ) ; __widl_f_set_outer_width_Window ( self_ , outer_width ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_outer_height_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `outerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_outer_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_outer_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_outer_height_Window ( self_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_outer_height_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `outerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_height ( & self , outer_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_outer_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_height : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_outer_height_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_height : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , outer_height ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let outer_height = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( outer_height , & mut __stack ) ; __widl_f_set_outer_height_Window ( self_ , outer_height ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_device_pixel_ratio_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `devicePixelRatio` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn device_pixel_ratio ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_device_pixel_ratio_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_device_pixel_ratio_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_device_pixel_ratio_Window ( self_ ) } ; < f64 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_orientation_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i16 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `orientation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn orientation ( & self , ) -> i16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_orientation_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i16 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_orientation_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i16 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_orientation_Window ( self_ ) } ; < i16 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onorientationchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onorientationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onorientationchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onorientationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onorientationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onorientationchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onorientationchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onorientationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onorientationchange ( & self , onorientationchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onorientationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onorientationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onorientationchange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onorientationchange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onorientationchange , & mut __stack ) ; __widl_f_set_onorientationchange_Window ( self_ , onorientationchange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayconnect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplayconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayconnect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvrdisplayconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvrdisplayconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplayconnect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayconnect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplayconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayconnect ( & self , onvrdisplayconnect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvrdisplayconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvrdisplayconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvrdisplayconnect ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplayconnect = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplayconnect , & mut __stack ) ; __widl_f_set_onvrdisplayconnect_Window ( self_ , onvrdisplayconnect ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydisconnect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaydisconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydisconnect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvrdisplaydisconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvrdisplaydisconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaydisconnect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydisconnect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaydisconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydisconnect ( & self , onvrdisplaydisconnect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvrdisplaydisconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvrdisplaydisconnect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvrdisplaydisconnect ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaydisconnect = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaydisconnect , & mut __stack ) ; __widl_f_set_onvrdisplaydisconnect_Window ( self_ , onvrdisplaydisconnect ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayactivate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplayactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayactivate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvrdisplayactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvrdisplayactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplayactivate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayactivate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplayactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayactivate ( & self , onvrdisplayactivate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvrdisplayactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvrdisplayactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvrdisplayactivate ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplayactivate = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplayactivate , & mut __stack ) ; __widl_f_set_onvrdisplayactivate_Window ( self_ , onvrdisplayactivate ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydeactivate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaydeactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydeactivate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvrdisplaydeactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvrdisplaydeactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaydeactivate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydeactivate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaydeactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydeactivate ( & self , onvrdisplaydeactivate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvrdisplaydeactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvrdisplaydeactivate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvrdisplaydeactivate ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaydeactivate = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaydeactivate , & mut __stack ) ; __widl_f_set_onvrdisplaydeactivate_Window ( self_ , onvrdisplaydeactivate ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaypresentchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaypresentchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaypresentchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvrdisplaypresentchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvrdisplaypresentchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaypresentchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaypresentchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvrdisplaypresentchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaypresentchange ( & self , onvrdisplaypresentchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvrdisplaypresentchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvrdisplaypresentchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvrdisplaypresentchange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaypresentchange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaypresentchange , & mut __stack ) ; __widl_f_set_onvrdisplaypresentchange_Window ( self_ , onvrdisplaypresentchange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onabort_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onabort ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onabort_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onabort_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onabort_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onabort ( & self , onabort : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onabort_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onabort : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onabort_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onabort : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onabort ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onabort = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onabort , & mut __stack ) ; __widl_f_set_onabort_Window ( self_ , onabort ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onblur_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onblur ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onblur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onblur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onblur_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onblur ( & self , onblur : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onblur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onblur : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onblur_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onblur : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onblur ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onblur = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onblur , & mut __stack ) ; __widl_f_set_onblur_Window ( self_ , onblur ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onfocus ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onfocus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onfocus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onfocus_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfocus ( & self , onfocus : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onfocus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfocus : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onfocus_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfocus : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onfocus ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onfocus = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onfocus , & mut __stack ) ; __widl_f_set_onfocus_Window ( self_ , onfocus ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onauxclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onauxclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onauxclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onauxclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onauxclick ( & self , onauxclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onauxclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onauxclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onauxclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onauxclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onauxclick ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onauxclick = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onauxclick , & mut __stack ) ; __widl_f_set_onauxclick_Window ( self_ , onauxclick ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_oncanplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_oncanplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplay_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplay ( & self , oncanplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_oncanplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplay : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_oncanplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplay : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , oncanplay ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplay = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplay , & mut __stack ) ; __widl_f_set_oncanplay_Window ( self_ , oncanplay ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplaythrough ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_oncanplaythrough_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_oncanplaythrough_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplaythrough_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplaythrough ( & self , oncanplaythrough : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_oncanplaythrough_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_oncanplaythrough_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , oncanplaythrough ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplaythrough = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplaythrough , & mut __stack ) ; __widl_f_set_oncanplaythrough_Window ( self_ , oncanplaythrough ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onchange ( & self , onchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onchange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onchange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onchange , & mut __stack ) ; __widl_f_set_onchange_Window ( self_ , onchange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclick ( & self , onclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onclick ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclick = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclick , & mut __stack ) ; __widl_f_set_onclick_Window ( self_ , onclick ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclose_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclose ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onclose_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onclose_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclose_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclose ( & self , onclose : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onclose_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclose : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onclose_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclose : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onclose ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclose = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclose , & mut __stack ) ; __widl_f_set_onclose_Window ( self_ , onclose ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncontextmenu ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_oncontextmenu_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_oncontextmenu_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncontextmenu_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncontextmenu ( & self , oncontextmenu : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_oncontextmenu_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncontextmenu : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_oncontextmenu_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncontextmenu : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , oncontextmenu ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncontextmenu = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncontextmenu , & mut __stack ) ; __widl_f_set_oncontextmenu_Window ( self_ , oncontextmenu ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondblclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondblclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondblclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondblclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondblclick ( & self , ondblclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondblclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondblclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondblclick_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondblclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondblclick ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondblclick = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondblclick , & mut __stack ) ; __widl_f_set_ondblclick_Window ( self_ , ondblclick ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrag ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondrag_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondrag_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrag_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrag ( & self , ondrag : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondrag_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrag : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondrag_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrag : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondrag ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrag = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrag , & mut __stack ) ; __widl_f_set_ondrag_Window ( self_ , ondrag ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragend ( & self , ondragend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragend , & mut __stack ) ; __widl_f_set_ondragend_Window ( self_ , ondragend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragenter ( & self , ondragenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragenter ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragenter = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragenter , & mut __stack ) ; __widl_f_set_ondragenter_Window ( self_ , ondragenter ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragexit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragexit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragexit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragexit_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragexit ( & self , ondragexit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragexit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragexit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragexit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragexit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragexit ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragexit = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragexit , & mut __stack ) ; __widl_f_set_ondragexit_Window ( self_ , ondragexit ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragleave ( & self , ondragleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragleave ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragleave = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragleave , & mut __stack ) ; __widl_f_set_ondragleave_Window ( self_ , ondragleave ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragover ( & self , ondragover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragover ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragover = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragover , & mut __stack ) ; __widl_f_set_ondragover_Window ( self_ , ondragover ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondragstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondragstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragstart ( & self , ondragstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondragstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondragstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondragstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragstart , & mut __stack ) ; __widl_f_set_ondragstart_Window ( self_ , ondragstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrop ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondrop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondrop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrop_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrop ( & self , ondrop : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondrop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrop : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondrop_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrop : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondrop ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrop = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrop , & mut __stack ) ; __widl_f_set_ondrop_Window ( self_ , ondrop ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondurationchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ondurationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ondurationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondurationchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondurationchange ( & self , ondurationchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ondurationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ondurationchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ondurationchange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondurationchange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondurationchange , & mut __stack ) ; __widl_f_set_ondurationchange_Window ( self_ , ondurationchange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onemptied ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onemptied_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onemptied_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onemptied_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onemptied ( & self , onemptied : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onemptied_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onemptied : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onemptied_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onemptied : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onemptied ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onemptied = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onemptied , & mut __stack ) ; __widl_f_set_onemptied_Window ( self_ , onemptied ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onended_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onended ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onended_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onended_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onended_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onended ( & self , onended : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onended_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onended : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onended_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onended : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onended ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onended = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onended , & mut __stack ) ; __widl_f_set_onended_Window ( self_ , onended ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninput_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninput ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_oninput_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_oninput_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninput_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninput ( & self , oninput : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_oninput_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninput : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_oninput_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninput : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , oninput ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninput = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninput , & mut __stack ) ; __widl_f_set_oninput_Window ( self_ , oninput ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninvalid ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_oninvalid_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_oninvalid_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninvalid_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninvalid ( & self , oninvalid : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_oninvalid_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninvalid : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_oninvalid_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninvalid : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , oninvalid ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninvalid = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninvalid , & mut __stack ) ; __widl_f_set_oninvalid_Window ( self_ , oninvalid ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeydown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onkeydown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onkeydown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeydown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeydown ( & self , onkeydown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onkeydown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeydown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onkeydown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeydown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onkeydown ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeydown = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeydown , & mut __stack ) ; __widl_f_set_onkeydown_Window ( self_ , onkeydown ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeypress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onkeypress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onkeypress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeypress_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeypress ( & self , onkeypress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onkeypress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeypress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onkeypress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeypress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onkeypress ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeypress = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeypress , & mut __stack ) ; __widl_f_set_onkeypress_Window ( self_ , onkeypress ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeyup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onkeyup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onkeyup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeyup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeyup ( & self , onkeyup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onkeyup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeyup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onkeyup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeyup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onkeyup ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeyup = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeyup , & mut __stack ) ; __widl_f_set_onkeyup_Window ( self_ , onkeyup ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onload ( & self , onload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onload ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onload = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onload , & mut __stack ) ; __widl_f_set_onload_Window ( self_ , onload ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadeddata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onloadeddata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onloadeddata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadeddata_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadeddata ( & self , onloadeddata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onloadeddata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadeddata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onloadeddata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadeddata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onloadeddata ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadeddata = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadeddata , & mut __stack ) ; __widl_f_set_onloadeddata_Window ( self_ , onloadeddata ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadedmetadata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onloadedmetadata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onloadedmetadata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadedmetadata_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadedmetadata ( & self , onloadedmetadata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onloadedmetadata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onloadedmetadata_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onloadedmetadata ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadedmetadata = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadedmetadata , & mut __stack ) ; __widl_f_set_onloadedmetadata_Window ( self_ , onloadedmetadata ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onloadend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onloadend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadend ( & self , onloadend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onloadend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onloadend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onloadend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadend , & mut __stack ) ; __widl_f_set_onloadend_Window ( self_ , onloadend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onloadstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onloadstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadstart ( & self , onloadstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onloadstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onloadstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onloadstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadstart , & mut __stack ) ; __widl_f_set_onloadstart_Window ( self_ , onloadstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousedown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmousedown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmousedown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousedown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousedown ( & self , onmousedown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmousedown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousedown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmousedown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousedown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmousedown ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousedown = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousedown , & mut __stack ) ; __widl_f_set_onmousedown_Window ( self_ , onmousedown ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmouseenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmouseenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseenter ( & self , onmouseenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmouseenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmouseenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmouseenter ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseenter = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseenter , & mut __stack ) ; __widl_f_set_onmouseenter_Window ( self_ , onmouseenter ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmouseleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmouseleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseleave ( & self , onmouseleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmouseleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmouseleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmouseleave ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseleave = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseleave , & mut __stack ) ; __widl_f_set_onmouseleave_Window ( self_ , onmouseleave ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousemove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmousemove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmousemove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousemove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousemove ( & self , onmousemove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmousemove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousemove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmousemove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousemove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmousemove ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousemove = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousemove , & mut __stack ) ; __widl_f_set_onmousemove_Window ( self_ , onmousemove ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmouseout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmouseout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseout_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseout ( & self , onmouseout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmouseout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmouseout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmouseout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseout = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseout , & mut __stack ) ; __widl_f_set_onmouseout_Window ( self_ , onmouseout ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmouseover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmouseover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseover ( & self , onmouseover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmouseover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmouseover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmouseover ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseover = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseover , & mut __stack ) ; __widl_f_set_onmouseover_Window ( self_ , onmouseover ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmouseup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmouseup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseup ( & self , onmouseup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmouseup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmouseup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmouseup ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseup = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseup , & mut __stack ) ; __widl_f_set_onmouseup_Window ( self_ , onmouseup ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwheel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwheel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwheel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwheel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwheel ( & self , onwheel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwheel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwheel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwheel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwheel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwheel ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwheel = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwheel , & mut __stack ) ; __widl_f_set_onwheel_Window ( self_ , onwheel ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpause_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpause ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpause_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpause_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpause_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpause ( & self , onpause : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpause_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpause : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpause_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpause : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpause ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpause = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpause , & mut __stack ) ; __widl_f_set_onpause_Window ( self_ , onpause ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplay_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplay_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplay ( & self , onplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplay : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onplay_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplay : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onplay ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplay = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplay , & mut __stack ) ; __widl_f_set_onplay_Window ( self_ , onplay ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplaying ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onplaying_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onplaying_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplaying_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplaying ( & self , onplaying : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onplaying_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplaying : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onplaying_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplaying : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onplaying ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplaying = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplaying , & mut __stack ) ; __widl_f_set_onplaying_Window ( self_ , onplaying ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onprogress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onprogress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onprogress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onprogress_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onprogress ( & self , onprogress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onprogress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onprogress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onprogress_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onprogress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onprogress ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onprogress = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onprogress , & mut __stack ) ; __widl_f_set_onprogress_Window ( self_ , onprogress ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onratechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onratechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onratechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onratechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onratechange ( & self , onratechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onratechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onratechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onratechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onratechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onratechange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onratechange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onratechange , & mut __stack ) ; __widl_f_set_onratechange_Window ( self_ , onratechange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onreset_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onreset ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onreset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onreset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onreset_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreset ( & self , onreset : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onreset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onreset : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onreset_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onreset : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onreset ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onreset = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onreset , & mut __stack ) ; __widl_f_set_onreset_Window ( self_ , onreset ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onresize_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onresize ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onresize_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onresize_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onresize_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresize ( & self , onresize : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onresize_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onresize : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onresize_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onresize : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onresize ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onresize = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onresize , & mut __stack ) ; __widl_f_set_onresize_Window ( self_ , onresize ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onscroll ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onscroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onscroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onscroll_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onscroll ( & self , onscroll : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onscroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onscroll : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onscroll_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onscroll : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onscroll ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onscroll = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onscroll , & mut __stack ) ; __widl_f_set_onscroll_Window ( self_ , onscroll ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeked ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onseeked_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onseeked_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeked_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeked ( & self , onseeked : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onseeked_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeked : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onseeked_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeked : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onseeked ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeked = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeked , & mut __stack ) ; __widl_f_set_onseeked_Window ( self_ , onseeked ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeking ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onseeking_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onseeking_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeking_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeking ( & self , onseeking : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onseeking_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeking : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onseeking_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeking : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onseeking ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeking = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeking , & mut __stack ) ; __widl_f_set_onseeking_Window ( self_ , onseeking ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onselect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onselect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselect ( & self , onselect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onselect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onselect_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onselect ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselect = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselect , & mut __stack ) ; __widl_f_set_onselect_Window ( self_ , onselect ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onshow_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onshow ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onshow_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onshow ( & self , onshow : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onshow ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onshow = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onshow , & mut __stack ) ; __widl_f_set_onshow_Window ( self_ , onshow ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstalled ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onstalled_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstalled ( & self , onstalled : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onstalled_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onstalled ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onstalled = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onstalled , & mut __stack ) ; __widl_f_set_onstalled_Window ( self_ , onstalled ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsubmit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onsubmit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onsubmit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsubmit_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsubmit ( & self , onsubmit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onsubmit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsubmit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onsubmit_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsubmit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onsubmit ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsubmit = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsubmit , & mut __stack ) ; __widl_f_set_onsubmit_Window ( self_ , onsubmit ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsuspend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onsuspend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onsuspend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsuspend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsuspend ( & self , onsuspend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onsuspend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsuspend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onsuspend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsuspend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onsuspend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsuspend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsuspend , & mut __stack ) ; __widl_f_set_onsuspend_Window ( self_ , onsuspend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontimeupdate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontimeupdate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontimeupdate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontimeupdate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontimeupdate ( & self , ontimeupdate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontimeupdate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontimeupdate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontimeupdate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontimeupdate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontimeupdate ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontimeupdate = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontimeupdate , & mut __stack ) ; __widl_f_set_ontimeupdate_Window ( self_ , ontimeupdate ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvolumechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onvolumechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onvolumechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvolumechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvolumechange ( & self , onvolumechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onvolumechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onvolumechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onvolumechange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvolumechange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvolumechange , & mut __stack ) ; __widl_f_set_onvolumechange_Window ( self_ , onvolumechange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwaiting ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwaiting_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwaiting_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwaiting_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaiting ( & self , onwaiting : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwaiting_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwaiting : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwaiting_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwaiting : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwaiting ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwaiting = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwaiting , & mut __stack ) ; __widl_f_set_onwaiting_Window ( self_ , onwaiting ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselectstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onselectstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onselectstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselectstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectstart ( & self , onselectstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onselectstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselectstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onselectstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselectstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onselectstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselectstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselectstart , & mut __stack ) ; __widl_f_set_onselectstart_Window ( self_ , onselectstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontoggle ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontoggle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontoggle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontoggle_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontoggle ( & self , ontoggle : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontoggle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontoggle : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontoggle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontoggle : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontoggle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontoggle = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontoggle , & mut __stack ) ; __widl_f_set_ontoggle_Window ( self_ , ontoggle ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointercancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointercancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointercancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointercancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointercancel ( & self , onpointercancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointercancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointercancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointercancel ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointercancel = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointercancel , & mut __stack ) ; __widl_f_set_onpointercancel_Window ( self_ , onpointercancel ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerdown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerdown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerdown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerdown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerdown ( & self , onpointerdown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerdown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerdown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerdown_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerdown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerdown ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerdown = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerdown , & mut __stack ) ; __widl_f_set_onpointerdown_Window ( self_ , onpointerdown ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerup ( & self , onpointerup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerup_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerup ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerup = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerup , & mut __stack ) ; __widl_f_set_onpointerup_Window ( self_ , onpointerup ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointermove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointermove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointermove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointermove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointermove ( & self , onpointermove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointermove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointermove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointermove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointermove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointermove ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointermove = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointermove , & mut __stack ) ; __widl_f_set_onpointermove_Window ( self_ , onpointermove ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerout_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerout ( & self , onpointerout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerout = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerout , & mut __stack ) ; __widl_f_set_onpointerout_Window ( self_ , onpointerout ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerover ( & self , onpointerover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerover_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerover ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerover = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerover , & mut __stack ) ; __widl_f_set_onpointerover_Window ( self_ , onpointerover ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerenter ( & self , onpointerenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerenter_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerenter ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerenter = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerenter , & mut __stack ) ; __widl_f_set_onpointerenter_Window ( self_ , onpointerenter ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpointerleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpointerleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerleave ( & self , onpointerleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpointerleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpointerleave_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpointerleave ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerleave = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerleave , & mut __stack ) ; __widl_f_set_onpointerleave_Window ( self_ , onpointerleave ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ongotpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ongotpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ongotpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ongotpointercapture_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ongotpointercapture ( & self , ongotpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ongotpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ongotpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ongotpointercapture ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ongotpointercapture = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ongotpointercapture , & mut __stack ) ; __widl_f_set_ongotpointercapture_Window ( self_ , ongotpointercapture ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlostpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onlostpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onlostpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onlostpointercapture_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlostpointercapture ( & self , onlostpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onlostpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onlostpointercapture_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onlostpointercapture ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onlostpointercapture = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onlostpointercapture , & mut __stack ) ; __widl_f_set_onlostpointercapture_Window ( self_ , onlostpointercapture ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onanimationcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onanimationcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationcancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationcancel ( & self , onanimationcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onanimationcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onanimationcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onanimationcancel ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationcancel = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationcancel , & mut __stack ) ; __widl_f_set_onanimationcancel_Window ( self_ , onanimationcancel ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationend ( & self , onanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onanimationend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationend , & mut __stack ) ; __widl_f_set_onanimationend_Window ( self_ , onanimationend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationiteration_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationiteration ( & self , onanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onanimationiteration ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationiteration = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationiteration , & mut __stack ) ; __widl_f_set_onanimationiteration_Window ( self_ , onanimationiteration ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationstart ( & self , onanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onanimationstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationstart , & mut __stack ) ; __widl_f_set_onanimationstart_Window ( self_ , onanimationstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitioncancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontransitioncancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontransitioncancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitioncancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitioncancel ( & self , ontransitioncancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontransitioncancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontransitioncancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontransitioncancel ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitioncancel = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitioncancel , & mut __stack ) ; __widl_f_set_ontransitioncancel_Window ( self_ , ontransitioncancel ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionend ( & self , ontransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontransitionend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionend , & mut __stack ) ; __widl_f_set_ontransitionend_Window ( self_ , ontransitionend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionrun ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontransitionrun_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontransitionrun_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionrun_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionrun ( & self , ontransitionrun : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontransitionrun_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontransitionrun_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontransitionrun ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionrun = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionrun , & mut __stack ) ; __widl_f_set_ontransitionrun_Window ( self_ , ontransitionrun ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontransitionstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontransitionstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionstart ( & self , ontransitionstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontransitionstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontransitionstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontransitionstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionstart , & mut __stack ) ; __widl_f_set_ontransitionstart_Window ( self_ , ontransitionstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwebkitanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwebkitanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationend ( & self , onwebkitanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwebkitanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwebkitanimationend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwebkitanimationend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationend , & mut __stack ) ; __widl_f_set_onwebkitanimationend_Window ( self_ , onwebkitanimationend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwebkitanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwebkitanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationiteration_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationiteration ( & self , onwebkitanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwebkitanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwebkitanimationiteration_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwebkitanimationiteration ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationiteration = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationiteration , & mut __stack ) ; __widl_f_set_onwebkitanimationiteration_Window ( self_ , onwebkitanimationiteration ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwebkitanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwebkitanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationstart ( & self , onwebkitanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwebkitanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwebkitanimationstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwebkitanimationstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationstart , & mut __stack ) ; __widl_f_set_onwebkitanimationstart_Window ( self_ , onwebkitanimationstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkittransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onwebkittransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onwebkittransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkittransitionend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkittransitionend ( & self , onwebkittransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onwebkittransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onwebkittransitionend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onwebkittransitionend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkittransitionend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkittransitionend , & mut __stack ) ; __widl_f_set_onwebkittransitionend_Window ( self_ , onwebkittransitionend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onerror_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onerror_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onerror ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onerror , & mut __stack ) ; __widl_f_set_onerror_Window ( self_ , onerror ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontouchstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontouchstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchstart ( & self , ontouchstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontouchstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontouchstart_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontouchstart ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchstart = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchstart , & mut __stack ) ; __widl_f_set_ontouchstart_Window ( self_ , ontouchstart ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontouchend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontouchend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchend ( & self , ontouchend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontouchend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontouchend_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontouchend ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchend = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchend , & mut __stack ) ; __widl_f_set_ontouchend_Window ( self_ , ontouchend ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchmove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontouchmove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontouchmove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchmove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchmove ( & self , ontouchmove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontouchmove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchmove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontouchmove_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchmove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontouchmove ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchmove = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchmove , & mut __stack ) ; __widl_f_set_ontouchmove_Window ( self_ , ontouchmove ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ontouchcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ontouchcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchcancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchcancel ( & self , ontouchcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ontouchcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ontouchcancel_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ontouchcancel ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchcancel = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchcancel , & mut __stack ) ; __widl_f_set_ontouchcancel_Window ( self_ , ontouchcancel ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onafterprint_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onafterprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onafterprint ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onafterprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onafterprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onafterprint_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onafterprint_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onafterprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onafterprint ( & self , onafterprint : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onafterprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onafterprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onafterprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onafterprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onafterprint ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onafterprint = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onafterprint , & mut __stack ) ; __widl_f_set_onafterprint_Window ( self_ , onafterprint ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onbeforeprint_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onbeforeprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeprint ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onbeforeprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onbeforeprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onbeforeprint_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeprint_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onbeforeprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeprint ( & self , onbeforeprint : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onbeforeprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onbeforeprint_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onbeforeprint ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onbeforeprint = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onbeforeprint , & mut __stack ) ; __widl_f_set_onbeforeprint_Window ( self_ , onbeforeprint ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onbeforeunload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onbeforeunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeunload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onbeforeunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onbeforeunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onbeforeunload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeunload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onbeforeunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeunload ( & self , onbeforeunload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onbeforeunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onbeforeunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onbeforeunload ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onbeforeunload = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onbeforeunload , & mut __stack ) ; __widl_f_set_onbeforeunload_Window ( self_ , onbeforeunload ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onhashchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onhashchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onhashchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onhashchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onhashchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onhashchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onhashchange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onhashchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onhashchange ( & self , onhashchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onhashchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onhashchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onhashchange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onhashchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onhashchange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onhashchange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onhashchange , & mut __stack ) ; __widl_f_set_onhashchange_Window ( self_ , onhashchange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onlanguagechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onlanguagechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlanguagechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onlanguagechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onlanguagechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onlanguagechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onlanguagechange_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onlanguagechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlanguagechange ( & self , onlanguagechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onlanguagechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onlanguagechange_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onlanguagechange ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onlanguagechange = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onlanguagechange , & mut __stack ) ; __widl_f_set_onlanguagechange_Window ( self_ , onlanguagechange ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessage_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessage ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessage = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessage , & mut __stack ) ; __widl_f_set_onmessage_Window ( self_ , onmessage ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessageerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessageerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessageerror_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessageerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessageerror_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessageerror ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessageerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessageerror , & mut __stack ) ; __widl_f_set_onmessageerror_Window ( self_ , onmessageerror ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onoffline_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onoffline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onoffline ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onoffline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onoffline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onoffline_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onoffline_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onoffline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onoffline ( & self , onoffline : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onoffline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onoffline : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onoffline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onoffline : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onoffline ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onoffline = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onoffline , & mut __stack ) ; __widl_f_set_onoffline_Window ( self_ , onoffline ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ononline_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ononline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ononline ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ononline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ononline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ononline_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ononline_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `ononline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ononline ( & self , ononline : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_ononline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ononline : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_ononline_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ononline : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , ononline ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ononline = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ononline , & mut __stack ) ; __widl_f_set_ononline_Window ( self_ , ononline ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpagehide_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpagehide` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpagehide ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpagehide_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpagehide_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpagehide_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpagehide_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpagehide` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpagehide ( & self , onpagehide : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpagehide_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpagehide : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpagehide_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpagehide : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpagehide ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpagehide = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpagehide , & mut __stack ) ; __widl_f_set_onpagehide_Window ( self_ , onpagehide ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpageshow_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpageshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpageshow ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpageshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpageshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpageshow_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpageshow_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpageshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpageshow ( & self , onpageshow : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpageshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpageshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpageshow_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpageshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpageshow ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpageshow = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpageshow , & mut __stack ) ; __widl_f_set_onpageshow_Window ( self_ , onpageshow ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpopstate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpopstate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpopstate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onpopstate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onpopstate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpopstate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpopstate_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onpopstate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpopstate ( & self , onpopstate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onpopstate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpopstate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onpopstate_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpopstate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onpopstate ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpopstate = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpopstate , & mut __stack ) ; __widl_f_set_onpopstate_Window ( self_ , onpopstate ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onstorage_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onstorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstorage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onstorage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onstorage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onstorage_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onstorage_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onstorage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstorage ( & self , onstorage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onstorage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstorage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onstorage_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstorage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onstorage ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onstorage = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onstorage , & mut __stack ) ; __widl_f_set_onstorage_Window ( self_ , onstorage ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onunload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onunload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onunload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onunload_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `onunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onunload ( & self , onunload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onunload_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onunload ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onunload = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onunload , & mut __stack ) ; __widl_f_set_onunload_Window ( self_ , onunload ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_atob_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `atob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn atob ( & self , atob : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_atob_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , atob : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_atob_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , atob : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , atob ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let atob = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( atob , & mut __stack ) ; __widl_f_atob_Window ( self_ , atob ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_btoa_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `btoa()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn btoa ( & self , btoa : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_btoa_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , btoa : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_btoa_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , btoa : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , btoa ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let btoa = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( btoa , & mut __stack ) ; __widl_f_btoa_Window ( self_ , btoa ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_interval_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_interval_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_interval_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_with_handle_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval_with_handle ( & self , handle : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_interval_with_handle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_interval_with_handle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , handle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_clear_interval_with_handle_Window ( self_ , handle ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_timeout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_timeout_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_timeout_Window ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_with_handle_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout_with_handle ( & self , handle : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_clear_timeout_with_handle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_clear_timeout_with_handle_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , handle ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_clear_timeout_with_handle_Window ( self_ , handle ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_data_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageData`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_image_data ( & self , a_image : & ImageData ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_image_data_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_image_data_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_image_data_Window ( self_ , a_image ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d ( & self , a_image : & CanvasRenderingContext2d ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( self_ , a_image ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Object as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source ( & self , a_image : & :: js_sys :: Object ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_buffer_source_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_buffer_source_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_buffer_source_Window ( self_ , a_image ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & mut [ u8 ] as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array ( & self , a_image : & mut [ u8 ] ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_u8_array_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_u8_array_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_u8_array_Window ( self_ , a_image ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & ImageData as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageData`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & ImageData , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & ImageData as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & CanvasRenderingContext2d , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Object as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & :: js_sys :: Object , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & :: js_sys :: Object as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & mut [ u8 ] as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & mut [ u8 ] , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & mut [ u8 ] as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn fetch_with_str ( & self , input : & str ) -> :: js_sys :: Promise { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_fetch_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , input : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_fetch_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , input : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , input ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let input = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( input , & mut __stack ) ; __widl_f_fetch_with_str_Window ( self_ , input ) } ; < :: js_sys :: Promise as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_interval_with_callback_Window ( self_ , handler ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments = < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( self_ , handler , timeout , arguments ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( self_ , handler , timeout ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( self_ , handler , timeout , arguments_1 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( self_ , handler , timeout , arguments_1 , arguments_2 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; let arguments_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_7 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_interval_with_str_Window ( self_ , handler ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused = < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_Window ( self_ , handler , timeout , unused ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( self_ , handler , timeout ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( self_ , handler , timeout , unused_1 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( self_ , handler , timeout , unused_1 , unused_2 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; let unused_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_7 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_timeout_with_callback_Window ( self_ , handler ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments = < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( self_ , handler , timeout , arguments ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( self_ , handler , timeout ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( self_ , handler , timeout , arguments_1 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( self_ , handler , timeout , arguments_1 , arguments_2 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; let arguments_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_7 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_timeout_with_str_Window ( self_ , handler ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused = < & :: js_sys :: Array as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( self_ , handler , timeout , unused ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( self_ , handler , timeout ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( self_ , handler , timeout , unused_1 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( self_ , handler , timeout , unused_1 , unused_2 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; let unused_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_7 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < i32 as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_origin_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn origin ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_origin_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_origin_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_origin_Window ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_secure_context_Window ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ doc = "The `isSecureContext` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn is_secure_context ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_is_secure_context_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_is_secure_context_Window ( self_ : < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_is_secure_context_Window ( self_ ) } ; < bool as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Worker` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Worker { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Worker : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Worker { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for Worker { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for Worker { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Worker { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Worker { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Worker { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self { Worker { obj : JsValue :: from_abi ( js , extra ) . into ( ) , } } } impl OptionFromWasmAbi for Worker { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Worker { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut dyn Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Worker { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Worker > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut dyn Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Worker { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for Worker { # [ inline ] fn from ( obj : JsValue ) -> Worker { Worker { obj : obj . into ( ) } } } impl AsRef < JsValue > for Worker { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < Worker > for Worker { # [ inline ] fn as_ref ( & self ) -> & Worker { self } } impl From < Worker > for JsValue { # [ inline ] fn from ( obj : Worker ) -> JsValue { obj . obj . into ( ) } } impl JsCast for Worker { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_Worker ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_Worker ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Worker ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Worker { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Worker ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < Worker > for Object { # [ inline ] fn from ( obj : Worker ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Worker { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < Worker as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `new Worker(..)` constructor, creating a new instance of `Worker`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn new ( script_url : & str ) -> Result < Worker , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_Worker ( script_url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_Worker ( script_url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( script_url ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let script_url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( script_url , & mut __stack ) ; __widl_f_new_Worker ( script_url ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_post_message_Worker ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_with_transfer_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_with_transfer_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , message , transfer ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( transfer , & mut __stack ) ; __widl_f_post_message_with_transfer_Worker ( self_ , message , transfer ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_terminate_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `terminate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn terminate ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_terminate_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_terminate_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_terminate_Worker ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessage_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessage ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessage = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessage , & mut __stack ) ; __widl_f_set_onmessage_Worker ( self_ , onmessage ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessageerror_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onmessageerror ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessageerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessageerror , & mut __stack ) ; __widl_f_set_onmessageerror_Worker ( self_ , onmessageerror ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( ( self_ ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onerror_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( ( self_ , onerror ) ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let mut __stack = wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onerror , & mut __stack ) ; __widl_f_set_onerror_Worker ( self_ , onerror ) } ; ( ) } } } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DRAW_CARET : u32 = 1u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DO_NOT_FLUSH : u32 = 2u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DRAW_VIEW : u32 = 4u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_USE_WIDGET_LAYERS : u32 = 8u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_ASYNC_DECODE_IMAGES : u32 = 16u64 as u32 ; } impl Event { pub const NONE : u16 = 0i64 as u16 ; } impl Event { pub const CAPTURING_PHASE : u16 = 1u64 as u16 ; } impl Event { pub const AT_TARGET : u16 = 2u64 as u16 ; } impl Event { pub const BUBBLING_PHASE : u16 = 3u64 as u16 ; } # [ allow ( non_upper_case_globals ) ] # [ cfg ( target_arch = "wasm32" ) ] # [ link_section = "__wasm_bindgen_unstable" ] # [ doc ( hidden ) ] # [ allow ( clippy :: all ) ] pub static __WASM_BINDGEN_GENERATED_a80fff9d4b01dcc1 : [ u8 ; 48861usize ] = { static _INCLUDED_FILES : & [ & str ] = & [ ] ; * b".\0\0\0{\"schema_version\":\"0.2.47\",\"version\":\"0.2.47\"}\xA7\xBE\0\0\0\0\x86\x04\0\0\x02\x18CanvasRenderingContext2D*__widl_instanceof_CanvasRenderingContext2D\0\0\0\0-__widl_f_draw_window_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07\x05self_\x06window\x01x\x01y\x01w\x01h\x08bg_color\ndrawWindow\0\0\08__widl_f_draw_window_with_flags_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08\x05self_\x06window\x01x\x01y\x01w\x01h\x08bg_color\x05flags\ndrawWindow\0\0\0.__widl_f_global_alpha_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BglobalAlpha\x01\x01\x05self_\x0BglobalAlpha\0\0\02__widl_f_set_global_alpha_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BglobalAlpha\x01\x02\x05self_\x0Cglobal_alpha\x0BglobalAlpha\0\0\0<__widl_f_global_composite_operation_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x18globalCompositeOperation\x01\x01\x05self_\x18globalCompositeOperation\0\0\0@__widl_f_set_global_composite_operation_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x18globalCompositeOperation\x01\x02\x05self_\x1Aglobal_composite_operation\x18globalCompositeOperation\0\0\0,__widl_f_begin_path_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\tbeginPath\0\0\0&__widl_f_clip_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x04clip\0\0\0&__widl_f_fill_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x04fill\0\0\0;__widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\risPointInPath\0\0\0A__widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\x0FisPointInStroke\0\0\0(__widl_f_stroke_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x06stroke\0\0\0.__widl_f_stroke_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BstrokeStyle\x01\x01\x05self_\x0BstrokeStyle\0\0\02__widl_f_set_stroke_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BstrokeStyle\x01\x02\x05self_\x0Cstroke_style\x0BstrokeStyle\0\0\0,__widl_f_fill_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\tfillStyle\x01\x01\x05self_\tfillStyle\0\0\00__widl_f_set_fill_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\tfillStyle\x01\x02\x05self_\nfill_style\tfillStyle\0\0\0(__widl_f_filter_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x06filter\x01\x01\x05self_\x06filter\0\0\0,__widl_f_set_filter_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x06filter\x01\x02\x05self_\x06filter\x06filter\0\0\00__widl_f_add_hit_region_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x0CaddHitRegion\0\0\03__widl_f_clear_hit_regions_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x0FclearHitRegions\0\0\03__widl_f_remove_hit_region_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x02\x05self_\x02id\x0FremoveHitRegion\0\0\0B__widl_f_create_image_data_with_sw_and_sh_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x02sw\x02sh\x0FcreateImageData\0\0\0B__widl_f_create_image_data_with_imagedata_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x02\x05self_\timagedata\x0FcreateImageData\0\0\00__widl_f_get_image_data_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x02sx\x02sy\x02sw\x02sh\x0CgetImageData\0\0\00__widl_f_put_image_data_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04\x05self_\timagedata\x02dx\x02dy\x0CputImageData\0\0\0j__widl_f_put_image_data_with_dirty_x_and_dirty_y_and_dirty_width_and_dirty_height_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08\x05self_\timagedata\x02dx\x02dy\x07dirty_x\x07dirty_y\x0Bdirty_width\x0Cdirty_height\x0CputImageData\0\0\09__widl_f_image_smoothing_enabled_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x15imageSmoothingEnabled\x01\x01\x05self_\x15imageSmoothingEnabled\0\0\0=__widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x15imageSmoothingEnabled\x01\x02\x05self_\x17image_smoothing_enabled\x15imageSmoothingEnabled\0\0\0/__widl_f_get_line_dash_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x0BgetLineDash\0\0\0/__widl_f_set_line_dash_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x02\x05self_\x08segments\x0BsetLineDash\0\0\0,__widl_f_line_width_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\tlineWidth\x01\x01\x05self_\tlineWidth\0\0\00__widl_f_set_line_width_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\tlineWidth\x01\x02\x05self_\nline_width\tlineWidth\0\0\0*__widl_f_line_cap_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x07lineCap\x01\x01\x05self_\x07lineCap\0\0\0.__widl_f_set_line_cap_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x07lineCap\x01\x02\x05self_\x08line_cap\x07lineCap\0\0\0+__widl_f_line_join_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x08lineJoin\x01\x01\x05self_\x08lineJoin\0\0\0/__widl_f_set_line_join_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x08lineJoin\x01\x02\x05self_\tline_join\x08lineJoin\0\0\0-__widl_f_miter_limit_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\nmiterLimit\x01\x01\x05self_\nmiterLimit\0\0\01__widl_f_set_miter_limit_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\nmiterLimit\x01\x02\x05self_\x0Bmiter_limit\nmiterLimit\0\0\02__widl_f_line_dash_offset_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0ElineDashOffset\x01\x01\x05self_\x0ElineDashOffset\0\0\06__widl_f_set_line_dash_offset_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0ElineDashOffset\x01\x02\x05self_\x10line_dash_offset\x0ElineDashOffset\0\0\0%__widl_f_arc_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06\x05self_\x01x\x01y\x06radius\x0Bstart_angle\tend_angle\x03arc\0\0\08__widl_f_arc_with_anticlockwise_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07\x05self_\x01x\x01y\x06radius\x0Bstart_angle\tend_angle\ranticlockwise\x03arc\0\0\0(__widl_f_arc_to_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06\x05self_\x02x1\x02y1\x02x2\x02y2\x06radius\x05arcTo\0\0\01__widl_f_bezier_curve_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07\x05self_\x04cp1x\x04cp1y\x04cp2x\x04cp2y\x01x\x01y\rbezierCurveTo\0\0\0,__widl_f_close_path_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\tclosePath\0\0\0)__widl_f_ellipse_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08\x05self_\x01x\x01y\x08radius_x\x08radius_y\x08rotation\x0Bstart_angle\tend_angle\x07ellipse\0\0\0<__widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\t\x05self_\x01x\x01y\x08radius_x\x08radius_y\x08rotation\x0Bstart_angle\tend_angle\ranticlockwise\x07ellipse\0\0\0)__widl_f_line_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\x06lineTo\0\0\0)__widl_f_move_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveTo\0\0\04__widl_f_quadratic_curve_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x03cpx\x03cpy\x01x\x01y\x10quadraticCurveTo\0\0\0&__widl_f_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x01x\x01y\x01w\x01h\x04rect\0\0\0,__widl_f_clear_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x01x\x01y\x01w\x01h\tclearRect\0\0\0+__widl_f_fill_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x01x\x01y\x01w\x01h\x08fillRect\0\0\0-__widl_f_stroke_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x01x\x01y\x01w\x01h\nstrokeRect\0\0\01__widl_f_shadow_offset_x_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\rshadowOffsetX\x01\x01\x05self_\rshadowOffsetX\0\0\05__widl_f_set_shadow_offset_x_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\rshadowOffsetX\x01\x02\x05self_\x0Fshadow_offset_x\rshadowOffsetX\0\0\01__widl_f_shadow_offset_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\rshadowOffsetY\x01\x01\x05self_\rshadowOffsetY\0\0\05__widl_f_set_shadow_offset_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\rshadowOffsetY\x01\x02\x05self_\x0Fshadow_offset_y\rshadowOffsetY\0\0\0-__widl_f_shadow_blur_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\nshadowBlur\x01\x01\x05self_\nshadowBlur\0\0\01__widl_f_set_shadow_blur_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\nshadowBlur\x01\x02\x05self_\x0Bshadow_blur\nshadowBlur\0\0\0.__widl_f_shadow_color_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BshadowColor\x01\x01\x05self_\x0BshadowColor\0\0\02__widl_f_set_shadow_color_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BshadowColor\x01\x02\x05self_\x0Cshadow_color\x0BshadowColor\0\0\0)__widl_f_restore_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x07restore\0\0\0&__widl_f_save_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x04save\0\0\0+__widl_f_fill_text_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04\x05self_\x04text\x01x\x01y\x08fillText\0\0\0:__widl_f_fill_text_with_max_width_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x04text\x01x\x01y\tmax_width\x08fillText\0\0\0-__widl_f_stroke_text_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04\x05self_\x04text\x01x\x01y\nstrokeText\0\0\0<__widl_f_stroke_text_with_max_width_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05\x05self_\x04text\x01x\x01y\tmax_width\nstrokeText\0\0\0&__widl_f_font_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x04font\x01\x01\x05self_\x04font\0\0\0*__widl_f_set_font_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x04font\x01\x02\x05self_\x04font\x04font\0\0\0,__widl_f_text_align_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\ttextAlign\x01\x01\x05self_\ttextAlign\0\0\00__widl_f_set_text_align_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\ttextAlign\x01\x02\x05self_\ntext_align\ttextAlign\0\0\0/__widl_f_text_baseline_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0CtextBaseline\x01\x01\x05self_\x0CtextBaseline\0\0\03__widl_f_set_text_baseline_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0CtextBaseline\x01\x02\x05self_\rtext_baseline\x0CtextBaseline\0\0\01__widl_f_reset_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x01\x05self_\x0EresetTransform\0\0\0(__widl_f_rotate_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x02\x05self_\x05angle\x06rotate\0\0\0'__widl_f_scale_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\x05scale\0\0\0/__widl_f_set_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07\x05self_\x01a\x01b\x01c\x01d\x01e\x01f\x0CsetTransform\0\0\0+__widl_f_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07\x05self_\x01a\x01b\x01c\x01d\x01e\x01f\ttransform\0\0\0+__widl_f_translate_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03\x05self_\x01x\x01y\ttranslate\0\0\x02\x1ADedicatedWorkerGlobalScope,__widl_instanceof_DedicatedWorkerGlobalScope\0\0\0\0)__widl_f_close_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\0\x01\x01\x05self_\x05close\0\0\00__widl_f_post_message_DedicatedWorkerGlobalScope\x01\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\0\x01\x02\x05self_\x07message\x0BpostMessage\0\0\0>__widl_f_post_message_with_transfer_DedicatedWorkerGlobalScope\x01\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\0\x01\x03\x05self_\x07message\x08transfer\x0BpostMessage\0\0\0(__widl_f_name_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\x01\x04name\x01\x01\x05self_\x04name\0\0\0-__widl_f_onmessage_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\01__widl_f_set_onmessage_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\02__widl_f_onmessageerror_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\06__widl_f_set_onmessageerror_DedicatedWorkerGlobalScope\0\0\x01\x1ADedicatedWorkerGlobalScope\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\x02\nErrorEvent\x1C__widl_instanceof_ErrorEvent\0\0\0\0\x17__widl_f_new_ErrorEvent\x01\0\x01\nErrorEvent\0\x01\x01\x05type_\x03new\0\0\0\x1B__widl_f_message_ErrorEvent\0\0\x01\nErrorEvent\x01\0\x01\x07message\x01\x01\x05self_\x07message\0\0\0\x1C__widl_f_filename_ErrorEvent\0\0\x01\nErrorEvent\x01\0\x01\x08filename\x01\x01\x05self_\x08filename\0\0\0\x1A__widl_f_lineno_ErrorEvent\0\0\x01\nErrorEvent\x01\0\x01\x06lineno\x01\x01\x05self_\x06lineno\0\0\0\x19__widl_f_colno_ErrorEvent\0\0\x01\nErrorEvent\x01\0\x01\x05colno\x01\x01\x05self_\x05colno\0\0\0\x19__widl_f_error_ErrorEvent\0\0\x01\nErrorEvent\x01\0\x01\x05error\x01\x01\x05self_\x05error\0\0\x02\x05Event\x17__widl_instanceof_Event\0\0\0\0\x12__widl_f_new_Event\x01\0\x01\x05Event\0\x01\x01\x05type_\x03new\0\0\0\x1C__widl_f_composed_path_Event\0\0\x01\x05Event\x01\0\0\x01\x01\x05self_\x0CcomposedPath\0\0\0\x19__widl_f_init_event_Event\0\0\x01\x05Event\x01\0\0\x01\x02\x05self_\x05type_\tinitEvent\0\0\0&__widl_f_init_event_with_bubbles_Event\0\0\x01\x05Event\x01\0\0\x01\x03\x05self_\x05type_\x07bubbles\tinitEvent\0\0\05__widl_f_init_event_with_bubbles_and_cancelable_Event\0\0\x01\x05Event\x01\0\0\x01\x04\x05self_\x05type_\x07bubbles\ncancelable\tinitEvent\0\0\0\x1E__widl_f_prevent_default_Event\0\0\x01\x05Event\x01\0\0\x01\x01\x05self_\x0EpreventDefault\0\0\0)__widl_f_stop_immediate_propagation_Event\0\0\x01\x05Event\x01\0\0\x01\x01\x05self_\x18stopImmediatePropagation\0\0\0\x1F__widl_f_stop_propagation_Event\0\0\x01\x05Event\x01\0\0\x01\x01\x05self_\x0FstopPropagation\0\0\0\x13__widl_f_type_Event\0\0\x01\x05Event\x01\0\x01\x04type\x01\x01\x05self_\x04type\0\0\0\x1A__widl_f_event_phase_Event\0\0\x01\x05Event\x01\0\x01\neventPhase\x01\x01\x05self_\neventPhase\0\0\0\x16__widl_f_bubbles_Event\0\0\x01\x05Event\x01\0\x01\x07bubbles\x01\x01\x05self_\x07bubbles\0\0\0\x19__widl_f_cancelable_Event\0\0\x01\x05Event\x01\0\x01\ncancelable\x01\x01\x05self_\ncancelable\0\0\0 __widl_f_default_prevented_Event\0\0\x01\x05Event\x01\0\x01\x10defaultPrevented\x01\x01\x05self_\x10defaultPrevented\0\0\0\x17__widl_f_composed_Event\0\0\x01\x05Event\x01\0\x01\x08composed\x01\x01\x05self_\x08composed\0\0\0\x19__widl_f_is_trusted_Event\0\0\x01\x05Event\x01\0\x01\tisTrusted\x01\x01\x05self_\tisTrusted\0\0\0\x19__widl_f_time_stamp_Event\0\0\x01\x05Event\x01\0\x01\ttimeStamp\x01\x01\x05self_\ttimeStamp\0\0\0\x1C__widl_f_cancel_bubble_Event\0\0\x01\x05Event\x01\0\x01\x0CcancelBubble\x01\x01\x05self_\x0CcancelBubble\0\0\0 __widl_f_set_cancel_bubble_Event\0\0\x01\x05Event\x01\0\x02\x0CcancelBubble\x01\x02\x05self_\rcancel_bubble\x0CcancelBubble\0\0\x02\tImageData\x1B__widl_instanceof_ImageData\0\0\0\0\x1E__widl_f_new_with_sw_ImageData\x01\0\x01\tImageData\0\x01\x02\x02sw\x02sh\x03new\0\0\0,__widl_f_new_with_u8_clamped_array_ImageData\x01\0\x01\tImageData\0\x01\x02\x04data\x02sw\x03new\0\0\03__widl_f_new_with_u8_clamped_array_and_sh_ImageData\x01\0\x01\tImageData\0\x01\x03\x04data\x02sw\x02sh\x03new\0\0\0\x18__widl_f_width_ImageData\0\0\x01\tImageData\x01\0\x01\x05width\x01\x01\x05self_\x05width\0\0\0\x19__widl_f_height_ImageData\0\0\x01\tImageData\x01\0\x01\x06height\x01\x01\x05self_\x06height\0\0\0\x17__widl_f_data_ImageData\0\0\x01\tImageData\x01\0\x01\x04data\x01\x01\x05self_\x04data\0\0\x02\x0CMessageEvent\x1E__widl_instanceof_MessageEvent\0\0\0\0\x19__widl_f_new_MessageEvent\x01\0\x01\x0CMessageEvent\0\x01\x01\x05type_\x03new\0\0\0(__widl_f_init_message_event_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x02\x05self_\x05type_\x10initMessageEvent\0\0\05__widl_f_init_message_event_with_bubbles_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x03\x05self_\x05type_\x07bubbles\x10initMessageEvent\0\0\0D__widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x04\x05self_\x05type_\x07bubbles\ncancelable\x10initMessageEvent\0\0\0M__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x05\x05self_\x05type_\x07bubbles\ncancelable\x04data\x10initMessageEvent\0\0\0X__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x06\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\x10initMessageEvent\0\0\0j__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x07\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x10initMessageEvent\0\0\0y__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\x08\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x10initMessageEvent\0\0\0\x83\x01__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\0\x01\t\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x05ports\x10initMessageEvent\0\0\0\x1A__widl_f_data_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\x01\x04data\x01\x01\x05self_\x04data\0\0\0\x1C__widl_f_origin_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\x01\x06origin\x01\x01\x05self_\x06origin\0\0\0#__widl_f_last_event_id_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\x01\x0BlastEventId\x01\x01\x05self_\x0BlastEventId\0\0\0\x1C__widl_f_source_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\x01\x06source\x01\x01\x05self_\x06source\0\0\0\x1B__widl_f_ports_MessageEvent\0\0\x01\x0CMessageEvent\x01\0\x01\x05ports\x01\x01\x05self_\x05ports\0\0\x02\tNavigator\x1B__widl_instanceof_Navigator\0\0\0\0\x1F__widl_f_get_gamepads_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x01\x05self_\x0BgetGamepads\0\0\0\"__widl_f_get_vr_displays_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x01\x05self_\rgetVRDisplays\0\0\0&__widl_f_request_midi_access_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x01\x05self_\x11requestMIDIAccess\0\0\02__widl_f_request_media_key_system_access_Navigator\0\0\x01\tNavigator\x01\0\0\x01\x03\x05self_\nkey_system\x18supported_configurations\x1BrequestMediaKeySystemAccess\0\0\0\x1E__widl_f_send_beacon_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x02\x05self_\x03url\nsendBeacon\0\0\05__widl_f_send_beacon_with_opt_buffer_source_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x03\x05self_\x03url\x04data\nsendBeacon\0\0\00__widl_f_send_beacon_with_opt_u8_array_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x03\x05self_\x03url\x04data\nsendBeacon\0\0\0+__widl_f_send_beacon_with_opt_str_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x03\x05self_\x03url\x04data\nsendBeacon\0\0\0(__widl_f_vibrate_with_duration_Navigator\0\0\x01\tNavigator\x01\0\0\x01\x02\x05self_\x08duration\x07vibrate\0\0\0'__widl_f_vibrate_with_pattern_Navigator\0\0\x01\tNavigator\x01\0\0\x01\x02\x05self_\x07pattern\x07vibrate\0\0\0\x1F__widl_f_do_not_track_Navigator\0\0\x01\tNavigator\x01\0\x01\ndoNotTrack\x01\x01\x05self_\ndoNotTrack\0\0\0#__widl_f_max_touch_points_Navigator\0\0\x01\tNavigator\x01\0\x01\x0EmaxTouchPoints\x01\x01\x05self_\x0EmaxTouchPoints\0\0\0%__widl_f_active_vr_displays_Navigator\0\0\x01\tNavigator\x01\0\x01\x10activeVRDisplays\x01\x01\x05self_\x10activeVRDisplays\0\0\0'__widl_f_hardware_concurrency_Navigator\0\0\x01\tNavigator\x01\0\x01\x13hardwareConcurrency\x01\x01\x05self_\x13hardwareConcurrency\0\0\0+__widl_f_register_content_handler_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x04\x05self_\tmime_type\x03url\x05title\x16registerContentHandler\0\0\0,__widl_f_register_protocol_handler_Navigator\x01\0\x01\tNavigator\x01\0\0\x01\x04\x05self_\x06scheme\x03url\x05title\x17registerProtocolHandler\0\0\0 __widl_f_taint_enabled_Navigator\0\0\x01\tNavigator\x01\0\0\x01\x01\x05self_\x0CtaintEnabled\0\0\0 __widl_f_app_code_name_Navigator\x01\0\x01\tNavigator\x01\0\x01\x0BappCodeName\x01\x01\x05self_\x0BappCodeName\0\0\0\x1B__widl_f_app_name_Navigator\0\0\x01\tNavigator\x01\0\x01\x07appName\x01\x01\x05self_\x07appName\0\0\0\x1E__widl_f_app_version_Navigator\x01\0\x01\tNavigator\x01\0\x01\nappVersion\x01\x01\x05self_\nappVersion\0\0\0\x1B__widl_f_platform_Navigator\x01\0\x01\tNavigator\x01\0\x01\x08platform\x01\x01\x05self_\x08platform\0\0\0\x1D__widl_f_user_agent_Navigator\x01\0\x01\tNavigator\x01\0\x01\tuserAgent\x01\x01\x05self_\tuserAgent\0\0\0\x1A__widl_f_product_Navigator\0\0\x01\tNavigator\x01\0\x01\x07product\x01\x01\x05self_\x07product\0\0\0\x1B__widl_f_language_Navigator\0\0\x01\tNavigator\x01\0\x01\x08language\x01\x01\x05self_\x08language\0\0\0\x1C__widl_f_languages_Navigator\0\0\x01\tNavigator\x01\0\x01\tlanguages\x01\x01\x05self_\tlanguages\0\0\0\x1A__widl_f_on_line_Navigator\0\0\x01\tNavigator\x01\0\x01\x06onLine\x01\x01\x05self_\x06onLine\0\0\x02\x06Window\x18__widl_instanceof_Window\0\0\0\0\x15__widl_f_alert_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05alert\0\0\0\"__widl_f_alert_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x05alert\0\0\0\x14__widl_f_blur_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04blur\0\0\0&__widl_f_cancel_animation_frame_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x14cancelAnimationFrame\0\0\0$__widl_f_cancel_idle_callback_Window\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x12cancelIdleCallback\0\0\0\x1E__widl_f_capture_events_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rcaptureEvents\0\0\0\x15__widl_f_close_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05close\0\0\0\x17__widl_f_confirm_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x07confirm\0\0\0$__widl_f_confirm_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x07confirm\0\0\0\x15__widl_f_focus_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05focus\0\0\0\x17__widl_f_move_by_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveBy\0\0\0\x17__widl_f_move_to_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveTo\0\0\0\x14__widl_f_open_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04open\0\0\0\x1D__widl_f_open_with_url_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x03url\x04open\0\0\0(__widl_f_open_with_url_and_target_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x03url\x06target\x04open\0\0\05__widl_f_open_with_url_and_target_and_features_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x03url\x06target\x08features\x04open\0\0\0\x1C__widl_f_post_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\rtarget_origin\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07message\rtarget_origin\x08transfer\x0BpostMessage\0\0\0\x15__widl_f_print_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05print\0\0\0\x16__widl_f_prompt_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06prompt\0\0\0#__widl_f_prompt_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x06prompt\0\0\0/__widl_f_prompt_with_message_and_default_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\x07default\x06prompt\0\0\0\x1E__widl_f_release_events_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rreleaseEvents\0\0\0'__widl_f_request_animation_frame_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x15requestAnimationFrame\0\0\0%__widl_f_request_idle_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x13requestIdleCallback\0\0\0\x19__widl_f_resize_by_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeBy\0\0\0\x19__widl_f_resize_to_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeTo\0\0\0#__widl_f_scroll_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06scroll\0\0\0\x16__widl_f_scroll_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06scroll\0\0\0&__widl_f_scroll_by_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollBy\0\0\0\x19__widl_f_scroll_by_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollBy\0\0\0&__widl_f_scroll_to_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollTo\0\0\0\x19__widl_f_scroll_to_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollTo\0\0\0\x14__widl_f_stop_Window\x01\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04stop\0\0\0\x13__widl_f_get_Window\0\0\x01\x06Window\x01\0\x03\x01\x02\x05self_\x04name\x03get\0\0\0\x16__widl_f_window_Window\0\0\x01\x06Window\x01\0\x01\x06window\x01\x01\x05self_\x06window\0\0\0\x14__widl_f_self_Window\0\0\x01\x06Window\x01\0\x01\x04self\x01\x01\x05self_\x04self\0\0\0\x14__widl_f_name_Window\x01\0\x01\x06Window\x01\0\x01\x04name\x01\x01\x05self_\x04name\0\0\0\x18__widl_f_set_name_Window\x01\0\x01\x06Window\x01\0\x02\x04name\x01\x02\x05self_\x04name\x04name\0\0\0\x16__widl_f_status_Window\x01\0\x01\x06Window\x01\0\x01\x06status\x01\x01\x05self_\x06status\0\0\0\x1A__widl_f_set_status_Window\x01\0\x01\x06Window\x01\0\x02\x06status\x01\x02\x05self_\x06status\x06status\0\0\0\x16__widl_f_closed_Window\x01\0\x01\x06Window\x01\0\x01\x06closed\x01\x01\x05self_\x06closed\0\0\0\x15__widl_f_event_Window\0\0\x01\x06Window\x01\0\x01\x05event\x01\x01\x05self_\x05event\0\0\0\x16__widl_f_frames_Window\x01\0\x01\x06Window\x01\0\x01\x06frames\x01\x01\x05self_\x06frames\0\0\0\x16__widl_f_length_Window\0\0\x01\x06Window\x01\0\x01\x06length\x01\x01\x05self_\x06length\0\0\0\x13__widl_f_top_Window\x01\0\x01\x06Window\x01\0\x01\x03top\x01\x01\x05self_\x03top\0\0\0\x16__widl_f_opener_Window\x01\0\x01\x06Window\x01\0\x01\x06opener\x01\x01\x05self_\x06opener\0\0\0\x1A__widl_f_set_opener_Window\x01\0\x01\x06Window\x01\0\x02\x06opener\x01\x02\x05self_\x06opener\x06opener\0\0\0\x16__widl_f_parent_Window\x01\0\x01\x06Window\x01\0\x01\x06parent\x01\x01\x05self_\x06parent\0\0\0\x19__widl_f_navigator_Window\0\0\x01\x06Window\x01\0\x01\tnavigator\x01\x01\x05self_\tnavigator\0\0\0\x1E__widl_f_onappinstalled_Window\0\0\x01\x06Window\x01\0\x01\x0Eonappinstalled\x01\x01\x05self_\x0Eonappinstalled\0\0\0\"__widl_f_set_onappinstalled_Window\0\0\x01\x06Window\x01\0\x02\x0Eonappinstalled\x01\x02\x05self_\x0Eonappinstalled\x0Eonappinstalled\0\0\0\x1B__widl_f_inner_width_Window\x01\0\x01\x06Window\x01\0\x01\ninnerWidth\x01\x01\x05self_\ninnerWidth\0\0\0\x1F__widl_f_set_inner_width_Window\x01\0\x01\x06Window\x01\0\x02\ninnerWidth\x01\x02\x05self_\x0Binner_width\ninnerWidth\0\0\0\x1C__widl_f_inner_height_Window\x01\0\x01\x06Window\x01\0\x01\x0BinnerHeight\x01\x01\x05self_\x0BinnerHeight\0\0\0 __widl_f_set_inner_height_Window\x01\0\x01\x06Window\x01\0\x02\x0BinnerHeight\x01\x02\x05self_\x0Cinner_height\x0BinnerHeight\0\0\0\x18__widl_f_scroll_x_Window\x01\0\x01\x06Window\x01\0\x01\x07scrollX\x01\x01\x05self_\x07scrollX\0\0\0\x1D__widl_f_page_x_offset_Window\x01\0\x01\x06Window\x01\0\x01\x0BpageXOffset\x01\x01\x05self_\x0BpageXOffset\0\0\0\x18__widl_f_scroll_y_Window\x01\0\x01\x06Window\x01\0\x01\x07scrollY\x01\x01\x05self_\x07scrollY\0\0\0\x1D__widl_f_page_y_offset_Window\x01\0\x01\x06Window\x01\0\x01\x0BpageYOffset\x01\x01\x05self_\x0BpageYOffset\0\0\0\x18__widl_f_screen_x_Window\x01\0\x01\x06Window\x01\0\x01\x07screenX\x01\x01\x05self_\x07screenX\0\0\0\x1C__widl_f_set_screen_x_Window\x01\0\x01\x06Window\x01\0\x02\x07screenX\x01\x02\x05self_\x08screen_x\x07screenX\0\0\0\x18__widl_f_screen_y_Window\x01\0\x01\x06Window\x01\0\x01\x07screenY\x01\x01\x05self_\x07screenY\0\0\0\x1C__widl_f_set_screen_y_Window\x01\0\x01\x06Window\x01\0\x02\x07screenY\x01\x02\x05self_\x08screen_y\x07screenY\0\0\0\x1B__widl_f_outer_width_Window\x01\0\x01\x06Window\x01\0\x01\nouterWidth\x01\x01\x05self_\nouterWidth\0\0\0\x1F__widl_f_set_outer_width_Window\x01\0\x01\x06Window\x01\0\x02\nouterWidth\x01\x02\x05self_\x0Bouter_width\nouterWidth\0\0\0\x1C__widl_f_outer_height_Window\x01\0\x01\x06Window\x01\0\x01\x0BouterHeight\x01\x01\x05self_\x0BouterHeight\0\0\0 __widl_f_set_outer_height_Window\x01\0\x01\x06Window\x01\0\x02\x0BouterHeight\x01\x02\x05self_\x0Couter_height\x0BouterHeight\0\0\0\"__widl_f_device_pixel_ratio_Window\0\0\x01\x06Window\x01\0\x01\x10devicePixelRatio\x01\x01\x05self_\x10devicePixelRatio\0\0\0\x1B__widl_f_orientation_Window\0\0\x01\x06Window\x01\0\x01\x0Borientation\x01\x01\x05self_\x0Borientation\0\0\0#__widl_f_onorientationchange_Window\0\0\x01\x06Window\x01\0\x01\x13onorientationchange\x01\x01\x05self_\x13onorientationchange\0\0\0'__widl_f_set_onorientationchange_Window\0\0\x01\x06Window\x01\0\x02\x13onorientationchange\x01\x02\x05self_\x13onorientationchange\x13onorientationchange\0\0\0\"__widl_f_onvrdisplayconnect_Window\0\0\x01\x06Window\x01\0\x01\x12onvrdisplayconnect\x01\x01\x05self_\x12onvrdisplayconnect\0\0\0&__widl_f_set_onvrdisplayconnect_Window\0\0\x01\x06Window\x01\0\x02\x12onvrdisplayconnect\x01\x02\x05self_\x12onvrdisplayconnect\x12onvrdisplayconnect\0\0\0%__widl_f_onvrdisplaydisconnect_Window\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydisconnect\x01\x01\x05self_\x15onvrdisplaydisconnect\0\0\0)__widl_f_set_onvrdisplaydisconnect_Window\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydisconnect\x01\x02\x05self_\x15onvrdisplaydisconnect\x15onvrdisplaydisconnect\0\0\0#__widl_f_onvrdisplayactivate_Window\0\0\x01\x06Window\x01\0\x01\x13onvrdisplayactivate\x01\x01\x05self_\x13onvrdisplayactivate\0\0\0'__widl_f_set_onvrdisplayactivate_Window\0\0\x01\x06Window\x01\0\x02\x13onvrdisplayactivate\x01\x02\x05self_\x13onvrdisplayactivate\x13onvrdisplayactivate\0\0\0%__widl_f_onvrdisplaydeactivate_Window\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydeactivate\x01\x01\x05self_\x15onvrdisplaydeactivate\0\0\0)__widl_f_set_onvrdisplaydeactivate_Window\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydeactivate\x01\x02\x05self_\x15onvrdisplaydeactivate\x15onvrdisplaydeactivate\0\0\0(__widl_f_onvrdisplaypresentchange_Window\0\0\x01\x06Window\x01\0\x01\x18onvrdisplaypresentchange\x01\x01\x05self_\x18onvrdisplaypresentchange\0\0\0,__widl_f_set_onvrdisplaypresentchange_Window\0\0\x01\x06Window\x01\0\x02\x18onvrdisplaypresentchange\x01\x02\x05self_\x18onvrdisplaypresentchange\x18onvrdisplaypresentchange\0\0\0\x17__widl_f_onabort_Window\0\0\x01\x06Window\x01\0\x01\x07onabort\x01\x01\x05self_\x07onabort\0\0\0\x1B__widl_f_set_onabort_Window\0\0\x01\x06Window\x01\0\x02\x07onabort\x01\x02\x05self_\x07onabort\x07onabort\0\0\0\x16__widl_f_onblur_Window\0\0\x01\x06Window\x01\0\x01\x06onblur\x01\x01\x05self_\x06onblur\0\0\0\x1A__widl_f_set_onblur_Window\0\0\x01\x06Window\x01\0\x02\x06onblur\x01\x02\x05self_\x06onblur\x06onblur\0\0\0\x17__widl_f_onfocus_Window\0\0\x01\x06Window\x01\0\x01\x07onfocus\x01\x01\x05self_\x07onfocus\0\0\0\x1B__widl_f_set_onfocus_Window\0\0\x01\x06Window\x01\0\x02\x07onfocus\x01\x02\x05self_\x07onfocus\x07onfocus\0\0\0\x1A__widl_f_onauxclick_Window\0\0\x01\x06Window\x01\0\x01\nonauxclick\x01\x01\x05self_\nonauxclick\0\0\0\x1E__widl_f_set_onauxclick_Window\0\0\x01\x06Window\x01\0\x02\nonauxclick\x01\x02\x05self_\nonauxclick\nonauxclick\0\0\0\x19__widl_f_oncanplay_Window\0\0\x01\x06Window\x01\0\x01\toncanplay\x01\x01\x05self_\toncanplay\0\0\0\x1D__widl_f_set_oncanplay_Window\0\0\x01\x06Window\x01\0\x02\toncanplay\x01\x02\x05self_\toncanplay\toncanplay\0\0\0 __widl_f_oncanplaythrough_Window\0\0\x01\x06Window\x01\0\x01\x10oncanplaythrough\x01\x01\x05self_\x10oncanplaythrough\0\0\0$__widl_f_set_oncanplaythrough_Window\0\0\x01\x06Window\x01\0\x02\x10oncanplaythrough\x01\x02\x05self_\x10oncanplaythrough\x10oncanplaythrough\0\0\0\x18__widl_f_onchange_Window\0\0\x01\x06Window\x01\0\x01\x08onchange\x01\x01\x05self_\x08onchange\0\0\0\x1C__widl_f_set_onchange_Window\0\0\x01\x06Window\x01\0\x02\x08onchange\x01\x02\x05self_\x08onchange\x08onchange\0\0\0\x17__widl_f_onclick_Window\0\0\x01\x06Window\x01\0\x01\x07onclick\x01\x01\x05self_\x07onclick\0\0\0\x1B__widl_f_set_onclick_Window\0\0\x01\x06Window\x01\0\x02\x07onclick\x01\x02\x05self_\x07onclick\x07onclick\0\0\0\x17__widl_f_onclose_Window\0\0\x01\x06Window\x01\0\x01\x07onclose\x01\x01\x05self_\x07onclose\0\0\0\x1B__widl_f_set_onclose_Window\0\0\x01\x06Window\x01\0\x02\x07onclose\x01\x02\x05self_\x07onclose\x07onclose\0\0\0\x1D__widl_f_oncontextmenu_Window\0\0\x01\x06Window\x01\0\x01\roncontextmenu\x01\x01\x05self_\roncontextmenu\0\0\0!__widl_f_set_oncontextmenu_Window\0\0\x01\x06Window\x01\0\x02\roncontextmenu\x01\x02\x05self_\roncontextmenu\roncontextmenu\0\0\0\x1A__widl_f_ondblclick_Window\0\0\x01\x06Window\x01\0\x01\nondblclick\x01\x01\x05self_\nondblclick\0\0\0\x1E__widl_f_set_ondblclick_Window\0\0\x01\x06Window\x01\0\x02\nondblclick\x01\x02\x05self_\nondblclick\nondblclick\0\0\0\x16__widl_f_ondrag_Window\0\0\x01\x06Window\x01\0\x01\x06ondrag\x01\x01\x05self_\x06ondrag\0\0\0\x1A__widl_f_set_ondrag_Window\0\0\x01\x06Window\x01\0\x02\x06ondrag\x01\x02\x05self_\x06ondrag\x06ondrag\0\0\0\x19__widl_f_ondragend_Window\0\0\x01\x06Window\x01\0\x01\tondragend\x01\x01\x05self_\tondragend\0\0\0\x1D__widl_f_set_ondragend_Window\0\0\x01\x06Window\x01\0\x02\tondragend\x01\x02\x05self_\tondragend\tondragend\0\0\0\x1B__widl_f_ondragenter_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragenter\x01\x01\x05self_\x0Bondragenter\0\0\0\x1F__widl_f_set_ondragenter_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragenter\x01\x02\x05self_\x0Bondragenter\x0Bondragenter\0\0\0\x1A__widl_f_ondragexit_Window\0\0\x01\x06Window\x01\0\x01\nondragexit\x01\x01\x05self_\nondragexit\0\0\0\x1E__widl_f_set_ondragexit_Window\0\0\x01\x06Window\x01\0\x02\nondragexit\x01\x02\x05self_\nondragexit\nondragexit\0\0\0\x1B__widl_f_ondragleave_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragleave\x01\x01\x05self_\x0Bondragleave\0\0\0\x1F__widl_f_set_ondragleave_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragleave\x01\x02\x05self_\x0Bondragleave\x0Bondragleave\0\0\0\x1A__widl_f_ondragover_Window\0\0\x01\x06Window\x01\0\x01\nondragover\x01\x01\x05self_\nondragover\0\0\0\x1E__widl_f_set_ondragover_Window\0\0\x01\x06Window\x01\0\x02\nondragover\x01\x02\x05self_\nondragover\nondragover\0\0\0\x1B__widl_f_ondragstart_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragstart\x01\x01\x05self_\x0Bondragstart\0\0\0\x1F__widl_f_set_ondragstart_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragstart\x01\x02\x05self_\x0Bondragstart\x0Bondragstart\0\0\0\x16__widl_f_ondrop_Window\0\0\x01\x06Window\x01\0\x01\x06ondrop\x01\x01\x05self_\x06ondrop\0\0\0\x1A__widl_f_set_ondrop_Window\0\0\x01\x06Window\x01\0\x02\x06ondrop\x01\x02\x05self_\x06ondrop\x06ondrop\0\0\0 __widl_f_ondurationchange_Window\0\0\x01\x06Window\x01\0\x01\x10ondurationchange\x01\x01\x05self_\x10ondurationchange\0\0\0$__widl_f_set_ondurationchange_Window\0\0\x01\x06Window\x01\0\x02\x10ondurationchange\x01\x02\x05self_\x10ondurationchange\x10ondurationchange\0\0\0\x19__widl_f_onemptied_Window\0\0\x01\x06Window\x01\0\x01\tonemptied\x01\x01\x05self_\tonemptied\0\0\0\x1D__widl_f_set_onemptied_Window\0\0\x01\x06Window\x01\0\x02\tonemptied\x01\x02\x05self_\tonemptied\tonemptied\0\0\0\x17__widl_f_onended_Window\0\0\x01\x06Window\x01\0\x01\x07onended\x01\x01\x05self_\x07onended\0\0\0\x1B__widl_f_set_onended_Window\0\0\x01\x06Window\x01\0\x02\x07onended\x01\x02\x05self_\x07onended\x07onended\0\0\0\x17__widl_f_oninput_Window\0\0\x01\x06Window\x01\0\x01\x07oninput\x01\x01\x05self_\x07oninput\0\0\0\x1B__widl_f_set_oninput_Window\0\0\x01\x06Window\x01\0\x02\x07oninput\x01\x02\x05self_\x07oninput\x07oninput\0\0\0\x19__widl_f_oninvalid_Window\0\0\x01\x06Window\x01\0\x01\toninvalid\x01\x01\x05self_\toninvalid\0\0\0\x1D__widl_f_set_oninvalid_Window\0\0\x01\x06Window\x01\0\x02\toninvalid\x01\x02\x05self_\toninvalid\toninvalid\0\0\0\x19__widl_f_onkeydown_Window\0\0\x01\x06Window\x01\0\x01\tonkeydown\x01\x01\x05self_\tonkeydown\0\0\0\x1D__widl_f_set_onkeydown_Window\0\0\x01\x06Window\x01\0\x02\tonkeydown\x01\x02\x05self_\tonkeydown\tonkeydown\0\0\0\x1A__widl_f_onkeypress_Window\0\0\x01\x06Window\x01\0\x01\nonkeypress\x01\x01\x05self_\nonkeypress\0\0\0\x1E__widl_f_set_onkeypress_Window\0\0\x01\x06Window\x01\0\x02\nonkeypress\x01\x02\x05self_\nonkeypress\nonkeypress\0\0\0\x17__widl_f_onkeyup_Window\0\0\x01\x06Window\x01\0\x01\x07onkeyup\x01\x01\x05self_\x07onkeyup\0\0\0\x1B__widl_f_set_onkeyup_Window\0\0\x01\x06Window\x01\0\x02\x07onkeyup\x01\x02\x05self_\x07onkeyup\x07onkeyup\0\0\0\x16__widl_f_onload_Window\0\0\x01\x06Window\x01\0\x01\x06onload\x01\x01\x05self_\x06onload\0\0\0\x1A__widl_f_set_onload_Window\0\0\x01\x06Window\x01\0\x02\x06onload\x01\x02\x05self_\x06onload\x06onload\0\0\0\x1C__widl_f_onloadeddata_Window\0\0\x01\x06Window\x01\0\x01\x0Conloadeddata\x01\x01\x05self_\x0Conloadeddata\0\0\0 __widl_f_set_onloadeddata_Window\0\0\x01\x06Window\x01\0\x02\x0Conloadeddata\x01\x02\x05self_\x0Conloadeddata\x0Conloadeddata\0\0\0 __widl_f_onloadedmetadata_Window\0\0\x01\x06Window\x01\0\x01\x10onloadedmetadata\x01\x01\x05self_\x10onloadedmetadata\0\0\0$__widl_f_set_onloadedmetadata_Window\0\0\x01\x06Window\x01\0\x02\x10onloadedmetadata\x01\x02\x05self_\x10onloadedmetadata\x10onloadedmetadata\0\0\0\x19__widl_f_onloadend_Window\0\0\x01\x06Window\x01\0\x01\tonloadend\x01\x01\x05self_\tonloadend\0\0\0\x1D__widl_f_set_onloadend_Window\0\0\x01\x06Window\x01\0\x02\tonloadend\x01\x02\x05self_\tonloadend\tonloadend\0\0\0\x1B__widl_f_onloadstart_Window\0\0\x01\x06Window\x01\0\x01\x0Bonloadstart\x01\x01\x05self_\x0Bonloadstart\0\0\0\x1F__widl_f_set_onloadstart_Window\0\0\x01\x06Window\x01\0\x02\x0Bonloadstart\x01\x02\x05self_\x0Bonloadstart\x0Bonloadstart\0\0\0\x1B__widl_f_onmousedown_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmousedown\x01\x01\x05self_\x0Bonmousedown\0\0\0\x1F__widl_f_set_onmousedown_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmousedown\x01\x02\x05self_\x0Bonmousedown\x0Bonmousedown\0\0\0\x1C__widl_f_onmouseenter_Window\0\0\x01\x06Window\x01\0\x01\x0Conmouseenter\x01\x01\x05self_\x0Conmouseenter\0\0\0 __widl_f_set_onmouseenter_Window\0\0\x01\x06Window\x01\0\x02\x0Conmouseenter\x01\x02\x05self_\x0Conmouseenter\x0Conmouseenter\0\0\0\x1C__widl_f_onmouseleave_Window\0\0\x01\x06Window\x01\0\x01\x0Conmouseleave\x01\x01\x05self_\x0Conmouseleave\0\0\0 __widl_f_set_onmouseleave_Window\0\0\x01\x06Window\x01\0\x02\x0Conmouseleave\x01\x02\x05self_\x0Conmouseleave\x0Conmouseleave\0\0\0\x1B__widl_f_onmousemove_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmousemove\x01\x01\x05self_\x0Bonmousemove\0\0\0\x1F__widl_f_set_onmousemove_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmousemove\x01\x02\x05self_\x0Bonmousemove\x0Bonmousemove\0\0\0\x1A__widl_f_onmouseout_Window\0\0\x01\x06Window\x01\0\x01\nonmouseout\x01\x01\x05self_\nonmouseout\0\0\0\x1E__widl_f_set_onmouseout_Window\0\0\x01\x06Window\x01\0\x02\nonmouseout\x01\x02\x05self_\nonmouseout\nonmouseout\0\0\0\x1B__widl_f_onmouseover_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmouseover\x01\x01\x05self_\x0Bonmouseover\0\0\0\x1F__widl_f_set_onmouseover_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmouseover\x01\x02\x05self_\x0Bonmouseover\x0Bonmouseover\0\0\0\x19__widl_f_onmouseup_Window\0\0\x01\x06Window\x01\0\x01\tonmouseup\x01\x01\x05self_\tonmouseup\0\0\0\x1D__widl_f_set_onmouseup_Window\0\0\x01\x06Window\x01\0\x02\tonmouseup\x01\x02\x05self_\tonmouseup\tonmouseup\0\0\0\x17__widl_f_onwheel_Window\0\0\x01\x06Window\x01\0\x01\x07onwheel\x01\x01\x05self_\x07onwheel\0\0\0\x1B__widl_f_set_onwheel_Window\0\0\x01\x06Window\x01\0\x02\x07onwheel\x01\x02\x05self_\x07onwheel\x07onwheel\0\0\0\x17__widl_f_onpause_Window\0\0\x01\x06Window\x01\0\x01\x07onpause\x01\x01\x05self_\x07onpause\0\0\0\x1B__widl_f_set_onpause_Window\0\0\x01\x06Window\x01\0\x02\x07onpause\x01\x02\x05self_\x07onpause\x07onpause\0\0\0\x16__widl_f_onplay_Window\0\0\x01\x06Window\x01\0\x01\x06onplay\x01\x01\x05self_\x06onplay\0\0\0\x1A__widl_f_set_onplay_Window\0\0\x01\x06Window\x01\0\x02\x06onplay\x01\x02\x05self_\x06onplay\x06onplay\0\0\0\x19__widl_f_onplaying_Window\0\0\x01\x06Window\x01\0\x01\tonplaying\x01\x01\x05self_\tonplaying\0\0\0\x1D__widl_f_set_onplaying_Window\0\0\x01\x06Window\x01\0\x02\tonplaying\x01\x02\x05self_\tonplaying\tonplaying\0\0\0\x1A__widl_f_onprogress_Window\0\0\x01\x06Window\x01\0\x01\nonprogress\x01\x01\x05self_\nonprogress\0\0\0\x1E__widl_f_set_onprogress_Window\0\0\x01\x06Window\x01\0\x02\nonprogress\x01\x02\x05self_\nonprogress\nonprogress\0\0\0\x1C__widl_f_onratechange_Window\0\0\x01\x06Window\x01\0\x01\x0Conratechange\x01\x01\x05self_\x0Conratechange\0\0\0 __widl_f_set_onratechange_Window\0\0\x01\x06Window\x01\0\x02\x0Conratechange\x01\x02\x05self_\x0Conratechange\x0Conratechange\0\0\0\x17__widl_f_onreset_Window\0\0\x01\x06Window\x01\0\x01\x07onreset\x01\x01\x05self_\x07onreset\0\0\0\x1B__widl_f_set_onreset_Window\0\0\x01\x06Window\x01\0\x02\x07onreset\x01\x02\x05self_\x07onreset\x07onreset\0\0\0\x18__widl_f_onresize_Window\0\0\x01\x06Window\x01\0\x01\x08onresize\x01\x01\x05self_\x08onresize\0\0\0\x1C__widl_f_set_onresize_Window\0\0\x01\x06Window\x01\0\x02\x08onresize\x01\x02\x05self_\x08onresize\x08onresize\0\0\0\x18__widl_f_onscroll_Window\0\0\x01\x06Window\x01\0\x01\x08onscroll\x01\x01\x05self_\x08onscroll\0\0\0\x1C__widl_f_set_onscroll_Window\0\0\x01\x06Window\x01\0\x02\x08onscroll\x01\x02\x05self_\x08onscroll\x08onscroll\0\0\0\x18__widl_f_onseeked_Window\0\0\x01\x06Window\x01\0\x01\x08onseeked\x01\x01\x05self_\x08onseeked\0\0\0\x1C__widl_f_set_onseeked_Window\0\0\x01\x06Window\x01\0\x02\x08onseeked\x01\x02\x05self_\x08onseeked\x08onseeked\0\0\0\x19__widl_f_onseeking_Window\0\0\x01\x06Window\x01\0\x01\tonseeking\x01\x01\x05self_\tonseeking\0\0\0\x1D__widl_f_set_onseeking_Window\0\0\x01\x06Window\x01\0\x02\tonseeking\x01\x02\x05self_\tonseeking\tonseeking\0\0\0\x18__widl_f_onselect_Window\0\0\x01\x06Window\x01\0\x01\x08onselect\x01\x01\x05self_\x08onselect\0\0\0\x1C__widl_f_set_onselect_Window\0\0\x01\x06Window\x01\0\x02\x08onselect\x01\x02\x05self_\x08onselect\x08onselect\0\0\0\x16__widl_f_onshow_Window\0\0\x01\x06Window\x01\0\x01\x06onshow\x01\x01\x05self_\x06onshow\0\0\0\x1A__widl_f_set_onshow_Window\0\0\x01\x06Window\x01\0\x02\x06onshow\x01\x02\x05self_\x06onshow\x06onshow\0\0\0\x19__widl_f_onstalled_Window\0\0\x01\x06Window\x01\0\x01\tonstalled\x01\x01\x05self_\tonstalled\0\0\0\x1D__widl_f_set_onstalled_Window\0\0\x01\x06Window\x01\0\x02\tonstalled\x01\x02\x05self_\tonstalled\tonstalled\0\0\0\x18__widl_f_onsubmit_Window\0\0\x01\x06Window\x01\0\x01\x08onsubmit\x01\x01\x05self_\x08onsubmit\0\0\0\x1C__widl_f_set_onsubmit_Window\0\0\x01\x06Window\x01\0\x02\x08onsubmit\x01\x02\x05self_\x08onsubmit\x08onsubmit\0\0\0\x19__widl_f_onsuspend_Window\0\0\x01\x06Window\x01\0\x01\tonsuspend\x01\x01\x05self_\tonsuspend\0\0\0\x1D__widl_f_set_onsuspend_Window\0\0\x01\x06Window\x01\0\x02\tonsuspend\x01\x02\x05self_\tonsuspend\tonsuspend\0\0\0\x1C__widl_f_ontimeupdate_Window\0\0\x01\x06Window\x01\0\x01\x0Contimeupdate\x01\x01\x05self_\x0Contimeupdate\0\0\0 __widl_f_set_ontimeupdate_Window\0\0\x01\x06Window\x01\0\x02\x0Contimeupdate\x01\x02\x05self_\x0Contimeupdate\x0Contimeupdate\0\0\0\x1E__widl_f_onvolumechange_Window\0\0\x01\x06Window\x01\0\x01\x0Eonvolumechange\x01\x01\x05self_\x0Eonvolumechange\0\0\0\"__widl_f_set_onvolumechange_Window\0\0\x01\x06Window\x01\0\x02\x0Eonvolumechange\x01\x02\x05self_\x0Eonvolumechange\x0Eonvolumechange\0\0\0\x19__widl_f_onwaiting_Window\0\0\x01\x06Window\x01\0\x01\tonwaiting\x01\x01\x05self_\tonwaiting\0\0\0\x1D__widl_f_set_onwaiting_Window\0\0\x01\x06Window\x01\0\x02\tonwaiting\x01\x02\x05self_\tonwaiting\tonwaiting\0\0\0\x1D__widl_f_onselectstart_Window\0\0\x01\x06Window\x01\0\x01\ronselectstart\x01\x01\x05self_\ronselectstart\0\0\0!__widl_f_set_onselectstart_Window\0\0\x01\x06Window\x01\0\x02\ronselectstart\x01\x02\x05self_\ronselectstart\ronselectstart\0\0\0\x18__widl_f_ontoggle_Window\0\0\x01\x06Window\x01\0\x01\x08ontoggle\x01\x01\x05self_\x08ontoggle\0\0\0\x1C__widl_f_set_ontoggle_Window\0\0\x01\x06Window\x01\0\x02\x08ontoggle\x01\x02\x05self_\x08ontoggle\x08ontoggle\0\0\0\x1F__widl_f_onpointercancel_Window\0\0\x01\x06Window\x01\0\x01\x0Fonpointercancel\x01\x01\x05self_\x0Fonpointercancel\0\0\0#__widl_f_set_onpointercancel_Window\0\0\x01\x06Window\x01\0\x02\x0Fonpointercancel\x01\x02\x05self_\x0Fonpointercancel\x0Fonpointercancel\0\0\0\x1D__widl_f_onpointerdown_Window\0\0\x01\x06Window\x01\0\x01\ronpointerdown\x01\x01\x05self_\ronpointerdown\0\0\0!__widl_f_set_onpointerdown_Window\0\0\x01\x06Window\x01\0\x02\ronpointerdown\x01\x02\x05self_\ronpointerdown\ronpointerdown\0\0\0\x1B__widl_f_onpointerup_Window\0\0\x01\x06Window\x01\0\x01\x0Bonpointerup\x01\x01\x05self_\x0Bonpointerup\0\0\0\x1F__widl_f_set_onpointerup_Window\0\0\x01\x06Window\x01\0\x02\x0Bonpointerup\x01\x02\x05self_\x0Bonpointerup\x0Bonpointerup\0\0\0\x1D__widl_f_onpointermove_Window\0\0\x01\x06Window\x01\0\x01\ronpointermove\x01\x01\x05self_\ronpointermove\0\0\0!__widl_f_set_onpointermove_Window\0\0\x01\x06Window\x01\0\x02\ronpointermove\x01\x02\x05self_\ronpointermove\ronpointermove\0\0\0\x1C__widl_f_onpointerout_Window\0\0\x01\x06Window\x01\0\x01\x0Conpointerout\x01\x01\x05self_\x0Conpointerout\0\0\0 __widl_f_set_onpointerout_Window\0\0\x01\x06Window\x01\0\x02\x0Conpointerout\x01\x02\x05self_\x0Conpointerout\x0Conpointerout\0\0\0\x1D__widl_f_onpointerover_Window\0\0\x01\x06Window\x01\0\x01\ronpointerover\x01\x01\x05self_\ronpointerover\0\0\0!__widl_f_set_onpointerover_Window\0\0\x01\x06Window\x01\0\x02\ronpointerover\x01\x02\x05self_\ronpointerover\ronpointerover\0\0\0\x1E__widl_f_onpointerenter_Window\0\0\x01\x06Window\x01\0\x01\x0Eonpointerenter\x01\x01\x05self_\x0Eonpointerenter\0\0\0\"__widl_f_set_onpointerenter_Window\0\0\x01\x06Window\x01\0\x02\x0Eonpointerenter\x01\x02\x05self_\x0Eonpointerenter\x0Eonpointerenter\0\0\0\x1E__widl_f_onpointerleave_Window\0\0\x01\x06Window\x01\0\x01\x0Eonpointerleave\x01\x01\x05self_\x0Eonpointerleave\0\0\0\"__widl_f_set_onpointerleave_Window\0\0\x01\x06Window\x01\0\x02\x0Eonpointerleave\x01\x02\x05self_\x0Eonpointerleave\x0Eonpointerleave\0\0\0#__widl_f_ongotpointercapture_Window\0\0\x01\x06Window\x01\0\x01\x13ongotpointercapture\x01\x01\x05self_\x13ongotpointercapture\0\0\0'__widl_f_set_ongotpointercapture_Window\0\0\x01\x06Window\x01\0\x02\x13ongotpointercapture\x01\x02\x05self_\x13ongotpointercapture\x13ongotpointercapture\0\0\0$__widl_f_onlostpointercapture_Window\0\0\x01\x06Window\x01\0\x01\x14onlostpointercapture\x01\x01\x05self_\x14onlostpointercapture\0\0\0(__widl_f_set_onlostpointercapture_Window\0\0\x01\x06Window\x01\0\x02\x14onlostpointercapture\x01\x02\x05self_\x14onlostpointercapture\x14onlostpointercapture\0\0\0!__widl_f_onanimationcancel_Window\0\0\x01\x06Window\x01\0\x01\x11onanimationcancel\x01\x01\x05self_\x11onanimationcancel\0\0\0%__widl_f_set_onanimationcancel_Window\0\0\x01\x06Window\x01\0\x02\x11onanimationcancel\x01\x02\x05self_\x11onanimationcancel\x11onanimationcancel\0\0\0\x1E__widl_f_onanimationend_Window\0\0\x01\x06Window\x01\0\x01\x0Eonanimationend\x01\x01\x05self_\x0Eonanimationend\0\0\0\"__widl_f_set_onanimationend_Window\0\0\x01\x06Window\x01\0\x02\x0Eonanimationend\x01\x02\x05self_\x0Eonanimationend\x0Eonanimationend\0\0\0$__widl_f_onanimationiteration_Window\0\0\x01\x06Window\x01\0\x01\x14onanimationiteration\x01\x01\x05self_\x14onanimationiteration\0\0\0(__widl_f_set_onanimationiteration_Window\0\0\x01\x06Window\x01\0\x02\x14onanimationiteration\x01\x02\x05self_\x14onanimationiteration\x14onanimationiteration\0\0\0 __widl_f_onanimationstart_Window\0\0\x01\x06Window\x01\0\x01\x10onanimationstart\x01\x01\x05self_\x10onanimationstart\0\0\0$__widl_f_set_onanimationstart_Window\0\0\x01\x06Window\x01\0\x02\x10onanimationstart\x01\x02\x05self_\x10onanimationstart\x10onanimationstart\0\0\0\"__widl_f_ontransitioncancel_Window\0\0\x01\x06Window\x01\0\x01\x12ontransitioncancel\x01\x01\x05self_\x12ontransitioncancel\0\0\0&__widl_f_set_ontransitioncancel_Window\0\0\x01\x06Window\x01\0\x02\x12ontransitioncancel\x01\x02\x05self_\x12ontransitioncancel\x12ontransitioncancel\0\0\0\x1F__widl_f_ontransitionend_Window\0\0\x01\x06Window\x01\0\x01\x0Fontransitionend\x01\x01\x05self_\x0Fontransitionend\0\0\0#__widl_f_set_ontransitionend_Window\0\0\x01\x06Window\x01\0\x02\x0Fontransitionend\x01\x02\x05self_\x0Fontransitionend\x0Fontransitionend\0\0\0\x1F__widl_f_ontransitionrun_Window\0\0\x01\x06Window\x01\0\x01\x0Fontransitionrun\x01\x01\x05self_\x0Fontransitionrun\0\0\0#__widl_f_set_ontransitionrun_Window\0\0\x01\x06Window\x01\0\x02\x0Fontransitionrun\x01\x02\x05self_\x0Fontransitionrun\x0Fontransitionrun\0\0\0!__widl_f_ontransitionstart_Window\0\0\x01\x06Window\x01\0\x01\x11ontransitionstart\x01\x01\x05self_\x11ontransitionstart\0\0\0%__widl_f_set_ontransitionstart_Window\0\0\x01\x06Window\x01\0\x02\x11ontransitionstart\x01\x02\x05self_\x11ontransitionstart\x11ontransitionstart\0\0\0$__widl_f_onwebkitanimationend_Window\0\0\x01\x06Window\x01\0\x01\x14onwebkitanimationend\x01\x01\x05self_\x14onwebkitanimationend\0\0\0(__widl_f_set_onwebkitanimationend_Window\0\0\x01\x06Window\x01\0\x02\x14onwebkitanimationend\x01\x02\x05self_\x14onwebkitanimationend\x14onwebkitanimationend\0\0\0*__widl_f_onwebkitanimationiteration_Window\0\0\x01\x06Window\x01\0\x01\x1Aonwebkitanimationiteration\x01\x01\x05self_\x1Aonwebkitanimationiteration\0\0\0.__widl_f_set_onwebkitanimationiteration_Window\0\0\x01\x06Window\x01\0\x02\x1Aonwebkitanimationiteration\x01\x02\x05self_\x1Aonwebkitanimationiteration\x1Aonwebkitanimationiteration\0\0\0&__widl_f_onwebkitanimationstart_Window\0\0\x01\x06Window\x01\0\x01\x16onwebkitanimationstart\x01\x01\x05self_\x16onwebkitanimationstart\0\0\0*__widl_f_set_onwebkitanimationstart_Window\0\0\x01\x06Window\x01\0\x02\x16onwebkitanimationstart\x01\x02\x05self_\x16onwebkitanimationstart\x16onwebkitanimationstart\0\0\0%__widl_f_onwebkittransitionend_Window\0\0\x01\x06Window\x01\0\x01\x15onwebkittransitionend\x01\x01\x05self_\x15onwebkittransitionend\0\0\0)__widl_f_set_onwebkittransitionend_Window\0\0\x01\x06Window\x01\0\x02\x15onwebkittransitionend\x01\x02\x05self_\x15onwebkittransitionend\x15onwebkittransitionend\0\0\0\x17__widl_f_onerror_Window\0\0\x01\x06Window\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1B__widl_f_set_onerror_Window\0\0\x01\x06Window\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0\x1C__widl_f_ontouchstart_Window\0\0\x01\x06Window\x01\0\x01\x0Contouchstart\x01\x01\x05self_\x0Contouchstart\0\0\0 __widl_f_set_ontouchstart_Window\0\0\x01\x06Window\x01\0\x02\x0Contouchstart\x01\x02\x05self_\x0Contouchstart\x0Contouchstart\0\0\0\x1A__widl_f_ontouchend_Window\0\0\x01\x06Window\x01\0\x01\nontouchend\x01\x01\x05self_\nontouchend\0\0\0\x1E__widl_f_set_ontouchend_Window\0\0\x01\x06Window\x01\0\x02\nontouchend\x01\x02\x05self_\nontouchend\nontouchend\0\0\0\x1B__widl_f_ontouchmove_Window\0\0\x01\x06Window\x01\0\x01\x0Bontouchmove\x01\x01\x05self_\x0Bontouchmove\0\0\0\x1F__widl_f_set_ontouchmove_Window\0\0\x01\x06Window\x01\0\x02\x0Bontouchmove\x01\x02\x05self_\x0Bontouchmove\x0Bontouchmove\0\0\0\x1D__widl_f_ontouchcancel_Window\0\0\x01\x06Window\x01\0\x01\rontouchcancel\x01\x01\x05self_\rontouchcancel\0\0\0!__widl_f_set_ontouchcancel_Window\0\0\x01\x06Window\x01\0\x02\rontouchcancel\x01\x02\x05self_\rontouchcancel\rontouchcancel\0\0\0\x1C__widl_f_onafterprint_Window\0\0\x01\x06Window\x01\0\x01\x0Conafterprint\x01\x01\x05self_\x0Conafterprint\0\0\0 __widl_f_set_onafterprint_Window\0\0\x01\x06Window\x01\0\x02\x0Conafterprint\x01\x02\x05self_\x0Conafterprint\x0Conafterprint\0\0\0\x1D__widl_f_onbeforeprint_Window\0\0\x01\x06Window\x01\0\x01\ronbeforeprint\x01\x01\x05self_\ronbeforeprint\0\0\0!__widl_f_set_onbeforeprint_Window\0\0\x01\x06Window\x01\0\x02\ronbeforeprint\x01\x02\x05self_\ronbeforeprint\ronbeforeprint\0\0\0\x1E__widl_f_onbeforeunload_Window\0\0\x01\x06Window\x01\0\x01\x0Eonbeforeunload\x01\x01\x05self_\x0Eonbeforeunload\0\0\0\"__widl_f_set_onbeforeunload_Window\0\0\x01\x06Window\x01\0\x02\x0Eonbeforeunload\x01\x02\x05self_\x0Eonbeforeunload\x0Eonbeforeunload\0\0\0\x1C__widl_f_onhashchange_Window\0\0\x01\x06Window\x01\0\x01\x0Conhashchange\x01\x01\x05self_\x0Conhashchange\0\0\0 __widl_f_set_onhashchange_Window\0\0\x01\x06Window\x01\0\x02\x0Conhashchange\x01\x02\x05self_\x0Conhashchange\x0Conhashchange\0\0\0 __widl_f_onlanguagechange_Window\0\0\x01\x06Window\x01\0\x01\x10onlanguagechange\x01\x01\x05self_\x10onlanguagechange\0\0\0$__widl_f_set_onlanguagechange_Window\0\0\x01\x06Window\x01\0\x02\x10onlanguagechange\x01\x02\x05self_\x10onlanguagechange\x10onlanguagechange\0\0\0\x19__widl_f_onmessage_Window\0\0\x01\x06Window\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Window\0\0\x01\x06Window\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Window\0\0\x01\x06Window\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Window\0\0\x01\x06Window\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\0\x19__widl_f_onoffline_Window\0\0\x01\x06Window\x01\0\x01\tonoffline\x01\x01\x05self_\tonoffline\0\0\0\x1D__widl_f_set_onoffline_Window\0\0\x01\x06Window\x01\0\x02\tonoffline\x01\x02\x05self_\tonoffline\tonoffline\0\0\0\x18__widl_f_ononline_Window\0\0\x01\x06Window\x01\0\x01\x08ononline\x01\x01\x05self_\x08ononline\0\0\0\x1C__widl_f_set_ononline_Window\0\0\x01\x06Window\x01\0\x02\x08ononline\x01\x02\x05self_\x08ononline\x08ononline\0\0\0\x1A__widl_f_onpagehide_Window\0\0\x01\x06Window\x01\0\x01\nonpagehide\x01\x01\x05self_\nonpagehide\0\0\0\x1E__widl_f_set_onpagehide_Window\0\0\x01\x06Window\x01\0\x02\nonpagehide\x01\x02\x05self_\nonpagehide\nonpagehide\0\0\0\x1A__widl_f_onpageshow_Window\0\0\x01\x06Window\x01\0\x01\nonpageshow\x01\x01\x05self_\nonpageshow\0\0\0\x1E__widl_f_set_onpageshow_Window\0\0\x01\x06Window\x01\0\x02\nonpageshow\x01\x02\x05self_\nonpageshow\nonpageshow\0\0\0\x1A__widl_f_onpopstate_Window\0\0\x01\x06Window\x01\0\x01\nonpopstate\x01\x01\x05self_\nonpopstate\0\0\0\x1E__widl_f_set_onpopstate_Window\0\0\x01\x06Window\x01\0\x02\nonpopstate\x01\x02\x05self_\nonpopstate\nonpopstate\0\0\0\x19__widl_f_onstorage_Window\0\0\x01\x06Window\x01\0\x01\tonstorage\x01\x01\x05self_\tonstorage\0\0\0\x1D__widl_f_set_onstorage_Window\0\0\x01\x06Window\x01\0\x02\tonstorage\x01\x02\x05self_\tonstorage\tonstorage\0\0\0\x18__widl_f_onunload_Window\0\0\x01\x06Window\x01\0\x01\x08onunload\x01\x01\x05self_\x08onunload\0\0\0\x1C__widl_f_set_onunload_Window\0\0\x01\x06Window\x01\0\x02\x08onunload\x01\x02\x05self_\x08onunload\x08onunload\0\0\0\x14__widl_f_atob_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04atob\x04atob\0\0\0\x14__widl_f_btoa_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04btoa\x04btoa\0\0\0\x1E__widl_f_clear_interval_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rclearInterval\0\0\0*__widl_f_clear_interval_with_handle_Window\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\rclearInterval\0\0\0\x1D__widl_f_clear_timeout_Window\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x0CclearTimeout\0\0\0)__widl_f_clear_timeout_with_handle_Window\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x0CclearTimeout\0\0\03__widl_f_create_image_bitmap_with_image_data_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0D__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\06__widl_f_create_image_bitmap_with_buffer_source_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\01__widl_f_create_image_bitmap_with_u8_array_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0W__widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0h__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0Z__widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0U__widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0\x1E__widl_f_fetch_with_str_Window\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x05input\x05fetch\0\0\0*__widl_f_set_interval_with_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0D__widl_f_set_interval_with_callback_and_timeout_and_arguments_Window\x01\x01\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window\x01\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window\x01\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\x0BsetInterval\0\0\0%__widl_f_set_interval_with_str_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0<__widl_f_set_interval_with_str_and_timeout_and_unused_Window\x01\x01\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_6_Window\x01\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_7_Window\x01\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\x0BsetInterval\0\0\0)__widl_f_set_timeout_with_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0C__widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window\x01\x01\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window\x01\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window\x01\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\nsetTimeout\0\0\0$__widl_f_set_timeout_with_str_Window\x01\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0;__widl_f_set_timeout_with_str_and_timeout_and_unused_Window\x01\x01\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window\x01\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window\x01\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\nsetTimeout\0\0\0\x16__widl_f_origin_Window\0\0\x01\x06Window\x01\0\x01\x06origin\x01\x01\x05self_\x06origin\0\0\0!__widl_f_is_secure_context_Window\0\0\x01\x06Window\x01\0\x01\x0FisSecureContext\x01\x01\x05self_\x0FisSecureContext\0\0\x02\x06Worker\x18__widl_instanceof_Worker\0\0\0\0\x13__widl_f_new_Worker\x01\0\x01\x06Worker\0\x01\x01\nscript_url\x03new\0\0\0\x1C__widl_f_post_message_Worker\x01\0\x01\x06Worker\x01\0\0\x01\x02\x05self_\x07message\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Worker\x01\0\x01\x06Worker\x01\0\0\x01\x03\x05self_\x07message\x08transfer\x0BpostMessage\0\0\0\x19__widl_f_terminate_Worker\0\0\x01\x06Worker\x01\0\0\x01\x01\x05self_\tterminate\0\0\0\x19__widl_f_onmessage_Worker\0\0\x01\x06Worker\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Worker\0\0\x01\x06Worker\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Worker\0\0\x01\x06Worker\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Worker\0\0\x01\x06Worker\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\0\x17__widl_f_onerror_Worker\0\0\x01\x06Worker\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1B__widl_f_set_onerror_Worker\0\0\x01\x06Worker\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0\0\x18web-sys-ea2aff24215c1559\0" } ;